
week12_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ec  080089ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f4  080089f4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080089fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000080  08008a7c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08008a7c  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbf9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000212e  00000000  00000000  0002fca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  00031dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  00032d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001720d  00000000  00000000  00033bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1e5  00000000  00000000  0004addd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093327  00000000  00000000  00055fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e92e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a8  00000000  00000000  000e9364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081e8 	.word	0x080081e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080081e8 	.word	0x080081e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_frsub>:
 8000c2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	e002      	b.n	8000c38 <__addsf3>
 8000c32:	bf00      	nop

08000c34 <__aeabi_fsub>:
 8000c34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c38 <__addsf3>:
 8000c38:	0042      	lsls	r2, r0, #1
 8000c3a:	bf1f      	itttt	ne
 8000c3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c40:	ea92 0f03 	teqne	r2, r3
 8000c44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4c:	d06a      	beq.n	8000d24 <__addsf3+0xec>
 8000c4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c56:	bfc1      	itttt	gt
 8000c58:	18d2      	addgt	r2, r2, r3
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	4048      	eorgt	r0, r1
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	bfb8      	it	lt
 8000c62:	425b      	neglt	r3, r3
 8000c64:	2b19      	cmp	r3, #25
 8000c66:	bf88      	it	hi
 8000c68:	4770      	bxhi	lr
 8000c6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4240      	negne	r0, r0
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c86:	bf18      	it	ne
 8000c88:	4249      	negne	r1, r1
 8000c8a:	ea92 0f03 	teq	r2, r3
 8000c8e:	d03f      	beq.n	8000d10 <__addsf3+0xd8>
 8000c90:	f1a2 0201 	sub.w	r2, r2, #1
 8000c94:	fa41 fc03 	asr.w	ip, r1, r3
 8000c98:	eb10 000c 	adds.w	r0, r0, ip
 8000c9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ca0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__addsf3+0x78>
 8000caa:	4249      	negs	r1, r1
 8000cac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb4:	d313      	bcc.n	8000cde <__addsf3+0xa6>
 8000cb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cba:	d306      	bcc.n	8000cca <__addsf3+0x92>
 8000cbc:	0840      	lsrs	r0, r0, #1
 8000cbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc2:	f102 0201 	add.w	r2, r2, #1
 8000cc6:	2afe      	cmp	r2, #254	; 0xfe
 8000cc8:	d251      	bcs.n	8000d6e <__addsf3+0x136>
 8000cca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd2:	bf08      	it	eq
 8000cd4:	f020 0001 	biceq.w	r0, r0, #1
 8000cd8:	ea40 0003 	orr.w	r0, r0, r3
 8000cdc:	4770      	bx	lr
 8000cde:	0049      	lsls	r1, r1, #1
 8000ce0:	eb40 0000 	adc.w	r0, r0, r0
 8000ce4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ce8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cec:	d1ed      	bne.n	8000cca <__addsf3+0x92>
 8000cee:	fab0 fc80 	clz	ip, r0
 8000cf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfe:	bfaa      	itet	ge
 8000d00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d04:	4252      	neglt	r2, r2
 8000d06:	4318      	orrge	r0, r3
 8000d08:	bfbc      	itt	lt
 8000d0a:	40d0      	lsrlt	r0, r2
 8000d0c:	4318      	orrlt	r0, r3
 8000d0e:	4770      	bx	lr
 8000d10:	f092 0f00 	teq	r2, #0
 8000d14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d18:	bf06      	itte	eq
 8000d1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1e:	3201      	addeq	r2, #1
 8000d20:	3b01      	subne	r3, #1
 8000d22:	e7b5      	b.n	8000c90 <__addsf3+0x58>
 8000d24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	bf18      	it	ne
 8000d2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d32:	d021      	beq.n	8000d78 <__addsf3+0x140>
 8000d34:	ea92 0f03 	teq	r2, r3
 8000d38:	d004      	beq.n	8000d44 <__addsf3+0x10c>
 8000d3a:	f092 0f00 	teq	r2, #0
 8000d3e:	bf08      	it	eq
 8000d40:	4608      	moveq	r0, r1
 8000d42:	4770      	bx	lr
 8000d44:	ea90 0f01 	teq	r0, r1
 8000d48:	bf1c      	itt	ne
 8000d4a:	2000      	movne	r0, #0
 8000d4c:	4770      	bxne	lr
 8000d4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d52:	d104      	bne.n	8000d5e <__addsf3+0x126>
 8000d54:	0040      	lsls	r0, r0, #1
 8000d56:	bf28      	it	cs
 8000d58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	4770      	bx	lr
 8000d5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d62:	bf3c      	itt	cc
 8000d64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d68:	4770      	bxcc	lr
 8000d6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d76:	4770      	bx	lr
 8000d78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d7c:	bf16      	itet	ne
 8000d7e:	4608      	movne	r0, r1
 8000d80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d84:	4601      	movne	r1, r0
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	bf06      	itte	eq
 8000d8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8e:	ea90 0f01 	teqeq	r0, r1
 8000d92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_ui2f>:
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e004      	b.n	8000da8 <__aeabi_i2f+0x8>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_i2f>:
 8000da0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da4:	bf48      	it	mi
 8000da6:	4240      	negmi	r0, r0
 8000da8:	ea5f 0c00 	movs.w	ip, r0
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db4:	4601      	mov	r1, r0
 8000db6:	f04f 0000 	mov.w	r0, #0
 8000dba:	e01c      	b.n	8000df6 <__aeabi_l2f+0x2a>

08000dbc <__aeabi_ul2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e00a      	b.n	8000de0 <__aeabi_l2f+0x14>
 8000dca:	bf00      	nop

08000dcc <__aeabi_l2f>:
 8000dcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd0:	bf08      	it	eq
 8000dd2:	4770      	bxeq	lr
 8000dd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd8:	d502      	bpl.n	8000de0 <__aeabi_l2f+0x14>
 8000dda:	4240      	negs	r0, r0
 8000ddc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de0:	ea5f 0c01 	movs.w	ip, r1
 8000de4:	bf02      	ittt	eq
 8000de6:	4684      	moveq	ip, r0
 8000de8:	4601      	moveq	r1, r0
 8000dea:	2000      	moveq	r0, #0
 8000dec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df0:	bf08      	it	eq
 8000df2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfa:	fabc f28c 	clz	r2, ip
 8000dfe:	3a08      	subs	r2, #8
 8000e00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e04:	db10      	blt.n	8000e28 <__aeabi_l2f+0x5c>
 8000e06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e10:	f1c2 0220 	rsb	r2, r2, #32
 8000e14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	eb43 0002 	adc.w	r0, r3, r2
 8000e20:	bf08      	it	eq
 8000e22:	f020 0001 	biceq.w	r0, r0, #1
 8000e26:	4770      	bx	lr
 8000e28:	f102 0220 	add.w	r2, r2, #32
 8000e2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e30:	f1c2 0220 	rsb	r2, r2, #32
 8000e34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e38:	fa21 f202 	lsr.w	r2, r1, r2
 8000e3c:	eb43 0002 	adc.w	r0, r3, r2
 8000e40:	bf08      	it	eq
 8000e42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_uldivmod>:
 8000e48:	b953      	cbnz	r3, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4a:	b94a      	cbnz	r2, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	bf08      	it	eq
 8000e50:	2800      	cmpeq	r0, #0
 8000e52:	bf1c      	itt	ne
 8000e54:	f04f 31ff 	movne.w	r1, #4294967295
 8000e58:	f04f 30ff 	movne.w	r0, #4294967295
 8000e5c:	f000 b972 	b.w	8001144 <__aeabi_idiv0>
 8000e60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e68:	f000 f806 	bl	8000e78 <__udivmoddi4>
 8000e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr

08000e78 <__udivmoddi4>:
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e7c:	9e08      	ldr	r6, [sp, #32]
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4688      	mov	r8, r1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d14b      	bne.n	8000f1e <__udivmoddi4+0xa6>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	4615      	mov	r5, r2
 8000e8a:	d967      	bls.n	8000f5c <__udivmoddi4+0xe4>
 8000e8c:	fab2 f282 	clz	r2, r2
 8000e90:	b14a      	cbz	r2, 8000ea6 <__udivmoddi4+0x2e>
 8000e92:	f1c2 0720 	rsb	r7, r2, #32
 8000e96:	fa01 f302 	lsl.w	r3, r1, r2
 8000e9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000e9e:	4095      	lsls	r5, r2
 8000ea0:	ea47 0803 	orr.w	r8, r7, r3
 8000ea4:	4094      	lsls	r4, r2
 8000ea6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eaa:	0c23      	lsrs	r3, r4, #16
 8000eac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000eb0:	fa1f fc85 	uxth.w	ip, r5
 8000eb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000eb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ebc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	d909      	bls.n	8000ed8 <__udivmoddi4+0x60>
 8000ec4:	18eb      	adds	r3, r5, r3
 8000ec6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000eca:	f080 811b 	bcs.w	8001104 <__udivmoddi4+0x28c>
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	f240 8118 	bls.w	8001104 <__udivmoddi4+0x28c>
 8000ed4:	3f02      	subs	r7, #2
 8000ed6:	442b      	add	r3, r5
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x8c>
 8000ef0:	192c      	adds	r4, r5, r4
 8000ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ef6:	f080 8107 	bcs.w	8001108 <__udivmoddi4+0x290>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	f240 8104 	bls.w	8001108 <__udivmoddi4+0x290>
 8000f00:	3802      	subs	r0, #2
 8000f02:	442c      	add	r4, r5
 8000f04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f08:	eba4 040c 	sub.w	r4, r4, ip
 8000f0c:	2700      	movs	r7, #0
 8000f0e:	b11e      	cbz	r6, 8000f18 <__udivmoddi4+0xa0>
 8000f10:	40d4      	lsrs	r4, r2
 8000f12:	2300      	movs	r3, #0
 8000f14:	e9c6 4300 	strd	r4, r3, [r6]
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d909      	bls.n	8000f36 <__udivmoddi4+0xbe>
 8000f22:	2e00      	cmp	r6, #0
 8000f24:	f000 80eb 	beq.w	80010fe <__udivmoddi4+0x286>
 8000f28:	2700      	movs	r7, #0
 8000f2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000f2e:	4638      	mov	r0, r7
 8000f30:	4639      	mov	r1, r7
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	fab3 f783 	clz	r7, r3
 8000f3a:	2f00      	cmp	r7, #0
 8000f3c:	d147      	bne.n	8000fce <__udivmoddi4+0x156>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d302      	bcc.n	8000f48 <__udivmoddi4+0xd0>
 8000f42:	4282      	cmp	r2, r0
 8000f44:	f200 80fa 	bhi.w	800113c <__udivmoddi4+0x2c4>
 8000f48:	1a84      	subs	r4, r0, r2
 8000f4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f4e:	2001      	movs	r0, #1
 8000f50:	4698      	mov	r8, r3
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d0e0      	beq.n	8000f18 <__udivmoddi4+0xa0>
 8000f56:	e9c6 4800 	strd	r4, r8, [r6]
 8000f5a:	e7dd      	b.n	8000f18 <__udivmoddi4+0xa0>
 8000f5c:	b902      	cbnz	r2, 8000f60 <__udivmoddi4+0xe8>
 8000f5e:	deff      	udf	#255	; 0xff
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	f040 808f 	bne.w	8001088 <__udivmoddi4+0x210>
 8000f6a:	1b49      	subs	r1, r1, r5
 8000f6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f70:	fa1f f885 	uxth.w	r8, r5
 8000f74:	2701      	movs	r7, #1
 8000f76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000f7a:	0c23      	lsrs	r3, r4, #16
 8000f7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000f80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f84:	fb08 f10c 	mul.w	r1, r8, ip
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d907      	bls.n	8000f9c <__udivmoddi4+0x124>
 8000f8c:	18eb      	adds	r3, r5, r3
 8000f8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f92:	d202      	bcs.n	8000f9a <__udivmoddi4+0x122>
 8000f94:	4299      	cmp	r1, r3
 8000f96:	f200 80cd 	bhi.w	8001134 <__udivmoddi4+0x2bc>
 8000f9a:	4684      	mov	ip, r0
 8000f9c:	1a59      	subs	r1, r3, r1
 8000f9e:	b2a3      	uxth	r3, r4
 8000fa0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fa4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000fa8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fac:	fb08 f800 	mul.w	r8, r8, r0
 8000fb0:	45a0      	cmp	r8, r4
 8000fb2:	d907      	bls.n	8000fc4 <__udivmoddi4+0x14c>
 8000fb4:	192c      	adds	r4, r5, r4
 8000fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fba:	d202      	bcs.n	8000fc2 <__udivmoddi4+0x14a>
 8000fbc:	45a0      	cmp	r8, r4
 8000fbe:	f200 80b6 	bhi.w	800112e <__udivmoddi4+0x2b6>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	eba4 0408 	sub.w	r4, r4, r8
 8000fc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fcc:	e79f      	b.n	8000f0e <__udivmoddi4+0x96>
 8000fce:	f1c7 0c20 	rsb	ip, r7, #32
 8000fd2:	40bb      	lsls	r3, r7
 8000fd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000fd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000fdc:	fa01 f407 	lsl.w	r4, r1, r7
 8000fe0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000fe4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000fe8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000fec:	4325      	orrs	r5, r4
 8000fee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ff2:	0c2c      	lsrs	r4, r5, #16
 8000ff4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ff8:	fa1f fa8e 	uxth.w	sl, lr
 8000ffc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001000:	fb09 f40a 	mul.w	r4, r9, sl
 8001004:	429c      	cmp	r4, r3
 8001006:	fa02 f207 	lsl.w	r2, r2, r7
 800100a:	fa00 f107 	lsl.w	r1, r0, r7
 800100e:	d90b      	bls.n	8001028 <__udivmoddi4+0x1b0>
 8001010:	eb1e 0303 	adds.w	r3, lr, r3
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	f080 8087 	bcs.w	800112a <__udivmoddi4+0x2b2>
 800101c:	429c      	cmp	r4, r3
 800101e:	f240 8084 	bls.w	800112a <__udivmoddi4+0x2b2>
 8001022:	f1a9 0902 	sub.w	r9, r9, #2
 8001026:	4473      	add	r3, lr
 8001028:	1b1b      	subs	r3, r3, r4
 800102a:	b2ad      	uxth	r5, r5
 800102c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001030:	fb08 3310 	mls	r3, r8, r0, r3
 8001034:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001038:	fb00 fa0a 	mul.w	sl, r0, sl
 800103c:	45a2      	cmp	sl, r4
 800103e:	d908      	bls.n	8001052 <__udivmoddi4+0x1da>
 8001040:	eb1e 0404 	adds.w	r4, lr, r4
 8001044:	f100 33ff 	add.w	r3, r0, #4294967295
 8001048:	d26b      	bcs.n	8001122 <__udivmoddi4+0x2aa>
 800104a:	45a2      	cmp	sl, r4
 800104c:	d969      	bls.n	8001122 <__udivmoddi4+0x2aa>
 800104e:	3802      	subs	r0, #2
 8001050:	4474      	add	r4, lr
 8001052:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	eba4 040a 	sub.w	r4, r4, sl
 800105e:	454c      	cmp	r4, r9
 8001060:	46c2      	mov	sl, r8
 8001062:	464b      	mov	r3, r9
 8001064:	d354      	bcc.n	8001110 <__udivmoddi4+0x298>
 8001066:	d051      	beq.n	800110c <__udivmoddi4+0x294>
 8001068:	2e00      	cmp	r6, #0
 800106a:	d069      	beq.n	8001140 <__udivmoddi4+0x2c8>
 800106c:	ebb1 050a 	subs.w	r5, r1, sl
 8001070:	eb64 0403 	sbc.w	r4, r4, r3
 8001074:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001078:	40fd      	lsrs	r5, r7
 800107a:	40fc      	lsrs	r4, r7
 800107c:	ea4c 0505 	orr.w	r5, ip, r5
 8001080:	e9c6 5400 	strd	r5, r4, [r6]
 8001084:	2700      	movs	r7, #0
 8001086:	e747      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001088:	f1c2 0320 	rsb	r3, r2, #32
 800108c:	fa20 f703 	lsr.w	r7, r0, r3
 8001090:	4095      	lsls	r5, r2
 8001092:	fa01 f002 	lsl.w	r0, r1, r2
 8001096:	fa21 f303 	lsr.w	r3, r1, r3
 800109a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800109e:	4338      	orrs	r0, r7
 80010a0:	0c01      	lsrs	r1, r0, #16
 80010a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80010a6:	fa1f f885 	uxth.w	r8, r5
 80010aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80010ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010b2:	fb07 f308 	mul.w	r3, r7, r8
 80010b6:	428b      	cmp	r3, r1
 80010b8:	fa04 f402 	lsl.w	r4, r4, r2
 80010bc:	d907      	bls.n	80010ce <__udivmoddi4+0x256>
 80010be:	1869      	adds	r1, r5, r1
 80010c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80010c4:	d22f      	bcs.n	8001126 <__udivmoddi4+0x2ae>
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d92d      	bls.n	8001126 <__udivmoddi4+0x2ae>
 80010ca:	3f02      	subs	r7, #2
 80010cc:	4429      	add	r1, r5
 80010ce:	1acb      	subs	r3, r1, r3
 80010d0:	b281      	uxth	r1, r0
 80010d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80010d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80010da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010de:	fb00 f308 	mul.w	r3, r0, r8
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d907      	bls.n	80010f6 <__udivmoddi4+0x27e>
 80010e6:	1869      	adds	r1, r5, r1
 80010e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80010ec:	d217      	bcs.n	800111e <__udivmoddi4+0x2a6>
 80010ee:	428b      	cmp	r3, r1
 80010f0:	d915      	bls.n	800111e <__udivmoddi4+0x2a6>
 80010f2:	3802      	subs	r0, #2
 80010f4:	4429      	add	r1, r5
 80010f6:	1ac9      	subs	r1, r1, r3
 80010f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80010fc:	e73b      	b.n	8000f76 <__udivmoddi4+0xfe>
 80010fe:	4637      	mov	r7, r6
 8001100:	4630      	mov	r0, r6
 8001102:	e709      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001104:	4607      	mov	r7, r0
 8001106:	e6e7      	b.n	8000ed8 <__udivmoddi4+0x60>
 8001108:	4618      	mov	r0, r3
 800110a:	e6fb      	b.n	8000f04 <__udivmoddi4+0x8c>
 800110c:	4541      	cmp	r1, r8
 800110e:	d2ab      	bcs.n	8001068 <__udivmoddi4+0x1f0>
 8001110:	ebb8 0a02 	subs.w	sl, r8, r2
 8001114:	eb69 020e 	sbc.w	r2, r9, lr
 8001118:	3801      	subs	r0, #1
 800111a:	4613      	mov	r3, r2
 800111c:	e7a4      	b.n	8001068 <__udivmoddi4+0x1f0>
 800111e:	4660      	mov	r0, ip
 8001120:	e7e9      	b.n	80010f6 <__udivmoddi4+0x27e>
 8001122:	4618      	mov	r0, r3
 8001124:	e795      	b.n	8001052 <__udivmoddi4+0x1da>
 8001126:	4667      	mov	r7, ip
 8001128:	e7d1      	b.n	80010ce <__udivmoddi4+0x256>
 800112a:	4681      	mov	r9, r0
 800112c:	e77c      	b.n	8001028 <__udivmoddi4+0x1b0>
 800112e:	3802      	subs	r0, #2
 8001130:	442c      	add	r4, r5
 8001132:	e747      	b.n	8000fc4 <__udivmoddi4+0x14c>
 8001134:	f1ac 0c02 	sub.w	ip, ip, #2
 8001138:	442b      	add	r3, r5
 800113a:	e72f      	b.n	8000f9c <__udivmoddi4+0x124>
 800113c:	4638      	mov	r0, r7
 800113e:	e708      	b.n	8000f52 <__udivmoddi4+0xda>
 8001140:	4637      	mov	r7, r6
 8001142:	e6e9      	b.n	8000f18 <__udivmoddi4+0xa0>

08001144 <__aeabi_idiv0>:
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800114c:	b0c8      	sub	sp, #288	; 0x120
 800114e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f001 ffda 	bl	8003108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f001 fa72 	bl	800263c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f001 fc1c 	bl	8002994 <MX_GPIO_Init>
  MX_DMA_Init();
 800115c:	f001 fbfa 	bl	8002954 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001160:	f001 fbce 	bl	8002900 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001164:	f001 fad2 	bl	800270c <MX_ADC1_Init>
  MX_SPI3_Init();
 8001168:	f001 fb22 	bl	80027b0 <MX_SPI3_Init>
  MX_TIM3_Init();
 800116c:	f001 fb58 	bl	8002820 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001170:	f001 fba2 	bl	80028b8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8001174:	48c2      	ldr	r0, [pc, #776]	; (8001480 <main+0x338>)
 8001176:	f004 fbae 	bl	80058d6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 800117a:	48c2      	ldr	r0, [pc, #776]	; (8001484 <main+0x33c>)
 800117c:	f004 fbcf 	bl	800591e <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	49c1      	ldr	r1, [pc, #772]	; (8001488 <main+0x340>)
 8001184:	48c1      	ldr	r0, [pc, #772]	; (800148c <main+0x344>)
 8001186:	f002 f9b5 	bl	80034f4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	48bf      	ldr	r0, [pc, #764]	; (8001490 <main+0x348>)
 8001192:	f003 fba1 	bl	80048d8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
//		UARTRecieveAndResponsePolling();
		int16_t inputchar = UARTRecieveIT();
 8001196:	f001 fc99 	bl	8002acc <UARTRecieveIT>
 800119a:	4603      	mov	r3, r0
 800119c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
		HAL_UART_Receive_IT(&huart2, (uint8_t*) RxDataBuffer, 32);
 80011a0:	2220      	movs	r2, #32
 80011a2:	49bc      	ldr	r1, [pc, #752]	; (8001494 <main+0x34c>)
 80011a4:	48bc      	ldr	r0, [pc, #752]	; (8001498 <main+0x350>)
 80011a6:	f005 f847 	bl	8006238 <HAL_UART_Receive_IT>
		if (inputchar != -1)
 80011aa:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b2:	d00a      	beq.n	80011ca <main+0x82>
		{
			//sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
					strlen(TxDataBuffer), 1000);
 80011b4:	48b9      	ldr	r0, [pc, #740]	; (800149c <main+0x354>)
 80011b6:	f7ff f813 	bl	80001e0 <strlen>
 80011ba:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	49b6      	ldr	r1, [pc, #728]	; (800149c <main+0x354>)
 80011c4:	48b4      	ldr	r0, [pc, #720]	; (8001498 <main+0x350>)
 80011c6:	f004 ff9e 	bl	8006106 <HAL_UART_Transmit>
		}

		switch (STATE_Display)
 80011ca:	4bb5      	ldr	r3, [pc, #724]	; (80014a0 <main+0x358>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b29      	cmp	r3, #41	; 0x29
 80011d0:	f200 8696 	bhi.w	8001f00 <main+0xdb8>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <main+0x94>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	08001285 	.word	0x08001285
 80011e0:	08001f01 	.word	0x08001f01
 80011e4:	08001f01 	.word	0x08001f01
 80011e8:	08001f01 	.word	0x08001f01
 80011ec:	08001f01 	.word	0x08001f01
 80011f0:	08001f01 	.word	0x08001f01
 80011f4:	08001f01 	.word	0x08001f01
 80011f8:	08001f01 	.word	0x08001f01
 80011fc:	08001f01 	.word	0x08001f01
 8001200:	08001f01 	.word	0x08001f01
 8001204:	0800128f 	.word	0x0800128f
 8001208:	080012c3 	.word	0x080012c3
 800120c:	08001f01 	.word	0x08001f01
 8001210:	08001f01 	.word	0x08001f01
 8001214:	08001f01 	.word	0x08001f01
 8001218:	08001f01 	.word	0x08001f01
 800121c:	08001f01 	.word	0x08001f01
 8001220:	08001f01 	.word	0x08001f01
 8001224:	08001f01 	.word	0x08001f01
 8001228:	08001f01 	.word	0x08001f01
 800122c:	08001307 	.word	0x08001307
 8001230:	080013df 	.word	0x080013df
 8001234:	08001f01 	.word	0x08001f01
 8001238:	08001f01 	.word	0x08001f01
 800123c:	08001f01 	.word	0x08001f01
 8001240:	08001f01 	.word	0x08001f01
 8001244:	08001f01 	.word	0x08001f01
 8001248:	08001f01 	.word	0x08001f01
 800124c:	08001f01 	.word	0x08001f01
 8001250:	08001f01 	.word	0x08001f01
 8001254:	08001715 	.word	0x08001715
 8001258:	080017eb 	.word	0x080017eb
 800125c:	08001f01 	.word	0x08001f01
 8001260:	08001f01 	.word	0x08001f01
 8001264:	08001f01 	.word	0x08001f01
 8001268:	08001f01 	.word	0x08001f01
 800126c:	08001f01 	.word	0x08001f01
 8001270:	08001f01 	.word	0x08001f01
 8001274:	08001f01 	.word	0x08001f01
 8001278:	08001f01 	.word	0x08001f01
 800127c:	08001ab3 	.word	0x08001ab3
 8001280:	08001bb9 	.word	0x08001bb9
		{
		case State_Start:
			STATE_Display = State_Menu_Print;
 8001284:	4b86      	ldr	r3, [pc, #536]	; (80014a0 <main+0x358>)
 8001286:	220a      	movs	r2, #10
 8001288:	601a      	str	r2, [r3, #0]
			break;
 800128a:	f000 be39 	b.w	8001f00 <main+0xdb8>

		case State_Menu_Print: //display one time state
		{
			char temp[] = "|Menu|\r\n"
 800128e:	463b      	mov	r3, r7
 8001290:	4a84      	ldr	r2, [pc, #528]	; (80014a4 <main+0x35c>)
 8001292:	4618      	mov	r0, r3
 8001294:	4611      	mov	r1, r2
 8001296:	2377      	movs	r3, #119	; 0x77
 8001298:	461a      	mov	r2, r3
 800129a:	f005 fe49 	bl	8006f30 <memcpy>
					"1.[1] Menu 1 (Sawtooth)\r\n"
					"2.[2] Menu 2 (Sine wave)\r\n"
					"3.[3] Menu 3 (Square wave)\r\n"
					"-----------------------------\r\n";
			HAL_UART_Transmit(&huart2, (uint16_t*) temp, strlen(temp), 1000);
 800129e:	463b      	mov	r3, r7
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ff9d 	bl	80001e0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4639      	mov	r1, r7
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	4879      	ldr	r0, [pc, #484]	; (8001498 <main+0x350>)
 80012b2:	f004 ff28 	bl	8006106 <HAL_UART_Transmit>
			STATE_Display = State_Menu_WaitInput;
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <main+0x358>)
 80012b8:	220b      	movs	r2, #11
 80012ba:	601a      	str	r2, [r3, #0]
			break;
 80012bc:	bf00      	nop
 80012be:	f000 be1f 	b.w	8001f00 <main+0xdb8>
		}

		case State_Menu_WaitInput: //wait state for input
			switch (inputchar)
 80012c2:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 80012c6:	2b31      	cmp	r3, #49	; 0x31
 80012c8:	d00a      	beq.n	80012e0 <main+0x198>
 80012ca:	2b31      	cmp	r3, #49	; 0x31
 80012cc:	dc03      	bgt.n	80012d6 <main+0x18e>
 80012ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d2:	d015      	beq.n	8001300 <main+0x1b8>
 80012d4:	e010      	b.n	80012f8 <main+0x1b0>
 80012d6:	2b32      	cmp	r3, #50	; 0x32
 80012d8:	d006      	beq.n	80012e8 <main+0x1a0>
 80012da:	2b33      	cmp	r3, #51	; 0x33
 80012dc:	d008      	beq.n	80012f0 <main+0x1a8>
 80012de:	e00b      	b.n	80012f8 <main+0x1b0>
			{
			case -1:
				//no input ; just wait input
				break;
			case '1':
				STATE_Display = State_Menu1_Print;
 80012e0:	4b6f      	ldr	r3, [pc, #444]	; (80014a0 <main+0x358>)
 80012e2:	2214      	movs	r2, #20
 80012e4:	601a      	str	r2, [r3, #0]
				break;
 80012e6:	e00c      	b.n	8001302 <main+0x1ba>
			case '2':
				STATE_Display = State_Menu2_Print;
 80012e8:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <main+0x358>)
 80012ea:	221e      	movs	r2, #30
 80012ec:	601a      	str	r2, [r3, #0]
				break;
 80012ee:	e008      	b.n	8001302 <main+0x1ba>
			case '3':
				STATE_Display = State_Menu3_Print;
 80012f0:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <main+0x358>)
 80012f2:	2228      	movs	r2, #40	; 0x28
 80012f4:	601a      	str	r2, [r3, #0]
				break;
 80012f6:	e004      	b.n	8001302 <main+0x1ba>
			default: // actully error , you can add error message
			{
				STATE_Display = State_Menu_Print;
 80012f8:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <main+0x358>)
 80012fa:	220a      	movs	r2, #10
 80012fc:	601a      	str	r2, [r3, #0]
				break;
 80012fe:	e000      	b.n	8001302 <main+0x1ba>
				break;
 8001300:	bf00      	nop
			}
			}
			break;
 8001302:	f000 bdfd 	b.w	8001f00 <main+0xdb8>

		case State_Menu1_Print: //display one time state
		{
			char temp[] = "|Menu1|\r\n"
 8001306:	463b      	mov	r3, r7
 8001308:	4a67      	ldr	r2, [pc, #412]	; (80014a8 <main+0x360>)
 800130a:	4618      	mov	r0, r3
 800130c:	4611      	mov	r1, r2
 800130e:	23d2      	movs	r3, #210	; 0xd2
 8001310:	461a      	mov	r2, r3
 8001312:	f005 fe0d 	bl	8006f30 <memcpy>
					"5.[e] + Vmin (+0.1)\r\n"
					"6.[r] - Vmin (-0.1)\r\n"
					"7.[d] Up/Down Slope\r\n"
					"8.[x] Back\r\n"
					"-----------------------------\r\n";
			int f10 = 0, max = 0, min = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			f10 = f * 10;
 8001328:	4b60      	ldr	r3, [pc, #384]	; (80014ac <main+0x364>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133a:	ee17 3a90 	vmov	r3, s15
 800133e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
			max = Vmax * 1000.0;
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <main+0x368>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f906 	bl	8000558 <__aeabi_f2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <main+0x36c>)
 8001352:	f7ff f959 	bl	8000608 <__aeabi_dmul>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	4618      	mov	r0, r3
 800135c:	4621      	mov	r1, r4
 800135e:	f7ff fbed 	bl	8000b3c <__aeabi_d2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			min = Vmin * 1000.0;
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <main+0x370>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8f3 	bl	8000558 <__aeabi_f2d>
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <main+0x36c>)
 8001378:	f7ff f946 	bl	8000608 <__aeabi_dmul>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	4618      	mov	r0, r3
 8001382:	4621      	mov	r1, r4
 8001384:	f7ff fbda 	bl	8000b3c <__aeabi_d2iz>
 8001388:	4603      	mov	r3, r0
 800138a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			sprintf(s,
 800138e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001398:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800139c:	4947      	ldr	r1, [pc, #284]	; (80014bc <main+0x374>)
 800139e:	4848      	ldr	r0, [pc, #288]	; (80014c0 <main+0x378>)
 80013a0:	f005 fdda 	bl	8006f58 <siprintf>
					"Now frequency*10:[%d] Hz\r\nNow Vmax:[%d] mV\r\nNow Vmin:[%d] mV\r\n-----------------------------\r\n",
					f10, max, min);
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80013a4:	463b      	mov	r3, r7
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff1a 	bl	80001e0 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4639      	mov	r1, r7
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	4838      	ldr	r0, [pc, #224]	; (8001498 <main+0x350>)
 80013b8:	f004 fea5 	bl	8006106 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 80013bc:	4840      	ldr	r0, [pc, #256]	; (80014c0 <main+0x378>)
 80013be:	f7fe ff0f 	bl	80001e0 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	493d      	ldr	r1, [pc, #244]	; (80014c0 <main+0x378>)
 80013cc:	4832      	ldr	r0, [pc, #200]	; (8001498 <main+0x350>)
 80013ce:	f004 fe9a 	bl	8006106 <HAL_UART_Transmit>
			STATE_Display = State_Menu1_WaitInput;
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <main+0x358>)
 80013d4:	2215      	movs	r2, #21
 80013d6:	601a      	str	r2, [r3, #0]
			break;
 80013d8:	bf00      	nop
 80013da:	f000 bd91 	b.w	8001f00 <main+0xdb8>
		}

		case State_Menu1_WaitInput:
			switch (inputchar)
 80013de:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 80013e2:	2b71      	cmp	r3, #113	; 0x71
 80013e4:	f000 80a5 	beq.w	8001532 <main+0x3ea>
 80013e8:	2b71      	cmp	r3, #113	; 0x71
 80013ea:	dc0f      	bgt.n	800140c <main+0x2c4>
 80013ec:	2b61      	cmp	r3, #97	; 0x61
 80013ee:	d01c      	beq.n	800142a <main+0x2e2>
 80013f0:	2b61      	cmp	r3, #97	; 0x61
 80013f2:	dc04      	bgt.n	80013fe <main+0x2b6>
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f8:	f000 8171 	beq.w	80016de <main+0x596>
 80013fc:	e16b      	b.n	80016d6 <main+0x58e>
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	f000 8084 	beq.w	800150c <main+0x3c4>
 8001404:	2b65      	cmp	r3, #101	; 0x65
 8001406:	f000 80ff 	beq.w	8001608 <main+0x4c0>
 800140a:	e164      	b.n	80016d6 <main+0x58e>
 800140c:	2b73      	cmp	r3, #115	; 0x73
 800140e:	d05b      	beq.n	80014c8 <main+0x380>
 8001410:	2b73      	cmp	r3, #115	; 0x73
 8001412:	f2c0 813d 	blt.w	8001690 <main+0x548>
 8001416:	2b77      	cmp	r3, #119	; 0x77
 8001418:	f000 80b2 	beq.w	8001580 <main+0x438>
 800141c:	2b78      	cmp	r3, #120	; 0x78
 800141e:	f040 815a 	bne.w	80016d6 <main+0x58e>
			{
			case 'x': // back to main manu(10)
				STATE_Display = State_Menu_Print;
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <main+0x358>)
 8001424:	220a      	movs	r2, #10
 8001426:	601a      	str	r2, [r3, #0]
				break;
 8001428:	e15a      	b.n	80016e0 <main+0x598>
			case -1:
				//no input ; just wait input
				break;
			case 'a':
			{
				f += 0.1;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <main+0x364>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f892 	bl	8000558 <__aeabi_f2d>
 8001434:	a310      	add	r3, pc, #64	; (adr r3, 8001478 <main+0x330>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7fe ff2f 	bl	800029c <__adddf3>
 800143e:	4603      	mov	r3, r0
 8001440:	460c      	mov	r4, r1
 8001442:	4618      	mov	r0, r3
 8001444:	4621      	mov	r1, r4
 8001446:	f7ff fba1 	bl	8000b8c <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <main+0x364>)
 800144e:	601a      	str	r2, [r3, #0]
				if (f >= 10)
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <main+0x364>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	db02      	blt.n	800146a <main+0x322>
				{
					f = 10;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <main+0x364>)
 8001466:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <main+0x37c>)
 8001468:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu1_Print;
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <main+0x358>)
 800146c:	2214      	movs	r2, #20
 800146e:	601a      	str	r2, [r3, #0]
				break;
 8001470:	e136      	b.n	80016e0 <main+0x598>
 8001472:	bf00      	nop
 8001474:	f3af 8000 	nop.w
 8001478:	9999999a 	.word	0x9999999a
 800147c:	3fb99999 	.word	0x3fb99999
 8001480:	200001dc 	.word	0x200001dc
 8001484:	200002bc 	.word	0x200002bc
 8001488:	2000009c 	.word	0x2000009c
 800148c:	20000274 	.word	0x20000274
 8001490:	40020000 	.word	0x40020000
 8001494:	200000d8 	.word	0x200000d8
 8001498:	2000035c 	.word	0x2000035c
 800149c:	200000b8 	.word	0x200000b8
 80014a0:	200001c0 	.word	0x200001c0
 80014a4:	080082d8 	.word	0x080082d8
 80014a8:	08008350 	.word	0x08008350
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000004 	.word	0x20000004
 80014b4:	408f4000 	.word	0x408f4000
 80014b8:	200000b0 	.word	0x200000b0
 80014bc:	08008200 	.word	0x08008200
 80014c0:	200000f8 	.word	0x200000f8
 80014c4:	41200000 	.word	0x41200000
			}
			case 's':
			{
				f -= 0.1;
 80014c8:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <main+0x5b0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f843 	bl	8000558 <__aeabi_f2d>
 80014d2:	a385      	add	r3, pc, #532	; (adr r3, 80016e8 <main+0x5a0>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7fe fede 	bl	8000298 <__aeabi_dsub>
 80014dc:	4603      	mov	r3, r0
 80014de:	460c      	mov	r4, r1
 80014e0:	4618      	mov	r0, r3
 80014e2:	4621      	mov	r1, r4
 80014e4:	f7ff fb52 	bl	8000b8c <__aeabi_d2f>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b83      	ldr	r3, [pc, #524]	; (80016f8 <main+0x5b0>)
 80014ec:	601a      	str	r2, [r3, #0]
				if (f <= 0)
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <main+0x5b0>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d802      	bhi.n	8001504 <main+0x3bc>
				{
					f = 0.1;
 80014fe:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <main+0x5b0>)
 8001500:	4a7e      	ldr	r2, [pc, #504]	; (80016fc <main+0x5b4>)
 8001502:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu1_Print;
 8001504:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <main+0x5b8>)
 8001506:	2214      	movs	r2, #20
 8001508:	601a      	str	r2, [r3, #0]
				break;
 800150a:	e0e9      	b.n	80016e0 <main+0x598>
			}
			case 'd':
				STATE_Display = State_Menu1_Print;
 800150c:	4b7c      	ldr	r3, [pc, #496]	; (8001700 <main+0x5b8>)
 800150e:	2214      	movs	r2, #20
 8001510:	601a      	str	r2, [r3, #0]
				if (flip == 1)
 8001512:	4b7c      	ldr	r3, [pc, #496]	; (8001704 <main+0x5bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d103      	bne.n	8001522 <main+0x3da>
				{
					flip = 0;
 800151a:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <main+0x5bc>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
					break;
 8001520:	e0de      	b.n	80016e0 <main+0x598>
				}
				if (flip == 0)
 8001522:	4b78      	ldr	r3, [pc, #480]	; (8001704 <main+0x5bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <main+0x3ea>
				{
					flip = 1;
 800152a:	4b76      	ldr	r3, [pc, #472]	; (8001704 <main+0x5bc>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
					break;
 8001530:	e0d6      	b.n	80016e0 <main+0x598>
				}
			case 'q':
			{
				Vmax += 0.1;
 8001532:	4b75      	ldr	r3, [pc, #468]	; (8001708 <main+0x5c0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f80e 	bl	8000558 <__aeabi_f2d>
 800153c:	a36a      	add	r3, pc, #424	; (adr r3, 80016e8 <main+0x5a0>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7fe feab 	bl	800029c <__adddf3>
 8001546:	4603      	mov	r3, r0
 8001548:	460c      	mov	r4, r1
 800154a:	4618      	mov	r0, r3
 800154c:	4621      	mov	r1, r4
 800154e:	f7ff fb1d 	bl	8000b8c <__aeabi_d2f>
 8001552:	4602      	mov	r2, r0
 8001554:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <main+0x5c0>)
 8001556:	601a      	str	r2, [r3, #0]
				if (Vmax >= 3.3)
 8001558:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <main+0x5c0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fffb 	bl	8000558 <__aeabi_f2d>
 8001562:	a363      	add	r3, pc, #396	; (adr r3, 80016f0 <main+0x5a8>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff fad4 	bl	8000b14 <__aeabi_dcmpge>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <main+0x430>
				{
					Vmax = 3.3;
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <main+0x5c0>)
 8001574:	4a65      	ldr	r2, [pc, #404]	; (800170c <main+0x5c4>)
 8001576:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu1_Print;
 8001578:	4b61      	ldr	r3, [pc, #388]	; (8001700 <main+0x5b8>)
 800157a:	2214      	movs	r2, #20
 800157c:	601a      	str	r2, [r3, #0]
				break;
 800157e:	e0af      	b.n	80016e0 <main+0x598>
			}
			case 'w':
			{
				Vmax -= 0.1;
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <main+0x5c0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffe7 	bl	8000558 <__aeabi_f2d>
 800158a:	a357      	add	r3, pc, #348	; (adr r3, 80016e8 <main+0x5a0>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7fe fe82 	bl	8000298 <__aeabi_dsub>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4618      	mov	r0, r3
 800159a:	4621      	mov	r1, r4
 800159c:	f7ff faf6 	bl	8000b8c <__aeabi_d2f>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b59      	ldr	r3, [pc, #356]	; (8001708 <main+0x5c0>)
 80015a4:	601a      	str	r2, [r3, #0]
				if (Vmax <= Vmin + 0.1)
 80015a6:	4b58      	ldr	r3, [pc, #352]	; (8001708 <main+0x5c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffd4 	bl	8000558 <__aeabi_f2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <main+0x5c8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffcd 	bl	8000558 <__aeabi_f2d>
 80015be:	a34a      	add	r3, pc, #296	; (adr r3, 80016e8 <main+0x5a0>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe fe6a 	bl	800029c <__adddf3>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7ff fa96 	bl	8000b00 <__aeabi_dcmple>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <main+0x4b8>
				{
					Vmax = Vmin + 0.1;
 80015da:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <main+0x5c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffba 	bl	8000558 <__aeabi_f2d>
 80015e4:	a340      	add	r3, pc, #256	; (adr r3, 80016e8 <main+0x5a0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7fe fe57 	bl	800029c <__adddf3>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	4618      	mov	r0, r3
 80015f4:	4621      	mov	r1, r4
 80015f6:	f7ff fac9 	bl	8000b8c <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <main+0x5c0>)
 80015fe:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu1_Print;
 8001600:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <main+0x5b8>)
 8001602:	2214      	movs	r2, #20
 8001604:	601a      	str	r2, [r3, #0]
				break;
 8001606:	e06b      	b.n	80016e0 <main+0x598>
			}
			case 'e':
			{
				Vmin += 0.1;
 8001608:	4b41      	ldr	r3, [pc, #260]	; (8001710 <main+0x5c8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ffa3 	bl	8000558 <__aeabi_f2d>
 8001612:	a335      	add	r3, pc, #212	; (adr r3, 80016e8 <main+0x5a0>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7fe fe40 	bl	800029c <__adddf3>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	4618      	mov	r0, r3
 8001622:	4621      	mov	r1, r4
 8001624:	f7ff fab2 	bl	8000b8c <__aeabi_d2f>
 8001628:	4602      	mov	r2, r0
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <main+0x5c8>)
 800162c:	601a      	str	r2, [r3, #0]
				if (Vmin >= Vmax - 0.1)
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <main+0x5c8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff90 	bl	8000558 <__aeabi_f2d>
 8001638:	4604      	mov	r4, r0
 800163a:	460d      	mov	r5, r1
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <main+0x5c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff89 	bl	8000558 <__aeabi_f2d>
 8001646:	a328      	add	r3, pc, #160	; (adr r3, 80016e8 <main+0x5a0>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fe24 	bl	8000298 <__aeabi_dsub>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7ff fa5c 	bl	8000b14 <__aeabi_dcmpge>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d012      	beq.n	8001688 <main+0x540>
				{
					Vmin = Vmax - 0.1;
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <main+0x5c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff76 	bl	8000558 <__aeabi_f2d>
 800166c:	a31e      	add	r3, pc, #120	; (adr r3, 80016e8 <main+0x5a0>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe fe11 	bl	8000298 <__aeabi_dsub>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4618      	mov	r0, r3
 800167c:	4621      	mov	r1, r4
 800167e:	f7ff fa85 	bl	8000b8c <__aeabi_d2f>
 8001682:	4602      	mov	r2, r0
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <main+0x5c8>)
 8001686:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu1_Print;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <main+0x5b8>)
 800168a:	2214      	movs	r2, #20
 800168c:	601a      	str	r2, [r3, #0]
				break;
 800168e:	e027      	b.n	80016e0 <main+0x598>
			}
			case 'r':
			{
				Vmin -= 0.1;
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <main+0x5c8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff5f 	bl	8000558 <__aeabi_f2d>
 800169a:	a313      	add	r3, pc, #76	; (adr r3, 80016e8 <main+0x5a0>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe fdfa 	bl	8000298 <__aeabi_dsub>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	4618      	mov	r0, r3
 80016aa:	4621      	mov	r1, r4
 80016ac:	f7ff fa6e 	bl	8000b8c <__aeabi_d2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <main+0x5c8>)
 80016b4:	601a      	str	r2, [r3, #0]
				if (Vmin <= 0)
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <main+0x5c8>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d803      	bhi.n	80016ce <main+0x586>
				{
					Vmin = 0;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <main+0x5c8>)
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu1_Print;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <main+0x5b8>)
 80016d0:	2214      	movs	r2, #20
 80016d2:	601a      	str	r2, [r3, #0]
				break;
 80016d4:	e004      	b.n	80016e0 <main+0x598>
			}
			default: // actully error , you can add error message
			{
				STATE_Display = State_Menu1_Print;
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <main+0x5b8>)
 80016d8:	2214      	movs	r2, #20
 80016da:	601a      	str	r2, [r3, #0]
				break;
 80016dc:	e000      	b.n	80016e0 <main+0x598>
				break;
 80016de:	bf00      	nop
			}
			}

			break;
 80016e0:	f000 bc0e 	b.w	8001f00 <main+0xdb8>
 80016e4:	f3af 8000 	nop.w
 80016e8:	9999999a 	.word	0x9999999a
 80016ec:	3fb99999 	.word	0x3fb99999
 80016f0:	66666666 	.word	0x66666666
 80016f4:	400a6666 	.word	0x400a6666
 80016f8:	20000008 	.word	0x20000008
 80016fc:	3dcccccd 	.word	0x3dcccccd
 8001700:	200001c0 	.word	0x200001c0
 8001704:	200000b4 	.word	0x200000b4
 8001708:	20000004 	.word	0x20000004
 800170c:	40533333 	.word	0x40533333
 8001710:	200000b0 	.word	0x200000b0

		case State_Menu2_Print: //display state
		{
			char temp[] = "|Menu2|\r\n"
 8001714:	463b      	mov	r3, r7
 8001716:	4aa4      	ldr	r2, [pc, #656]	; (80019a8 <main+0x860>)
 8001718:	4618      	mov	r0, r3
 800171a:	4611      	mov	r1, r2
 800171c:	23bd      	movs	r3, #189	; 0xbd
 800171e:	461a      	mov	r2, r3
 8001720:	f005 fc06 	bl	8006f30 <memcpy>
					"4.[w] - Vmax (-0.1)\r\n"
					"5.[e] + Vmin (+0.1)\r\n"
					"6.[r] - Vmin (-0.1)\r\n"
					"7.[x] Back\r\n"
					"-----------------------------\r\n";
			int f10 = 0, max = 0, min = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			f10 = f * 10;
 8001736:	4b9d      	ldr	r3, [pc, #628]	; (80019ac <main+0x864>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001748:	ee17 3a90 	vmov	r3, s15
 800174c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			max = Vmax * 1000.0;
 8001750:	4b97      	ldr	r3, [pc, #604]	; (80019b0 <main+0x868>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe feff 	bl	8000558 <__aeabi_f2d>
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4b95      	ldr	r3, [pc, #596]	; (80019b4 <main+0x86c>)
 8001760:	f7fe ff52 	bl	8000608 <__aeabi_dmul>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4618      	mov	r0, r3
 800176a:	4621      	mov	r1, r4
 800176c:	f7ff f9e6 	bl	8000b3c <__aeabi_d2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			min = Vmin * 1000.0;
 8001776:	4b90      	ldr	r3, [pc, #576]	; (80019b8 <main+0x870>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe feec 	bl	8000558 <__aeabi_f2d>
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <main+0x86c>)
 8001786:	f7fe ff3f 	bl	8000608 <__aeabi_dmul>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff f9d3 	bl	8000b3c <__aeabi_d2iz>
 8001796:	4603      	mov	r3, r0
 8001798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			sprintf(s,
 800179c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017a6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80017aa:	4984      	ldr	r1, [pc, #528]	; (80019bc <main+0x874>)
 80017ac:	4884      	ldr	r0, [pc, #528]	; (80019c0 <main+0x878>)
 80017ae:	f005 fbd3 	bl	8006f58 <siprintf>
					"Now frequency*10:[%d] Hz\r\nNow Vmax:[%d] mV\r\nNow Vmin:[%d] mV\r\n-----------------------------\r\n",
					f10, max, min);
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80017b2:	463b      	mov	r3, r7
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fd13 	bl	80001e0 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4639      	mov	r1, r7
 80017c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c4:	487f      	ldr	r0, [pc, #508]	; (80019c4 <main+0x87c>)
 80017c6:	f004 fc9e 	bl	8006106 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 80017ca:	487d      	ldr	r0, [pc, #500]	; (80019c0 <main+0x878>)
 80017cc:	f7fe fd08 	bl	80001e0 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d8:	4979      	ldr	r1, [pc, #484]	; (80019c0 <main+0x878>)
 80017da:	487a      	ldr	r0, [pc, #488]	; (80019c4 <main+0x87c>)
 80017dc:	f004 fc93 	bl	8006106 <HAL_UART_Transmit>
			STATE_Display = State_Menu2_WaitInput;
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <main+0x880>)
 80017e2:	221f      	movs	r2, #31
 80017e4:	601a      	str	r2, [r3, #0]
			break;
 80017e6:	bf00      	nop
 80017e8:	e38a      	b.n	8001f00 <main+0xdb8>
		}

		case State_Menu2_WaitInput: //make decision state
			switch (inputchar)
 80017ea:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 80017ee:	2b71      	cmp	r3, #113	; 0x71
 80017f0:	d064      	beq.n	80018bc <main+0x774>
 80017f2:	2b71      	cmp	r3, #113	; 0x71
 80017f4:	dc09      	bgt.n	800180a <main+0x6c2>
 80017f6:	2b61      	cmp	r3, #97	; 0x61
 80017f8:	d015      	beq.n	8001826 <main+0x6de>
 80017fa:	2b65      	cmp	r3, #101	; 0x65
 80017fc:	f000 80ec 	beq.w	80019d8 <main+0x890>
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	f000 8153 	beq.w	8001aae <main+0x966>
 8001808:	e14d      	b.n	8001aa6 <main+0x95e>
 800180a:	2b73      	cmp	r3, #115	; 0x73
 800180c:	d02f      	beq.n	800186e <main+0x726>
 800180e:	2b73      	cmp	r3, #115	; 0x73
 8001810:	f2c0 8126 	blt.w	8001a60 <main+0x918>
 8001814:	2b77      	cmp	r3, #119	; 0x77
 8001816:	d078      	beq.n	800190a <main+0x7c2>
 8001818:	2b78      	cmp	r3, #120	; 0x78
 800181a:	f040 8144 	bne.w	8001aa6 <main+0x95e>
			{
			case 'x':
				STATE_Display = State_Menu_Print;
 800181e:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <main+0x880>)
 8001820:	220a      	movs	r2, #10
 8001822:	601a      	str	r2, [r3, #0]
				break;
 8001824:	e144      	b.n	8001ab0 <main+0x968>
			case -1:
				break;
			case 'a':
			{
				f += 0.1;
 8001826:	4b61      	ldr	r3, [pc, #388]	; (80019ac <main+0x864>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe94 	bl	8000558 <__aeabi_f2d>
 8001830:	a359      	add	r3, pc, #356	; (adr r3, 8001998 <main+0x850>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fd31 	bl	800029c <__adddf3>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	4618      	mov	r0, r3
 8001840:	4621      	mov	r1, r4
 8001842:	f7ff f9a3 	bl	8000b8c <__aeabi_d2f>
 8001846:	4602      	mov	r2, r0
 8001848:	4b58      	ldr	r3, [pc, #352]	; (80019ac <main+0x864>)
 800184a:	601a      	str	r2, [r3, #0]
				if (f >= 10)
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <main+0x864>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	db02      	blt.n	8001866 <main+0x71e>
				{
					f = 10;
 8001860:	4b52      	ldr	r3, [pc, #328]	; (80019ac <main+0x864>)
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <main+0x884>)
 8001864:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu2_Print;
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <main+0x880>)
 8001868:	221e      	movs	r2, #30
 800186a:	601a      	str	r2, [r3, #0]
				break;
 800186c:	e120      	b.n	8001ab0 <main+0x968>
			}
			case 's':
			{
				f -= 0.1;
 800186e:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <main+0x864>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe70 	bl	8000558 <__aeabi_f2d>
 8001878:	a347      	add	r3, pc, #284	; (adr r3, 8001998 <main+0x850>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fd0b 	bl	8000298 <__aeabi_dsub>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	4618      	mov	r0, r3
 8001888:	4621      	mov	r1, r4
 800188a:	f7ff f97f 	bl	8000b8c <__aeabi_d2f>
 800188e:	4602      	mov	r2, r0
 8001890:	4b46      	ldr	r3, [pc, #280]	; (80019ac <main+0x864>)
 8001892:	601a      	str	r2, [r3, #0]
				if (f <= 0.1)
 8001894:	4b45      	ldr	r3, [pc, #276]	; (80019ac <main+0x864>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe5d 	bl	8000558 <__aeabi_f2d>
 800189e:	a33e      	add	r3, pc, #248	; (adr r3, 8001998 <main+0x850>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7ff f92c 	bl	8000b00 <__aeabi_dcmple>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <main+0x76c>
				{
					f = 0.1;
 80018ae:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <main+0x864>)
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <main+0x888>)
 80018b2:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu2_Print;
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <main+0x880>)
 80018b6:	221e      	movs	r2, #30
 80018b8:	601a      	str	r2, [r3, #0]
				break;
 80018ba:	e0f9      	b.n	8001ab0 <main+0x968>
			}
			case 'q':
			{
				Vmax += 0.1;
 80018bc:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <main+0x868>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe49 	bl	8000558 <__aeabi_f2d>
 80018c6:	a334      	add	r3, pc, #208	; (adr r3, 8001998 <main+0x850>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe fce6 	bl	800029c <__adddf3>
 80018d0:	4603      	mov	r3, r0
 80018d2:	460c      	mov	r4, r1
 80018d4:	4618      	mov	r0, r3
 80018d6:	4621      	mov	r1, r4
 80018d8:	f7ff f958 	bl	8000b8c <__aeabi_d2f>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <main+0x868>)
 80018e0:	601a      	str	r2, [r3, #0]
				if (Vmax >= 3.3)
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <main+0x868>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe36 	bl	8000558 <__aeabi_f2d>
 80018ec:	a32c      	add	r3, pc, #176	; (adr r3, 80019a0 <main+0x858>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7ff f90f 	bl	8000b14 <__aeabi_dcmpge>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <main+0x7ba>
				{
					Vmax = 3.3;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <main+0x868>)
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <main+0x88c>)
 8001900:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu2_Print;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <main+0x880>)
 8001904:	221e      	movs	r2, #30
 8001906:	601a      	str	r2, [r3, #0]
				break;
 8001908:	e0d2      	b.n	8001ab0 <main+0x968>
			}
			case 'w':
			{
				Vmax -= 0.1;
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <main+0x868>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe22 	bl	8000558 <__aeabi_f2d>
 8001914:	a320      	add	r3, pc, #128	; (adr r3, 8001998 <main+0x850>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fcbd 	bl	8000298 <__aeabi_dsub>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	4618      	mov	r0, r3
 8001924:	4621      	mov	r1, r4
 8001926:	f7ff f931 	bl	8000b8c <__aeabi_d2f>
 800192a:	4602      	mov	r2, r0
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <main+0x868>)
 800192e:	601a      	str	r2, [r3, #0]
				if (Vmax <= Vmin + 0.1)
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <main+0x868>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe0f 	bl	8000558 <__aeabi_f2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <main+0x870>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe08 	bl	8000558 <__aeabi_f2d>
 8001948:	a313      	add	r3, pc, #76	; (adr r3, 8001998 <main+0x850>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fca5 	bl	800029c <__adddf3>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4620      	mov	r0, r4
 8001958:	4629      	mov	r1, r5
 800195a:	f7ff f8d1 	bl	8000b00 <__aeabi_dcmple>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d012      	beq.n	800198a <main+0x842>
				{
					Vmax = Vmin + 0.1;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <main+0x870>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdf5 	bl	8000558 <__aeabi_f2d>
 800196e:	a30a      	add	r3, pc, #40	; (adr r3, 8001998 <main+0x850>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fc92 	bl	800029c <__adddf3>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	f7ff f904 	bl	8000b8c <__aeabi_d2f>
 8001984:	4602      	mov	r2, r0
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <main+0x868>)
 8001988:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu2_Print;
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <main+0x880>)
 800198c:	221e      	movs	r2, #30
 800198e:	601a      	str	r2, [r3, #0]
				break;
 8001990:	e08e      	b.n	8001ab0 <main+0x968>
 8001992:	bf00      	nop
 8001994:	f3af 8000 	nop.w
 8001998:	9999999a 	.word	0x9999999a
 800199c:	3fb99999 	.word	0x3fb99999
 80019a0:	66666666 	.word	0x66666666
 80019a4:	400a6666 	.word	0x400a6666
 80019a8:	08008424 	.word	0x08008424
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000004 	.word	0x20000004
 80019b4:	408f4000 	.word	0x408f4000
 80019b8:	200000b0 	.word	0x200000b0
 80019bc:	08008200 	.word	0x08008200
 80019c0:	200000f8 	.word	0x200000f8
 80019c4:	2000035c 	.word	0x2000035c
 80019c8:	200001c0 	.word	0x200001c0
 80019cc:	41200000 	.word	0x41200000
 80019d0:	3dcccccd 	.word	0x3dcccccd
 80019d4:	40533333 	.word	0x40533333
			}
			case 'e':
			{
				Vmin += 0.1;
 80019d8:	4bb5      	ldr	r3, [pc, #724]	; (8001cb0 <main+0xb68>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdbb 	bl	8000558 <__aeabi_f2d>
 80019e2:	a3b1      	add	r3, pc, #708	; (adr r3, 8001ca8 <main+0xb60>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fc58 	bl	800029c <__adddf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	f7ff f8ca 	bl	8000b8c <__aeabi_d2f>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4bad      	ldr	r3, [pc, #692]	; (8001cb0 <main+0xb68>)
 80019fc:	601a      	str	r2, [r3, #0]
				if (Vmin >= Vmax - 0.1)
 80019fe:	4bac      	ldr	r3, [pc, #688]	; (8001cb0 <main+0xb68>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fda8 	bl	8000558 <__aeabi_f2d>
 8001a08:	4604      	mov	r4, r0
 8001a0a:	460d      	mov	r5, r1
 8001a0c:	4ba9      	ldr	r3, [pc, #676]	; (8001cb4 <main+0xb6c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fda1 	bl	8000558 <__aeabi_f2d>
 8001a16:	a3a4      	add	r3, pc, #656	; (adr r3, 8001ca8 <main+0xb60>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fc3c 	bl	8000298 <__aeabi_dsub>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7ff f874 	bl	8000b14 <__aeabi_dcmpge>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d012      	beq.n	8001a58 <main+0x910>
				{
					Vmin = Vmax - 0.1;
 8001a32:	4ba0      	ldr	r3, [pc, #640]	; (8001cb4 <main+0xb6c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd8e 	bl	8000558 <__aeabi_f2d>
 8001a3c:	a39a      	add	r3, pc, #616	; (adr r3, 8001ca8 <main+0xb60>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fc29 	bl	8000298 <__aeabi_dsub>
 8001a46:	4603      	mov	r3, r0
 8001a48:	460c      	mov	r4, r1
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	f7ff f89d 	bl	8000b8c <__aeabi_d2f>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b96      	ldr	r3, [pc, #600]	; (8001cb0 <main+0xb68>)
 8001a56:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu2_Print;
 8001a58:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <main+0xb70>)
 8001a5a:	221e      	movs	r2, #30
 8001a5c:	601a      	str	r2, [r3, #0]
				break;
 8001a5e:	e027      	b.n	8001ab0 <main+0x968>
			}
			case 'r':
			{
				Vmin -= 0.1;
 8001a60:	4b93      	ldr	r3, [pc, #588]	; (8001cb0 <main+0xb68>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd77 	bl	8000558 <__aeabi_f2d>
 8001a6a:	a38f      	add	r3, pc, #572	; (adr r3, 8001ca8 <main+0xb60>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fc12 	bl	8000298 <__aeabi_dsub>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	f7ff f886 	bl	8000b8c <__aeabi_d2f>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <main+0xb68>)
 8001a84:	601a      	str	r2, [r3, #0]
				if (Vmin <= 0)
 8001a86:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <main+0xb68>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	d803      	bhi.n	8001a9e <main+0x956>
				{
					Vmin = 0;
 8001a96:	4b86      	ldr	r3, [pc, #536]	; (8001cb0 <main+0xb68>)
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu2_Print;
 8001a9e:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <main+0xb70>)
 8001aa0:	221e      	movs	r2, #30
 8001aa2:	601a      	str	r2, [r3, #0]
				break;
 8001aa4:	e004      	b.n	8001ab0 <main+0x968>
			}
			default: // actully error , you can add error message
			{
				STATE_Display = State_Menu2_Print;
 8001aa6:	4b84      	ldr	r3, [pc, #528]	; (8001cb8 <main+0xb70>)
 8001aa8:	221e      	movs	r2, #30
 8001aaa:	601a      	str	r2, [r3, #0]
				break;
 8001aac:	e000      	b.n	8001ab0 <main+0x968>
				break;
 8001aae:	bf00      	nop
			}
			}
			break;
 8001ab0:	e226      	b.n	8001f00 <main+0xdb8>

		case State_Menu3_Print:
		{
			char temp[] = "|Menu3|\r\n"
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4a81      	ldr	r2, [pc, #516]	; (8001cbc <main+0xb74>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4611      	mov	r1, r2
 8001aba:	23e3      	movs	r3, #227	; 0xe3
 8001abc:	461a      	mov	r2, r3
 8001abe:	f005 fa37 	bl	8006f30 <memcpy>
					"6.[r] - Vmin (-0.1)\r\n"
					"7.[d] + Duty (+5)\r\n"
					"8.[f] - Duty (-5)\r\n"
					"9.[x] Back\r\n"
					"-----------------------------\r\n";
			int f10 = 0, max = 0, min = 0, duty = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			f10 = f * 10;
 8001ada:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <main+0xb78>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aec:	ee17 3a90 	vmov	r3, s15
 8001af0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			max = Vmax * 1000.0;
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <main+0xb6c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2d 	bl	8000558 <__aeabi_f2d>
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <main+0xb7c>)
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4621      	mov	r1, r4
 8001b10:	f7ff f814 	bl	8000b3c <__aeabi_d2iz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			min = Vmin * 1000.0;
 8001b1a:	4b65      	ldr	r3, [pc, #404]	; (8001cb0 <main+0xb68>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd1a 	bl	8000558 <__aeabi_f2d>
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <main+0xb7c>)
 8001b2a:	f7fe fd6d 	bl	8000608 <__aeabi_dmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	4618      	mov	r0, r3
 8001b34:	4621      	mov	r1, r4
 8001b36:	f7ff f801 	bl	8000b3c <__aeabi_d2iz>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			duty = Duty;
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <main+0xb80>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			sprintf(s,
 8001b48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b52:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001b56:	495d      	ldr	r1, [pc, #372]	; (8001ccc <main+0xb84>)
 8001b58:	485d      	ldr	r0, [pc, #372]	; (8001cd0 <main+0xb88>)
 8001b5a:	f005 f9fd 	bl	8006f58 <siprintf>
					"Now frequency*10:[%d] Hz\r\nNow Vmax:[%d] mV\r\nNow Vmin:[%d] mV\r\n",
					f10, max, min);
			sprintf(s2,
 8001b5e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001b62:	495c      	ldr	r1, [pc, #368]	; (8001cd4 <main+0xb8c>)
 8001b64:	485c      	ldr	r0, [pc, #368]	; (8001cd8 <main+0xb90>)
 8001b66:	f005 f9f7 	bl	8006f58 <siprintf>
					"Now Duty:[%d] percent\r\n-----------------------------\r\n",
					duty);
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fb37 	bl	80001e0 <strlen>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4639      	mov	r1, r7
 8001b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7c:	4857      	ldr	r0, [pc, #348]	; (8001cdc <main+0xb94>)
 8001b7e:	f004 fac2 	bl	8006106 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 8001b82:	4853      	ldr	r0, [pc, #332]	; (8001cd0 <main+0xb88>)
 8001b84:	f7fe fb2c 	bl	80001e0 <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b90:	494f      	ldr	r1, [pc, #316]	; (8001cd0 <main+0xb88>)
 8001b92:	4852      	ldr	r0, [pc, #328]	; (8001cdc <main+0xb94>)
 8001b94:	f004 fab7 	bl	8006106 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) s2, strlen(s2), 1000);
 8001b98:	484f      	ldr	r0, [pc, #316]	; (8001cd8 <main+0xb90>)
 8001b9a:	f7fe fb21 	bl	80001e0 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba6:	494c      	ldr	r1, [pc, #304]	; (8001cd8 <main+0xb90>)
 8001ba8:	484c      	ldr	r0, [pc, #304]	; (8001cdc <main+0xb94>)
 8001baa:	f004 faac 	bl	8006106 <HAL_UART_Transmit>
			STATE_Display = State_Menu3_WaitInput;
 8001bae:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <main+0xb70>)
 8001bb0:	2229      	movs	r2, #41	; 0x29
 8001bb2:	601a      	str	r2, [r3, #0]
			break;
 8001bb4:	bf00      	nop
 8001bb6:	e1a3      	b.n	8001f00 <main+0xdb8>
		}

		case State_Menu3_WaitInput: //make decision state
			switch (inputchar)
 8001bb8:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 8001bbc:	2b66      	cmp	r3, #102	; 0x66
 8001bbe:	f000 8175 	beq.w	8001eac <main+0xd64>
 8001bc2:	2b66      	cmp	r3, #102	; 0x66
 8001bc4:	dc0f      	bgt.n	8001be6 <main+0xa9e>
 8001bc6:	2b61      	cmp	r3, #97	; 0x61
 8001bc8:	d021      	beq.n	8001c0e <main+0xac6>
 8001bca:	2b61      	cmp	r3, #97	; 0x61
 8001bcc:	dc04      	bgt.n	8001bd8 <main+0xa90>
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	f000 8193 	beq.w	8001efc <main+0xdb4>
 8001bd6:	e179      	b.n	8001ecc <main+0xd84>
 8001bd8:	2b64      	cmp	r3, #100	; 0x64
 8001bda:	f000 8157 	beq.w	8001e8c <main+0xd44>
 8001bde:	2b65      	cmp	r3, #101	; 0x65
 8001be0:	f000 80ed 	beq.w	8001dbe <main+0xc76>
 8001be4:	e172      	b.n	8001ecc <main+0xd84>
 8001be6:	2b73      	cmp	r3, #115	; 0x73
 8001be8:	d035      	beq.n	8001c56 <main+0xb0e>
 8001bea:	2b73      	cmp	r3, #115	; 0x73
 8001bec:	dc05      	bgt.n	8001bfa <main+0xab2>
 8001bee:	2b71      	cmp	r3, #113	; 0x71
 8001bf0:	d07a      	beq.n	8001ce8 <main+0xba0>
 8001bf2:	2b72      	cmp	r3, #114	; 0x72
 8001bf4:	f000 8127 	beq.w	8001e46 <main+0xcfe>
 8001bf8:	e168      	b.n	8001ecc <main+0xd84>
 8001bfa:	2b77      	cmp	r3, #119	; 0x77
 8001bfc:	f000 809b 	beq.w	8001d36 <main+0xbee>
 8001c00:	2b78      	cmp	r3, #120	; 0x78
 8001c02:	f040 8163 	bne.w	8001ecc <main+0xd84>
			{
			case 'x':
				STATE_Display = State_Menu_Print;
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <main+0xb70>)
 8001c08:	220a      	movs	r2, #10
 8001c0a:	601a      	str	r2, [r3, #0]
				break;
 8001c0c:	e177      	b.n	8001efe <main+0xdb6>
			case -1:
				break;
			case 'a':
			{
				f += 0.1;
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <main+0xb78>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fca0 	bl	8000558 <__aeabi_f2d>
 8001c18:	a323      	add	r3, pc, #140	; (adr r3, 8001ca8 <main+0xb60>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fb3d 	bl	800029c <__adddf3>
 8001c22:	4603      	mov	r3, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	4618      	mov	r0, r3
 8001c28:	4621      	mov	r1, r4
 8001c2a:	f7fe ffaf 	bl	8000b8c <__aeabi_d2f>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <main+0xb78>)
 8001c32:	601a      	str	r2, [r3, #0]
				if (f >= 10)
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <main+0xb78>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	db02      	blt.n	8001c4e <main+0xb06>
				{
					f = 10;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <main+0xb78>)
 8001c4a:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <main+0xb98>)
 8001c4c:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <main+0xb70>)
 8001c50:	2228      	movs	r2, #40	; 0x28
 8001c52:	601a      	str	r2, [r3, #0]
				break;
 8001c54:	e153      	b.n	8001efe <main+0xdb6>
			}
			case 's':
			{
				f -= 0.1;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <main+0xb78>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc7c 	bl	8000558 <__aeabi_f2d>
 8001c60:	a311      	add	r3, pc, #68	; (adr r3, 8001ca8 <main+0xb60>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fb17 	bl	8000298 <__aeabi_dsub>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4621      	mov	r1, r4
 8001c72:	f7fe ff8b 	bl	8000b8c <__aeabi_d2f>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <main+0xb78>)
 8001c7a:	601a      	str	r2, [r3, #0]
				if (f <= 0.1)
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <main+0xb78>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc69 	bl	8000558 <__aeabi_f2d>
 8001c86:	a308      	add	r3, pc, #32	; (adr r3, 8001ca8 <main+0xb60>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe ff38 	bl	8000b00 <__aeabi_dcmple>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <main+0xb54>
				{
					f = 0.1;
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <main+0xb78>)
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <main+0xb9c>)
 8001c9a:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <main+0xb70>)
 8001c9e:	2228      	movs	r2, #40	; 0x28
 8001ca0:	601a      	str	r2, [r3, #0]
				break;
 8001ca2:	e12c      	b.n	8001efe <main+0xdb6>
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	9999999a 	.word	0x9999999a
 8001cac:	3fb99999 	.word	0x3fb99999
 8001cb0:	200000b0 	.word	0x200000b0
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	200001c0 	.word	0x200001c0
 8001cbc:	080084e4 	.word	0x080084e4
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	408f4000 	.word	0x408f4000
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	08008260 	.word	0x08008260
 8001cd0:	200000f8 	.word	0x200000f8
 8001cd4:	080082a0 	.word	0x080082a0
 8001cd8:	2000015c 	.word	0x2000015c
 8001cdc:	2000035c 	.word	0x2000035c
 8001ce0:	41200000 	.word	0x41200000
 8001ce4:	3dcccccd 	.word	0x3dcccccd
			}
			case 'q':
			{
				Vmax += 0.1;
 8001ce8:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <main+0xda0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc33 	bl	8000558 <__aeabi_f2d>
 8001cf2:	a379      	add	r3, pc, #484	; (adr r3, 8001ed8 <main+0xd90>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fad0 	bl	800029c <__adddf3>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4618      	mov	r0, r3
 8001d02:	4621      	mov	r1, r4
 8001d04:	f7fe ff42 	bl	8000b8c <__aeabi_d2f>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <main+0xda0>)
 8001d0c:	601a      	str	r2, [r3, #0]
				if (Vmax >= 3.3)
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <main+0xda0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc20 	bl	8000558 <__aeabi_f2d>
 8001d18:	a371      	add	r3, pc, #452	; (adr r3, 8001ee0 <main+0xd98>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fef9 	bl	8000b14 <__aeabi_dcmpge>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <main+0xbe6>
				{
					Vmax = 3.3;
 8001d28:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <main+0xda0>)
 8001d2a:	4a70      	ldr	r2, [pc, #448]	; (8001eec <main+0xda4>)
 8001d2c:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001d2e:	4b70      	ldr	r3, [pc, #448]	; (8001ef0 <main+0xda8>)
 8001d30:	2228      	movs	r2, #40	; 0x28
 8001d32:	601a      	str	r2, [r3, #0]
				break;
 8001d34:	e0e3      	b.n	8001efe <main+0xdb6>
			}
			case 'w':
			{
				Vmax -= 0.1;
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <main+0xda0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc0c 	bl	8000558 <__aeabi_f2d>
 8001d40:	a365      	add	r3, pc, #404	; (adr r3, 8001ed8 <main+0xd90>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe faa7 	bl	8000298 <__aeabi_dsub>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4621      	mov	r1, r4
 8001d52:	f7fe ff1b 	bl	8000b8c <__aeabi_d2f>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <main+0xda0>)
 8001d5a:	601a      	str	r2, [r3, #0]
				if (Vmax <= Vmin + 0.1)
 8001d5c:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <main+0xda0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbf9 	bl	8000558 <__aeabi_f2d>
 8001d66:	4604      	mov	r4, r0
 8001d68:	460d      	mov	r5, r1
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <main+0xdac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf2 	bl	8000558 <__aeabi_f2d>
 8001d74:	a358      	add	r3, pc, #352	; (adr r3, 8001ed8 <main+0xd90>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fa8f 	bl	800029c <__adddf3>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe febb 	bl	8000b00 <__aeabi_dcmple>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <main+0xc6e>
				{
					Vmax = Vmin + 0.1;
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <main+0xdac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbdf 	bl	8000558 <__aeabi_f2d>
 8001d9a:	a34f      	add	r3, pc, #316	; (adr r3, 8001ed8 <main+0xd90>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fa7c 	bl	800029c <__adddf3>
 8001da4:	4603      	mov	r3, r0
 8001da6:	460c      	mov	r4, r1
 8001da8:	4618      	mov	r0, r3
 8001daa:	4621      	mov	r1, r4
 8001dac:	f7fe feee 	bl	8000b8c <__aeabi_d2f>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <main+0xda0>)
 8001db4:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001db6:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <main+0xda8>)
 8001db8:	2228      	movs	r2, #40	; 0x28
 8001dba:	601a      	str	r2, [r3, #0]
				break;
 8001dbc:	e09f      	b.n	8001efe <main+0xdb6>
			}
			case 'e':
			{
				Vmin += 0.1;
 8001dbe:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <main+0xdac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbc8 	bl	8000558 <__aeabi_f2d>
 8001dc8:	a343      	add	r3, pc, #268	; (adr r3, 8001ed8 <main+0xd90>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fa65 	bl	800029c <__adddf3>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4621      	mov	r1, r4
 8001dda:	f7fe fed7 	bl	8000b8c <__aeabi_d2f>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <main+0xdac>)
 8001de2:	601a      	str	r2, [r3, #0]
				if (Vmin >= Vmax - 0.1)
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <main+0xdac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbb5 	bl	8000558 <__aeabi_f2d>
 8001dee:	4604      	mov	r4, r0
 8001df0:	460d      	mov	r5, r1
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <main+0xda0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fbae 	bl	8000558 <__aeabi_f2d>
 8001dfc:	a336      	add	r3, pc, #216	; (adr r3, 8001ed8 <main+0xd90>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fa49 	bl	8000298 <__aeabi_dsub>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7fe fe81 	bl	8000b14 <__aeabi_dcmpge>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <main+0xcf6>
				{
					Vmin = Vmax - 0.1;
 8001e18:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <main+0xda0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb9b 	bl	8000558 <__aeabi_f2d>
 8001e22:	a32d      	add	r3, pc, #180	; (adr r3, 8001ed8 <main+0xd90>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fa36 	bl	8000298 <__aeabi_dsub>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	460c      	mov	r4, r1
 8001e30:	4618      	mov	r0, r3
 8001e32:	4621      	mov	r1, r4
 8001e34:	f7fe feaa 	bl	8000b8c <__aeabi_d2f>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <main+0xdac>)
 8001e3c:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <main+0xda8>)
 8001e40:	2228      	movs	r2, #40	; 0x28
 8001e42:	601a      	str	r2, [r3, #0]
				break;
 8001e44:	e05b      	b.n	8001efe <main+0xdb6>
			}
			case 'r':
			{
				Vmin -= 0.1;
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <main+0xdac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb84 	bl	8000558 <__aeabi_f2d>
 8001e50:	a321      	add	r3, pc, #132	; (adr r3, 8001ed8 <main+0xd90>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fa1f 	bl	8000298 <__aeabi_dsub>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4621      	mov	r1, r4
 8001e62:	f7fe fe93 	bl	8000b8c <__aeabi_d2f>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <main+0xdac>)
 8001e6a:	601a      	str	r2, [r3, #0]
				if (Vmin <= 0)
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <main+0xdac>)
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	d803      	bhi.n	8001e84 <main+0xd3c>
				{
					Vmin = 0;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <main+0xdac>)
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <main+0xda8>)
 8001e86:	2228      	movs	r2, #40	; 0x28
 8001e88:	601a      	str	r2, [r3, #0]
				break;
 8001e8a:	e038      	b.n	8001efe <main+0xdb6>
			}
			case 'd':
			{
				Duty += 5;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <main+0xdb0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3305      	adds	r3, #5
 8001e92:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <main+0xdb0>)
 8001e94:	6013      	str	r3, [r2, #0]
				if (Duty >= 95)
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <main+0xdb0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b5e      	cmp	r3, #94	; 0x5e
 8001e9c:	dd02      	ble.n	8001ea4 <main+0xd5c>
				{
					Duty = 95;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <main+0xdb0>)
 8001ea0:	225f      	movs	r2, #95	; 0x5f
 8001ea2:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <main+0xda8>)
 8001ea6:	2228      	movs	r2, #40	; 0x28
 8001ea8:	601a      	str	r2, [r3, #0]
				break;
 8001eaa:	e028      	b.n	8001efe <main+0xdb6>
			}
			case 'f':
			{
				Duty -= 5;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <main+0xdb0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3b05      	subs	r3, #5
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <main+0xdb0>)
 8001eb4:	6013      	str	r3, [r2, #0]
				if (Duty <= 5)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <main+0xdb0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	dc02      	bgt.n	8001ec4 <main+0xd7c>
				{
					Duty = 5;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <main+0xdb0>)
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	601a      	str	r2, [r3, #0]
				}
				STATE_Display = State_Menu3_Print;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <main+0xda8>)
 8001ec6:	2228      	movs	r2, #40	; 0x28
 8001ec8:	601a      	str	r2, [r3, #0]
				break;
 8001eca:	e018      	b.n	8001efe <main+0xdb6>
			}
			default: // actully error , you can add error message
			{
				STATE_Display = State_Menu3_Print;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <main+0xda8>)
 8001ece:	2228      	movs	r2, #40	; 0x28
 8001ed0:	601a      	str	r2, [r3, #0]
				break;
 8001ed2:	e014      	b.n	8001efe <main+0xdb6>
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	9999999a 	.word	0x9999999a
 8001edc:	3fb99999 	.word	0x3fb99999
 8001ee0:	66666666 	.word	0x66666666
 8001ee4:	400a6666 	.word	0x400a6666
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	40533333 	.word	0x40533333
 8001ef0:	200001c0 	.word	0x200001c0
 8001ef4:	200000b0 	.word	0x200000b0
 8001ef8:	2000000c 	.word	0x2000000c
				break;
 8001efc:	bf00      	nop
			}
			}
			break;
 8001efe:	bf00      	nop
		}

		if (STATE_Display == State_Menu1_WaitInput)
 8001f00:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <main+0xf60>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b15      	cmp	r3, #21
 8001f06:	f040 8199 	bne.w	800223c <main+0x10f4>
		{
			if (micros() - timestamp >= 1000)
 8001f0a:	f000 fe87 	bl	8002c1c <micros>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	4618      	mov	r0, r3
 8001f14:	4621      	mov	r1, r4
 8001f16:	f7fe ff51 	bl	8000dbc <__aeabi_ul2f>
 8001f1a:	ee07 0a10 	vmov	s14, r0
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <main+0xf64>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f28:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80020b0 <main+0xf68>
 8001f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	f2c0 8182 	blt.w	800223c <main+0x10f4>
			{
				timestamp = micros();
 8001f38:	f000 fe70 	bl	8002c1c <micros>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	4618      	mov	r0, r3
 8001f42:	4621      	mov	r1, r4
 8001f44:	f7fe ff3a 	bl	8000dbc <__aeabi_ul2f>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b58      	ldr	r3, [pc, #352]	; (80020ac <main+0xf64>)
 8001f4c:	601a      	str	r2, [r3, #0]
				if (flip == 0)
 8001f4e:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <main+0xf6c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 80bc 	bne.w	80020d0 <main+0xf88>
				{
					data = (Vmax - Vmin)
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <main+0xf70>)
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	4b57      	ldr	r3, [pc, #348]	; (80020bc <main+0xf74>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f68:	ee17 0a90 	vmov	r0, s15
 8001f6c:	f7fe faf4 	bl	8000558 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
							* (4096.0 * timestamp * f / (3.3 * 1000000.0));
 8001f74:	4b4d      	ldr	r3, [pc, #308]	; (80020ac <main+0xf64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe faed 	bl	8000558 <__aeabi_f2d>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <main+0xf78>)
 8001f84:	f7fe fb40 	bl	8000608 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4690      	mov	r8, r2
 8001f8e:	4699      	mov	r9, r3
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <main+0xf7c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fadf 	bl	8000558 <__aeabi_f2d>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4640      	mov	r0, r8
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	f7fe fb31 	bl	8000608 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	a338      	add	r3, pc, #224	; (adr r3, 8002090 <main+0xf48>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe fc52 	bl	800085c <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f7fe fb22 	bl	8000608 <__aeabi_dmul>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	4621      	mov	r1, r4
 8001fcc:	f7fe fdde 	bl	8000b8c <__aeabi_d2f>
 8001fd0:	4602      	mov	r2, r0
					data = (Vmax - Vmin)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <main+0xf80>)
 8001fd4:	601a      	str	r2, [r3, #0]
					dataOut = data;
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <main+0xf80>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe0:	ee17 2a90 	vmov	r2, s15
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <main+0xf84>)
 8001fe6:	601a      	str	r2, [r3, #0]
					int mod = ((Vmax - Vmin) * (4096.0 / 3.3));
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <main+0xf70>)
 8001fea:	ed93 7a00 	vldr	s14, [r3]
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <main+0xf74>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff8:	ee17 0a90 	vmov	r0, s15
 8001ffc:	f7fe faac 	bl	8000558 <__aeabi_f2d>
 8002000:	a325      	add	r3, pc, #148	; (adr r3, 8002098 <main+0xf50>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe faff 	bl	8000608 <__aeabi_dmul>
 800200a:	4603      	mov	r3, r0
 800200c:	460c      	mov	r4, r1
 800200e:	4618      	mov	r0, r3
 8002010:	4621      	mov	r1, r4
 8002012:	f7fe fd93 	bl	8000b3c <__aeabi_d2iz>
 8002016:	4603      	mov	r3, r0
 8002018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					dataOut %= mod;
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <main+0xf84>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002024:	fb93 f2f2 	sdiv	r2, r3, r2
 8002028:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800202c:	fb01 f202 	mul.w	r2, r1, r2
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	4a26      	ldr	r2, [pc, #152]	; (80020cc <main+0xf84>)
 8002034:	6013      	str	r3, [r2, #0]
					dataOut += (Vmin * 4096.0 / 3.3);
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <main+0xf84>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa7a 	bl	8000534 <__aeabi_i2d>
 8002040:	4604      	mov	r4, r0
 8002042:	460d      	mov	r5, r1
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <main+0xf74>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa85 	bl	8000558 <__aeabi_f2d>
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <main+0xf78>)
 8002054:	f7fe fad8 	bl	8000608 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a30f      	add	r3, pc, #60	; (adr r3, 80020a0 <main+0xf58>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fbf9 	bl	800085c <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f913 	bl	800029c <__adddf3>
 8002076:	4603      	mov	r3, r0
 8002078:	460c      	mov	r4, r1
 800207a:	4618      	mov	r0, r3
 800207c:	4621      	mov	r1, r4
 800207e:	f7fe fd5d 	bl	8000b3c <__aeabi_d2iz>
 8002082:	4602      	mov	r2, r0
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <main+0xf84>)
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e0c1      	b.n	800220e <main+0x10c6>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	00000000 	.word	0x00000000
 8002094:	41492d50 	.word	0x41492d50
 8002098:	364d9365 	.word	0x364d9365
 800209c:	409364d9 	.word	0x409364d9
 80020a0:	66666666 	.word	0x66666666
 80020a4:	400a6666 	.word	0x400a6666
 80020a8:	200001c0 	.word	0x200001c0
 80020ac:	200001c4 	.word	0x200001c4
 80020b0:	447a0000 	.word	0x447a0000
 80020b4:	200000b4 	.word	0x200000b4
 80020b8:	20000004 	.word	0x20000004
 80020bc:	200000b0 	.word	0x200000b0
 80020c0:	40b00000 	.word	0x40b00000
 80020c4:	20000008 	.word	0x20000008
 80020c8:	200000ac 	.word	0x200000ac
 80020cc:	200000a8 	.word	0x200000a8
				}
				else if (flip == 1)
 80020d0:	4bd3      	ldr	r3, [pc, #844]	; (8002420 <main+0x12d8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	f040 809a 	bne.w	800220e <main+0x10c6>
				{
					data = (Vmax - Vmin)
 80020da:	4bd2      	ldr	r3, [pc, #840]	; (8002424 <main+0x12dc>)
 80020dc:	ed93 7a00 	vldr	s14, [r3]
 80020e0:	4bd1      	ldr	r3, [pc, #836]	; (8002428 <main+0x12e0>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ea:	ee17 0a90 	vmov	r0, s15
 80020ee:	f7fe fa33 	bl	8000558 <__aeabi_f2d>
 80020f2:	4604      	mov	r4, r0
 80020f4:	460d      	mov	r5, r1
							* (4096.0 * timestamp * f / (3.3 * 1000000.0));
 80020f6:	4bcd      	ldr	r3, [pc, #820]	; (800242c <main+0x12e4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa2c 	bl	8000558 <__aeabi_f2d>
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4bca      	ldr	r3, [pc, #808]	; (8002430 <main+0x12e8>)
 8002106:	f7fe fa7f 	bl	8000608 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4690      	mov	r8, r2
 8002110:	4699      	mov	r9, r3
 8002112:	4bc8      	ldr	r3, [pc, #800]	; (8002434 <main+0x12ec>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa1e 	bl	8000558 <__aeabi_f2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4640      	mov	r0, r8
 8002122:	4649      	mov	r1, r9
 8002124:	f7fe fa70 	bl	8000608 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	a3b1      	add	r3, pc, #708	; (adr r3, 80023f8 <main+0x12b0>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fb91 	bl	800085c <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe fa61 	bl	8000608 <__aeabi_dmul>
 8002146:	4603      	mov	r3, r0
 8002148:	460c      	mov	r4, r1
 800214a:	4618      	mov	r0, r3
 800214c:	4621      	mov	r1, r4
 800214e:	f7fe fd1d 	bl	8000b8c <__aeabi_d2f>
 8002152:	4602      	mov	r2, r0
					data = (Vmax - Vmin)
 8002154:	4bb8      	ldr	r3, [pc, #736]	; (8002438 <main+0x12f0>)
 8002156:	601a      	str	r2, [r3, #0]
					dataOut = -data;
 8002158:	4bb7      	ldr	r3, [pc, #732]	; (8002438 <main+0x12f0>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	eef1 7a67 	vneg.f32	s15, s15
 8002162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002166:	ee17 2a90 	vmov	r2, s15
 800216a:	4bb4      	ldr	r3, [pc, #720]	; (800243c <main+0x12f4>)
 800216c:	601a      	str	r2, [r3, #0]
					int mod = ((Vmin - Vmax) * (4096.0 / 3.3));
 800216e:	4bae      	ldr	r3, [pc, #696]	; (8002428 <main+0x12e0>)
 8002170:	ed93 7a00 	vldr	s14, [r3]
 8002174:	4bab      	ldr	r3, [pc, #684]	; (8002424 <main+0x12dc>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217e:	ee17 0a90 	vmov	r0, s15
 8002182:	f7fe f9e9 	bl	8000558 <__aeabi_f2d>
 8002186:	a39e      	add	r3, pc, #632	; (adr r3, 8002400 <main+0x12b8>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fa3c 	bl	8000608 <__aeabi_dmul>
 8002190:	4603      	mov	r3, r0
 8002192:	460c      	mov	r4, r1
 8002194:	4618      	mov	r0, r3
 8002196:	4621      	mov	r1, r4
 8002198:	f7fe fcd0 	bl	8000b3c <__aeabi_d2iz>
 800219c:	4603      	mov	r3, r0
 800219e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
					dataOut %= mod;
 80021a2:	4ba6      	ldr	r3, [pc, #664]	; (800243c <main+0x12f4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80021aa:	fb93 f2f2 	sdiv	r2, r3, r2
 80021ae:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80021b2:	fb01 f202 	mul.w	r2, r1, r2
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	4aa0      	ldr	r2, [pc, #640]	; (800243c <main+0x12f4>)
 80021ba:	6013      	str	r3, [r2, #0]
					dataOut += (Vmax * 4096.0 / 3.3);
 80021bc:	4b9f      	ldr	r3, [pc, #636]	; (800243c <main+0x12f4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9b7 	bl	8000534 <__aeabi_i2d>
 80021c6:	4604      	mov	r4, r0
 80021c8:	460d      	mov	r5, r1
 80021ca:	4b96      	ldr	r3, [pc, #600]	; (8002424 <main+0x12dc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9c2 	bl	8000558 <__aeabi_f2d>
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	4b95      	ldr	r3, [pc, #596]	; (8002430 <main+0x12e8>)
 80021da:	f7fe fa15 	bl	8000608 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	a388      	add	r3, pc, #544	; (adr r3, 8002408 <main+0x12c0>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe fb36 	bl	800085c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fe f850 	bl	800029c <__adddf3>
 80021fc:	4603      	mov	r3, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	4618      	mov	r0, r3
 8002202:	4621      	mov	r1, r4
 8002204:	f7fe fc9a 	bl	8000b3c <__aeabi_d2iz>
 8002208:	4602      	mov	r2, r0
 800220a:	4b8c      	ldr	r3, [pc, #560]	; (800243c <main+0x12f4>)
 800220c:	601a      	str	r2, [r3, #0]
				}
				if (hspi3.State == HAL_SPI_STATE_READY
 800220e:	4b8c      	ldr	r3, [pc, #560]	; (8002440 <main+0x12f8>)
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d110      	bne.n	800223c <main+0x10f4>
						&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800221a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221e:	4889      	ldr	r0, [pc, #548]	; (8002444 <main+0x12fc>)
 8002220:	f002 fb42 	bl	80048a8 <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <main+0x10f4>
								== GPIO_PIN_SET)
				{
					MCP4922SetOutput(DACConfig, dataOut);
 800222a:	4b87      	ldr	r3, [pc, #540]	; (8002448 <main+0x1300>)
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	4b83      	ldr	r3, [pc, #524]	; (800243c <main+0x12f4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f000 fc92 	bl	8002b60 <MCP4922SetOutput>
				}
			}
		}

		if (STATE_Display == State_Menu2_WaitInput)
 800223c:	4b83      	ldr	r3, [pc, #524]	; (800244c <main+0x1304>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b1f      	cmp	r3, #31
 8002242:	f040 811e 	bne.w	8002482 <main+0x133a>
		{
			if (micros() - timestamp >= 1000)
 8002246:	f000 fce9 	bl	8002c1c <micros>
 800224a:	4603      	mov	r3, r0
 800224c:	460c      	mov	r4, r1
 800224e:	4618      	mov	r0, r3
 8002250:	4621      	mov	r1, r4
 8002252:	f7fe fdb3 	bl	8000dbc <__aeabi_ul2f>
 8002256:	ee07 0a10 	vmov	s14, r0
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <main+0x12e4>)
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002264:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002450 <main+0x1308>
 8002268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	f2c0 80f0 	blt.w	8002454 <main+0x130c>
			{
				timestamp = micros();
 8002274:	f000 fcd2 	bl	8002c1c <micros>
 8002278:	4603      	mov	r3, r0
 800227a:	460c      	mov	r4, r1
 800227c:	4618      	mov	r0, r3
 800227e:	4621      	mov	r1, r4
 8002280:	f7fe fd9c 	bl	8000dbc <__aeabi_ul2f>
 8002284:	4602      	mov	r2, r0
 8002286:	4b69      	ldr	r3, [pc, #420]	; (800242c <main+0x12e4>)
 8002288:	601a      	str	r2, [r3, #0]

				data = (float) (((Vmax - Vmin) / 2) * (4096.0 / 3.3)
 800228a:	4b66      	ldr	r3, [pc, #408]	; (8002424 <main+0x12dc>)
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	4b65      	ldr	r3, [pc, #404]	; (8002428 <main+0x12e0>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800229e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022a2:	ee16 0a90 	vmov	r0, s13
 80022a6:	f7fe f957 	bl	8000558 <__aeabi_f2d>
 80022aa:	a355      	add	r3, pc, #340	; (adr r3, 8002400 <main+0x12b8>)
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	f7fe f9aa 	bl	8000608 <__aeabi_dmul>
 80022b4:	4603      	mov	r3, r0
 80022b6:	460c      	mov	r4, r1
 80022b8:	4625      	mov	r5, r4
 80022ba:	461c      	mov	r4, r3
						* sinf((float) (2 * 3.14 * f * timestamp / 1000000.0)));
 80022bc:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <main+0x12ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f949 	bl	8000558 <__aeabi_f2d>
 80022c6:	a352      	add	r3, pc, #328	; (adr r3, 8002410 <main+0x12c8>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fe f99c 	bl	8000608 <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4690      	mov	r8, r2
 80022d6:	4699      	mov	r9, r3
 80022d8:	4b54      	ldr	r3, [pc, #336]	; (800242c <main+0x12e4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f93b 	bl	8000558 <__aeabi_f2d>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4640      	mov	r0, r8
 80022e8:	4649      	mov	r1, r9
 80022ea:	f7fe f98d 	bl	8000608 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	a348      	add	r3, pc, #288	; (adr r3, 8002418 <main+0x12d0>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fe faae 	bl	800085c <__aeabi_ddiv>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc40 	bl	8000b8c <__aeabi_d2f>
 800230c:	4603      	mov	r3, r0
 800230e:	ee00 3a10 	vmov	s0, r3
 8002312:	f005 fa1d 	bl	8007750 <sinf>
 8002316:	ee10 3a10 	vmov	r3, s0
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f91c 	bl	8000558 <__aeabi_f2d>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fe f96e 	bl	8000608 <__aeabi_dmul>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
				data = (float) (((Vmax - Vmin) / 2) * (4096.0 / 3.3)
 8002330:	4618      	mov	r0, r3
 8002332:	4621      	mov	r1, r4
 8002334:	f7fe fc2a 	bl	8000b8c <__aeabi_d2f>
 8002338:	4602      	mov	r2, r0
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <main+0x12f0>)
 800233c:	601a      	str	r2, [r3, #0]
				dataOut = data;
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <main+0x12f0>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002348:	ee17 2a90 	vmov	r2, s15
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <main+0x12f4>)
 800234e:	601a      	str	r2, [r3, #0]
				dataOut += (((Vmax - Vmin) / 2) * 4096.0 / 3.3)
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <main+0x12f4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8ed 	bl	8000534 <__aeabi_i2d>
 800235a:	4604      	mov	r4, r0
 800235c:	460d      	mov	r5, r1
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <main+0x12dc>)
 8002360:	ed93 7a00 	vldr	s14, [r3]
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <main+0x12e0>)
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002372:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002376:	ee16 0a90 	vmov	r0, s13
 800237a:	f7fe f8ed 	bl	8000558 <__aeabi_f2d>
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <main+0x12e8>)
 8002384:	f7fe f940 	bl	8000608 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	a31d      	add	r3, pc, #116	; (adr r3, 8002408 <main+0x12c0>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe fa61 	bl	800085c <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4690      	mov	r8, r2
 80023a0:	4699      	mov	r9, r3
						+ ((Vmin) * 4096.0 / 3.3);
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <main+0x12e0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8d6 	bl	8000558 <__aeabi_f2d>
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <main+0x12e8>)
 80023b2:	f7fe f929 	bl	8000608 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	a312      	add	r3, pc, #72	; (adr r3, 8002408 <main+0x12c0>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe fa4a 	bl	800085c <__aeabi_ddiv>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4640      	mov	r0, r8
 80023ce:	4649      	mov	r1, r9
 80023d0:	f7fd ff64 	bl	800029c <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
				dataOut += (((Vmax - Vmin) / 2) * 4096.0 / 3.3)
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff5e 	bl	800029c <__adddf3>
 80023e0:	4603      	mov	r3, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	4618      	mov	r0, r3
 80023e6:	4621      	mov	r1, r4
 80023e8:	f7fe fba8 	bl	8000b3c <__aeabi_d2iz>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <main+0x12f4>)
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e02f      	b.n	8002454 <main+0x130c>
 80023f4:	f3af 8000 	nop.w
 80023f8:	00000000 	.word	0x00000000
 80023fc:	41492d50 	.word	0x41492d50
 8002400:	364d9365 	.word	0x364d9365
 8002404:	409364d9 	.word	0x409364d9
 8002408:	66666666 	.word	0x66666666
 800240c:	400a6666 	.word	0x400a6666
 8002410:	51eb851f 	.word	0x51eb851f
 8002414:	40191eb8 	.word	0x40191eb8
 8002418:	00000000 	.word	0x00000000
 800241c:	412e8480 	.word	0x412e8480
 8002420:	200000b4 	.word	0x200000b4
 8002424:	20000004 	.word	0x20000004
 8002428:	200000b0 	.word	0x200000b0
 800242c:	200001c4 	.word	0x200001c4
 8002430:	40b00000 	.word	0x40b00000
 8002434:	20000008 	.word	0x20000008
 8002438:	200000ac 	.word	0x200000ac
 800243c:	200000a8 	.word	0x200000a8
 8002440:	2000021c 	.word	0x2000021c
 8002444:	40020400 	.word	0x40020400
 8002448:	20000000 	.word	0x20000000
 800244c:	200001c0 	.word	0x200001c0
 8002450:	447a0000 	.word	0x447a0000
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <main+0x14b8>)
 8002456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d110      	bne.n	8002482 <main+0x133a>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8002460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002464:	4867      	ldr	r0, [pc, #412]	; (8002604 <main+0x14bc>)
 8002466:	f002 fa1f 	bl	80048a8 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <main+0x133a>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8002470:	4b65      	ldr	r3, [pc, #404]	; (8002608 <main+0x14c0>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b65      	ldr	r3, [pc, #404]	; (800260c <main+0x14c4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f000 fb6f 	bl	8002b60 <MCP4922SetOutput>
			}
		}

		if (STATE_Display == State_Menu3_WaitInput)
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <main+0x14c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b29      	cmp	r3, #41	; 0x29
 8002488:	f47e ae85 	bne.w	8001196 <main+0x4e>
		{
			if (i == 0)
 800248c:	4b61      	ldr	r3, [pc, #388]	; (8002614 <main+0x14cc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10d      	bne.n	80024b0 <main+0x1368>
			{
				timestamp = micros();
 8002494:	f000 fbc2 	bl	8002c1c <micros>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	4618      	mov	r0, r3
 800249e:	4621      	mov	r1, r4
 80024a0:	f7fe fc8c 	bl	8000dbc <__aeabi_ul2f>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <main+0x14d0>)
 80024a8:	601a      	str	r2, [r3, #0]
				i = 1;
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <main+0x14cc>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
			}
			if (micros() < timestamp + ((1000000 * Duty) / (f * 100)))
 80024b0:	f000 fbb4 	bl	8002c1c <micros>
 80024b4:	4603      	mov	r3, r0
 80024b6:	460c      	mov	r4, r1
 80024b8:	4618      	mov	r0, r3
 80024ba:	4621      	mov	r1, r4
 80024bc:	f7fe fc7e 	bl	8000dbc <__aeabi_ul2f>
 80024c0:	ee06 0a10 	vmov	s12, r0
 80024c4:	4b55      	ldr	r3, [pc, #340]	; (800261c <main+0x14d4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a55      	ldr	r2, [pc, #340]	; (8002620 <main+0x14d8>)
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024d6:	4b53      	ldr	r3, [pc, #332]	; (8002624 <main+0x14dc>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002628 <main+0x14e0>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <main+0x14d0>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	d525      	bpl.n	8002548 <main+0x1400>
			{
				dataOut = ((Vmax) * 4096.0 / 3.3);
 80024fc:	4b4b      	ldr	r3, [pc, #300]	; (800262c <main+0x14e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f829 	bl	8000558 <__aeabi_f2d>
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <main+0x14e8>)
 800250c:	f7fe f87c 	bl	8000608 <__aeabi_dmul>
 8002510:	4603      	mov	r3, r0
 8002512:	460c      	mov	r4, r1
 8002514:	4618      	mov	r0, r3
 8002516:	4621      	mov	r1, r4
 8002518:	a337      	add	r3, pc, #220	; (adr r3, 80025f8 <main+0x14b0>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f99d 	bl	800085c <__aeabi_ddiv>
 8002522:	4603      	mov	r3, r0
 8002524:	460c      	mov	r4, r1
 8002526:	4618      	mov	r0, r3
 8002528:	4621      	mov	r1, r4
 800252a:	f7fe fb07 	bl	8000b3c <__aeabi_d2iz>
 800252e:	4602      	mov	r2, r0
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <main+0x14c4>)
 8002532:	601a      	str	r2, [r3, #0]
				if (dataOut >= 4096)
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <main+0x14c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253c:	db3f      	blt.n	80025be <main+0x1476>
				{
					dataOut = 4095;
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <main+0x14c4>)
 8002540:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e03a      	b.n	80025be <main+0x1476>
				}
			}
			else if (micros() < timestamp + (1000000 / f))
 8002548:	f000 fb68 	bl	8002c1c <micros>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	4618      	mov	r0, r3
 8002552:	4621      	mov	r1, r4
 8002554:	f7fe fc32 	bl	8000dbc <__aeabi_ul2f>
 8002558:	ee06 0a10 	vmov	s12, r0
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <main+0x14dc>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002634 <main+0x14ec>
 8002566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <main+0x14d0>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002574:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	d51c      	bpl.n	80025b8 <main+0x1470>
			{
				dataOut = ((Vmin) * 4096.0 / 3.3);
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <main+0x14f0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ffe8 	bl	8000558 <__aeabi_f2d>
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <main+0x14e8>)
 800258e:	f7fe f83b 	bl	8000608 <__aeabi_dmul>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	4618      	mov	r0, r3
 8002598:	4621      	mov	r1, r4
 800259a:	a317      	add	r3, pc, #92	; (adr r3, 80025f8 <main+0x14b0>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f7fe f95c 	bl	800085c <__aeabi_ddiv>
 80025a4:	4603      	mov	r3, r0
 80025a6:	460c      	mov	r4, r1
 80025a8:	4618      	mov	r0, r3
 80025aa:	4621      	mov	r1, r4
 80025ac:	f7fe fac6 	bl	8000b3c <__aeabi_d2iz>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <main+0x14c4>)
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e002      	b.n	80025be <main+0x1476>
			}
			else
			{
				i = 0;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <main+0x14cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <main+0x14b8>)
 80025c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f47e ade5 	bne.w	8001196 <main+0x4e>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 80025cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <main+0x14bc>)
 80025d2:	f002 f969 	bl	80048a8 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f47e addc 	bne.w	8001196 <main+0x4e>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <main+0x14c0>)
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <main+0x14c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fab8 	bl	8002b60 <MCP4922SetOutput>
	{
 80025f0:	f7fe bdd1 	b.w	8001196 <main+0x4e>
 80025f4:	f3af 8000 	nop.w
 80025f8:	66666666 	.word	0x66666666
 80025fc:	400a6666 	.word	0x400a6666
 8002600:	2000021c 	.word	0x2000021c
 8002604:	40020400 	.word	0x40020400
 8002608:	20000000 	.word	0x20000000
 800260c:	200000a8 	.word	0x200000a8
 8002610:	200001c0 	.word	0x200001c0
 8002614:	200001c8 	.word	0x200001c8
 8002618:	200001c4 	.word	0x200001c4
 800261c:	2000000c 	.word	0x2000000c
 8002620:	000f4240 	.word	0x000f4240
 8002624:	20000008 	.word	0x20000008
 8002628:	42c80000 	.word	0x42c80000
 800262c:	20000004 	.word	0x20000004
 8002630:	40b00000 	.word	0x40b00000
 8002634:	49742400 	.word	0x49742400
 8002638:	200000b0 	.word	0x200000b0

0800263c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b094      	sub	sp, #80	; 0x50
 8002640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	2230      	movs	r2, #48	; 0x30
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f004 fc7b 	bl	8006f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <SystemClock_Config+0xc8>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4a26      	ldr	r2, [pc, #152]	; (8002704 <SystemClock_Config+0xc8>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <SystemClock_Config+0xc8>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <SystemClock_Config+0xcc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a20      	ldr	r2, [pc, #128]	; (8002708 <SystemClock_Config+0xcc>)
 8002686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <SystemClock_Config+0xcc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002698:	2302      	movs	r3, #2
 800269a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269c:	2301      	movs	r3, #1
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026a0:	2310      	movs	r3, #16
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a4:	2302      	movs	r3, #2
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026ac:	2308      	movs	r3, #8
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80026b0:	2364      	movs	r3, #100	; 0x64
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026b8:	2304      	movs	r3, #4
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 f923 	bl	800490c <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026cc:	f000 fac0 	bl	8002c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
 80026d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	2302      	movs	r3, #2
 80026d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	2103      	movs	r1, #3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fb7d 	bl	8004dec <HAL_RCC_ClockConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026f8:	f000 faaa 	bl	8002c50 <Error_Handler>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3750      	adds	r7, #80	; 0x50
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000

0800270c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002720:	4a22      	ldr	r2, [pc, #136]	; (80027ac <MX_ADC1_Init+0xa0>)
 8002722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800272a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_ADC1_Init+0x9c>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002734:	2201      	movs	r2, #1
 8002736:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_ADC1_Init+0x9c>)
 800273a:	2200      	movs	r2, #0
 800273c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002750:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_ADC1_Init+0x9c>)
 800275e:	2201      	movs	r2, #1
 8002760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_ADC1_Init+0x9c>)
 800276c:	2201      	movs	r2, #1
 800276e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002772:	f000 fd3b 	bl	80031ec <HAL_ADC_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800277c:	f000 fa68 	bl	8002c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002780:	2300      	movs	r3, #0
 8002782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002784:	2301      	movs	r3, #1
 8002786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278c:	463b      	mov	r3, r7
 800278e:	4619      	mov	r1, r3
 8002790:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_ADC1_Init+0x9c>)
 8002792:	f000 ffab 	bl	80036ec <HAL_ADC_ConfigChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800279c:	f000 fa58 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000274 	.word	0x20000274
 80027ac:	40012000 	.word	0x40012000

080027b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <MX_SPI3_Init+0x68>)
 80027b6:	4a19      	ldr	r2, [pc, #100]	; (800281c <MX_SPI3_Init+0x6c>)
 80027b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <MX_SPI3_Init+0x68>)
 80027bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <MX_SPI3_Init+0x68>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <MX_SPI3_Init+0x68>)
 80027ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_SPI3_Init+0x68>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <MX_SPI3_Init+0x68>)
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_SPI3_Init+0x68>)
 80027de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_SPI3_Init+0x68>)
 80027e6:	2220      	movs	r2, #32
 80027e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_SPI3_Init+0x68>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_SPI3_Init+0x68>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_SPI3_Init+0x68>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_SPI3_Init+0x68>)
 80027fe:	220a      	movs	r2, #10
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_SPI3_Init+0x68>)
 8002804:	f002 fce4 	bl	80051d0 <HAL_SPI_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800280e:	f000 fa1f 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000021c 	.word	0x2000021c
 800281c:	40003c00 	.word	0x40003c00

08002820 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002834:	463b      	mov	r3, r7
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <MX_TIM3_Init+0x90>)
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <MX_TIM3_Init+0x94>)
 8002840:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_TIM3_Init+0x90>)
 8002844:	2263      	movs	r2, #99	; 0x63
 8002846:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_TIM3_Init+0x90>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_TIM3_Init+0x90>)
 8002850:	2264      	movs	r2, #100	; 0x64
 8002852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MX_TIM3_Init+0x90>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_TIM3_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002860:	4813      	ldr	r0, [pc, #76]	; (80028b0 <MX_TIM3_Init+0x90>)
 8002862:	f003 f80d 	bl	8005880 <HAL_TIM_Base_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800286c:	f000 f9f0 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	4619      	mov	r1, r3
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <MX_TIM3_Init+0x90>)
 800287e:	f003 f97a 	bl	8005b76 <HAL_TIM_ConfigClockSource>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002888:	f000 f9e2 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800288c:	2320      	movs	r3, #32
 800288e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002894:	463b      	mov	r3, r7
 8002896:	4619      	mov	r1, r3
 8002898:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_TIM3_Init+0x90>)
 800289a:	f003 fb65 	bl	8005f68 <HAL_TIMEx_MasterConfigSynchronization>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80028a4:	f000 f9d4 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200001dc 	.word	0x200001dc
 80028b4:	40000400 	.word	0x40000400

080028b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <MX_TIM11_Init+0x44>)
 80028c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028c4:	2263      	movs	r2, #99	; 0x63
 80028c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028e4:	f002 ffcc 	bl	8005880 <HAL_TIM_Base_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80028ee:	f000 f9af 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200002bc 	.word	0x200002bc
 80028fc:	40014800 	.word	0x40014800

08002900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_USART2_UART_Init+0x4c>)
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <MX_USART2_UART_Init+0x50>)
 8002908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <MX_USART2_UART_Init+0x4c>)
 800290c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_USART2_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <MX_USART2_UART_Init+0x4c>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <MX_USART2_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <MX_USART2_UART_Init+0x4c>)
 8002926:	220c      	movs	r2, #12
 8002928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <MX_USART2_UART_Init+0x4c>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <MX_USART2_UART_Init+0x4c>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <MX_USART2_UART_Init+0x4c>)
 8002938:	f003 fb98 	bl	800606c <HAL_UART_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002942:	f000 f985 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000035c 	.word	0x2000035c
 8002950:	40004400 	.word	0x40004400

08002954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_DMA_Init+0x3c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <MX_DMA_Init+0x3c>)
 8002964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_DMA_Init+0x3c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	2038      	movs	r0, #56	; 0x38
 800297c:	f001 fa4b 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002980:	2038      	movs	r0, #56	; 0x38
 8002982:	f001 fa64 	bl	8003e4e <HAL_NVIC_EnableIRQ>

}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a41      	ldr	r2, [pc, #260]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a33      	ldr	r2, [pc, #204]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <MX_GPIO_Init+0x124>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <MX_GPIO_Init+0x124>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <MX_GPIO_Init+0x124>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <MX_GPIO_Init+0x124>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LOAD_Pin, GPIO_PIN_RESET);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002a20:	4826      	ldr	r0, [pc, #152]	; (8002abc <MX_GPIO_Init+0x128>)
 8002a22:	f001 ff59 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002a26:	2201      	movs	r2, #1
 8002a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a2c:	4824      	ldr	r0, [pc, #144]	; (8002ac0 <MX_GPIO_Init+0x12c>)
 8002a2e:	f001 ff53 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002a32:	2201      	movs	r2, #1
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	4823      	ldr	r0, [pc, #140]	; (8002ac4 <MX_GPIO_Init+0x130>)
 8002a38:	f001 ff4e 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a42:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <MX_GPIO_Init+0x134>)
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	481c      	ldr	r0, [pc, #112]	; (8002ac4 <MX_GPIO_Init+0x130>)
 8002a52:	f001 fda7 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002a56:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4813      	ldr	r0, [pc, #76]	; (8002abc <MX_GPIO_Init+0x128>)
 8002a70:	f001 fd98 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <MX_GPIO_Init+0x12c>)
 8002a8e:	f001 fd89 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <MX_GPIO_Init+0x130>)
 8002aaa:	f001 fd7b 	bl	80045a4 <HAL_GPIO_Init>

}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	; 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	10210000 	.word	0x10210000

08002acc <UARTRecieveIT>:
	HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer, strlen(TxDataBuffer),
			1000);

}
int16_t UARTRecieveIT()
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
	static uint32_t dataPos = 0;
	int16_t data = -1;
 8002ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad6:	80fb      	strh	r3, [r7, #6]
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos)
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <UARTRecieveIT+0x58>)
 8002ada:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <UARTRecieveIT+0x58>)
 8002ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <UARTRecieveIT+0x5c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d010      	beq.n	8002b12 <UARTRecieveIT+0x46>
	{
		data = RxDataBuffer[dataPos];
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <UARTRecieveIT+0x5c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <UARTRecieveIT+0x60>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	80fb      	strh	r3, [r7, #6]
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <UARTRecieveIT+0x5c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <UARTRecieveIT+0x58>)
 8002b02:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b08:	fb02 f201 	mul.w	r2, r2, r1
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <UARTRecieveIT+0x5c>)
 8002b10:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	2000035c 	.word	0x2000035c
 8002b28:	200001cc 	.word	0x200001cc
 8002b2c:	200000d8 	.word	0x200000d8

08002b30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer, strlen(TxDataBuffer),
 8002b38:	4807      	ldr	r0, [pc, #28]	; (8002b58 <HAL_UART_RxCpltCallback+0x28>)
 8002b3a:	f7fd fb51 	bl	80001e0 <strlen>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b46:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_UART_RxCpltCallback+0x28>)
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <HAL_UART_RxCpltCallback+0x2c>)
 8002b4a:	f003 fadc 	bl	8006106 <HAL_UART_Transmit>
			1000);
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200000b8 	.word	0x200000b8
 8002b5c:	2000035c 	.word	0x2000035c

08002b60 <MCP4922SetOutput>:
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	460a      	mov	r2, r1
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	031b      	lsls	r3, r3, #12
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b86:	4807      	ldr	r0, [pc, #28]	; (8002ba4 <MCP4922SetOutput+0x44>)
 8002b88:	f001 fea6 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2201      	movs	r2, #1
 8002b92:	4619      	mov	r1, r3
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MCP4922SetOutput+0x48>)
 8002b96:	f002 fb7f 	bl	8005298 <HAL_SPI_Transmit_IT>
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	2000021c 	.word	0x2000021c

08002bac <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <HAL_SPI_TxCpltCallback+0x24>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d105      	bne.n	8002bc8 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bc2:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <HAL_SPI_TxCpltCallback+0x28>)
 8002bc4:	f001 fe88 	bl	80048d8 <HAL_GPIO_WritePin>
	}
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	2000021c 	.word	0x2000021c
 8002bd4:	40020400 	.word	0x40020400

08002bd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10d      	bne.n	8002c06 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002bec:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	eb1b 0301 	adds.w	r3, fp, r1
 8002bfc:	eb4c 0402 	adc.w	r4, ip, r2
 8002c00:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002c02:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	200002bc 	.word	0x200002bc
 8002c18:	200000a0 	.word	0x200000a0

08002c1c <micros>:

inline uint64_t micros()
{
 8002c1c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002c20:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <micros+0x2c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <micros+0x30>)
 8002c30:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002c34:	eb1b 0301 	adds.w	r3, fp, r1
 8002c38:	eb4c 0402 	adc.w	r4, ip, r2
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	4621      	mov	r1, r4
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8002c46:	4770      	bx	lr
 8002c48:	200002bc 	.word	0x200002bc
 8002c4c:	200000a0 	.word	0x200000a0

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c56:	e7fe      	b.n	8002c56 <Error_Handler+0x6>

08002c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c96:	2007      	movs	r0, #7
 8002c98:	f001 f8b2 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <HAL_ADC_MspInit+0xec>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d15f      	bne.n	8002d8a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_ADC_MspInit+0xf0>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	4a31      	ldr	r2, [pc, #196]	; (8002d98 <HAL_ADC_MspInit+0xf0>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_ADC_MspInit+0xf0>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_ADC_MspInit+0xf0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_ADC_MspInit+0xf0>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_ADC_MspInit+0xf0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d06:	2303      	movs	r3, #3
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	4821      	ldr	r0, [pc, #132]	; (8002d9c <HAL_ADC_MspInit+0xf4>)
 8002d16:	f001 fc45 	bl	80045a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d1c:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <HAL_ADC_MspInit+0xfc>)
 8002d1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d26:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d5e:	4810      	ldr	r0, [pc, #64]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d60:	f001 f890 	bl	8003e84 <HAL_DMA_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002d6a:	f7ff ff71 	bl	8002c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_ADC_MspInit+0xf8>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2012      	movs	r0, #18
 8002d80:	f001 f849 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d84:	2012      	movs	r0, #18
 8002d86:	f001 f862 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d8a:	bf00      	nop
 8002d8c:	3728      	adds	r7, #40	; 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40012000 	.word	0x40012000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	200002fc 	.word	0x200002fc
 8002da4:	40026410 	.word	0x40026410

08002da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <HAL_SPI_MspInit+0x94>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d133      	bne.n	8002e32 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_SPI_MspInit+0x98>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_SPI_MspInit+0x98>)
 8002dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_SPI_MspInit+0x98>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_SPI_MspInit+0x98>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <HAL_SPI_MspInit+0x98>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_SPI_MspInit+0x98>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e02:	2338      	movs	r3, #56	; 0x38
 8002e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e12:	2306      	movs	r3, #6
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4809      	ldr	r0, [pc, #36]	; (8002e44 <HAL_SPI_MspInit+0x9c>)
 8002e1e:	f001 fbc1 	bl	80045a4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	2033      	movs	r0, #51	; 0x33
 8002e28:	f000 fff5 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002e2c:	2033      	movs	r0, #51	; 0x33
 8002e2e:	f001 f80e 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40003c00 	.word	0x40003c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020400 	.word	0x40020400

08002e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_TIM_Base_MspInit+0x70>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_TIM_Base_MspInit+0x74>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_TIM_Base_MspInit+0x74>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_TIM_Base_MspInit+0x74>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002e76:	e01a      	b.n	8002eae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_TIM_Base_MspInit+0x78>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d115      	bne.n	8002eae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_TIM_Base_MspInit+0x74>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <HAL_TIM_Base_MspInit+0x74>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_TIM_Base_MspInit+0x74>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	201a      	movs	r0, #26
 8002ea4:	f000 ffb7 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ea8:	201a      	movs	r0, #26
 8002eaa:	f000 ffd0 	bl	8003e4e <HAL_NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40014800 	.word	0x40014800

08002ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <HAL_UART_MspInit+0x94>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d133      	bne.n	8002f4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_UART_MspInit+0x98>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_UART_MspInit+0x98>)
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_UART_MspInit+0x98>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_UART_MspInit+0x98>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_UART_MspInit+0x98>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_UART_MspInit+0x98>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f1e:	230c      	movs	r3, #12
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f2e:	2307      	movs	r3, #7
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	4809      	ldr	r0, [pc, #36]	; (8002f60 <HAL_UART_MspInit+0x9c>)
 8002f3a:	f001 fb33 	bl	80045a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	2026      	movs	r0, #38	; 0x26
 8002f44:	f000 ff67 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f48:	2026      	movs	r0, #38	; 0x26
 8002f4a:	f000 ff80 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40004400 	.word	0x40004400
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000

08002f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <NMI_Handler+0x4>

08002f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <MemManage_Handler+0x4>

08002f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <BusFault_Handler+0x4>

08002f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <UsageFault_Handler+0x4>

08002f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb0:	f000 f8fc 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <ADC_IRQHandler+0x10>)
 8002fbe:	f000 f958 	bl	8003272 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000274 	.word	0x20000274

08002fcc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002fd2:	f002 fcc8 	bl	8005966 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200002bc 	.word	0x200002bc

08002fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <USART2_IRQHandler+0x10>)
 8002fe6:	f003 f97d 	bl	80062e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000035c 	.word	0x2000035c

08002ff4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <SPI3_IRQHandler+0x10>)
 8002ffa:	f002 f9cf 	bl	800539c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000021c 	.word	0x2000021c

08003008 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <DMA2_Stream0_IRQHandler+0x10>)
 800300e:	f001 f861 	bl	80040d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200002fc 	.word	0x200002fc

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f003 ff46 	bl	8006edc <__errno>
 8003050:	4602      	mov	r2, r0
 8003052:	230c      	movs	r3, #12
 8003054:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20020000 	.word	0x20020000
 800307c:	00000400 	.word	0x00000400
 8003080:	200001d0 	.word	0x200001d0
 8003084:	200003a8 	.word	0x200003a8

08003088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <SystemInit+0x28>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <SystemInit+0x28>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SystemInit+0x28>)
 800309e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030a2:	609a      	str	r2, [r3, #8]
#endif
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030ba:	e003      	b.n	80030c4 <LoopCopyDataInit>

080030bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030c2:	3104      	adds	r1, #4

080030c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030cc:	d3f6      	bcc.n	80030bc <CopyDataInit>
  ldr  r2, =_sbss
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030d0:	e002      	b.n	80030d8 <LoopFillZerobss>

080030d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030d4:	f842 3b04 	str.w	r3, [r2], #4

080030d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030dc:	d3f9      	bcc.n	80030d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030de:	f7ff ffd3 	bl	8003088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030e2:	f003 ff01 	bl	8006ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030e6:	f7fe f82f 	bl	8001148 <main>
  bx  lr    
 80030ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030f0:	080089fc 	.word	0x080089fc
  ldr  r0, =_sdata
 80030f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030f8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80030fc:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003100:	200003a4 	.word	0x200003a4

08003104 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003104:	e7fe      	b.n	8003104 <DMA1_Stream0_IRQHandler>
	...

08003108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_Init+0x40>)
 8003112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <HAL_Init+0x40>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_Init+0x40>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f000 fe65 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	2000      	movs	r0, #0
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7ff fd8c 	bl	8002c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fe7d 	bl	8003e6a <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 fe45 	bl	8003e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000010 	.word	0x20000010
 80031a4:	20000018 	.word	0x20000018
 80031a8:	20000014 	.word	0x20000014

080031ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_IncTick+0x20>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_IncTick+0x24>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_IncTick+0x24>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000018 	.word	0x20000018
 80031d0:	2000039c 	.word	0x2000039c

080031d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return uwTick;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_GetTick+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	2000039c 	.word	0x2000039c

080031ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e033      	b.n	800326a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fd4c 	bl	8002ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003232:	f023 0302 	bic.w	r3, r3, #2
 8003236:	f043 0202 	orr.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fb86 	bl	8003950 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
 800325a:	e001      	b.n	8003260 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d049      	beq.n	8003348 <HAL_ADC_IRQHandler+0xd6>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d046      	beq.n	8003348 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d12b      	bne.n	8003338 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d127      	bne.n	8003338 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003300:	2b00      	cmp	r3, #0
 8003302:	d119      	bne.n	8003338 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0220 	bic.w	r2, r2, #32
 8003312:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f9af 	bl	800369c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0212 	mvn.w	r2, #18
 8003346:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d057      	beq.n	800342a <HAL_ADC_IRQHandler+0x1b8>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d054      	beq.n	800342a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d139      	bne.n	800341a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d12b      	bne.n	800341a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d124      	bne.n	800341a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11d      	bne.n	800341a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fc16 	bl	8003c4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 020c 	mvn.w	r2, #12
 8003428:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_ADC_IRQHandler+0x21a>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d014      	beq.n	800348c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10d      	bne.n	800348c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f921 	bl	80036c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f06f 0201 	mvn.w	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	bf0c      	ite	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	2300      	movne	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_ADC_IRQHandler+0x27a>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f043 0202 	orr.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0220 	mvn.w	r2, #32
 80034da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f8fb 	bl	80036d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0220 	mvn.w	r2, #32
 80034ea:	601a      	str	r2, [r3, #0]
  }
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_ADC_Start_DMA+0x1e>
 800350e:	2302      	movs	r3, #2
 8003510:	e0b1      	b.n	8003676 <HAL_ADC_Start_DMA+0x182>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d018      	beq.n	800355a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003538:	4b51      	ldr	r3, [pc, #324]	; (8003680 <HAL_ADC_Start_DMA+0x18c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_ADC_Start_DMA+0x190>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0c9a      	lsrs	r2, r3, #18
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800354c:	e002      	b.n	8003554 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	3b01      	subs	r3, #1
 8003552:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f9      	bne.n	800354e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 8085 	bne.w	8003674 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d106      	bne.n	80035b8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f023 0206 	bic.w	r2, r3, #6
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
 80035b6:	e002      	b.n	80035be <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035c6:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_ADC_Start_DMA+0x194>)
 80035c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_ADC_Start_DMA+0x198>)
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <HAL_ADC_Start_DMA+0x19c>)
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <HAL_ADC_Start_DMA+0x1a0>)
 80035e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	334c      	adds	r3, #76	; 0x4c
 8003616:	4619      	mov	r1, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f000 fce0 	bl	8003fe0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10f      	bne.n	800364c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11c      	bne.n	8003674 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e013      	b.n	8003674 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <HAL_ADC_Start_DMA+0x1a4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10e      	bne.n	8003674 <HAL_ADC_Start_DMA+0x180>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003672:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000010 	.word	0x20000010
 8003684:	431bde83 	.word	0x431bde83
 8003688:	40012300 	.word	0x40012300
 800368c:	08003b49 	.word	0x08003b49
 8003690:	08003c03 	.word	0x08003c03
 8003694:	08003c1f 	.word	0x08003c1f
 8003698:	40012000 	.word	0x40012000

0800369c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1c>
 8003704:	2302      	movs	r3, #2
 8003706:	e113      	b.n	8003930 <HAL_ADC_ConfigChannel+0x244>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b09      	cmp	r3, #9
 8003716:	d925      	bls.n	8003764 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68d9      	ldr	r1, [r3, #12]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	3b1e      	subs	r3, #30
 800372e:	2207      	movs	r2, #7
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43da      	mvns	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	400a      	ands	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68d9      	ldr	r1, [r3, #12]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	4618      	mov	r0, r3
 8003750:	4603      	mov	r3, r0
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4403      	add	r3, r0
 8003756:	3b1e      	subs	r3, #30
 8003758:	409a      	lsls	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	e022      	b.n	80037aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	2207      	movs	r2, #7
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	400a      	ands	r2, r1
 8003786:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6919      	ldr	r1, [r3, #16]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	4618      	mov	r0, r3
 800379a:	4603      	mov	r3, r0
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4403      	add	r3, r0
 80037a0:	409a      	lsls	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d824      	bhi.n	80037fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	3b05      	subs	r3, #5
 80037c4:	221f      	movs	r2, #31
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	400a      	ands	r2, r1
 80037d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	4618      	mov	r0, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	3b05      	subs	r3, #5
 80037ee:	fa00 f203 	lsl.w	r2, r0, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34
 80037fa:	e04c      	b.n	8003896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d824      	bhi.n	800384e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	3b23      	subs	r3, #35	; 0x23
 8003816:	221f      	movs	r2, #31
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43da      	mvns	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	400a      	ands	r2, r1
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	4618      	mov	r0, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	3b23      	subs	r3, #35	; 0x23
 8003840:	fa00 f203 	lsl.w	r2, r0, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
 800384c:	e023      	b.n	8003896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	3b41      	subs	r3, #65	; 0x41
 8003860:	221f      	movs	r2, #31
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	400a      	ands	r2, r1
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4618      	mov	r0, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	3b41      	subs	r3, #65	; 0x41
 800388a:	fa00 f203 	lsl.w	r2, r0, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_ADC_ConfigChannel+0x250>)
 8003898:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_ADC_ConfigChannel+0x254>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d10f      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1d8>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b12      	cmp	r3, #18
 80038aa:	d10b      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_ADC_ConfigChannel+0x254>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d12b      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x23a>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_ADC_ConfigChannel+0x258>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <HAL_ADC_ConfigChannel+0x1f4>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b11      	cmp	r3, #17
 80038de:	d122      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <HAL_ADC_ConfigChannel+0x258>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d111      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003902:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_ADC_ConfigChannel+0x25c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_ADC_ConfigChannel+0x260>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	0c9a      	lsrs	r2, r3, #18
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003918:	e002      	b.n	8003920 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3b01      	subs	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f9      	bne.n	800391a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40012300 	.word	0x40012300
 8003940:	40012000 	.word	0x40012000
 8003944:	10000012 	.word	0x10000012
 8003948:	20000010 	.word	0x20000010
 800394c:	431bde83 	.word	0x431bde83

08003950 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003958:	4b79      	ldr	r3, [pc, #484]	; (8003b40 <ADC_Init+0x1f0>)
 800395a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	431a      	orrs	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	021a      	lsls	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <ADC_Init+0x1f4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6899      	ldr	r1, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	e00f      	b.n	8003a4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0202 	bic.w	r2, r2, #2
 8003a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7e1b      	ldrb	r3, [r3, #24]
 8003a68:	005a      	lsls	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01b      	beq.n	8003ab4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	035a      	lsls	r2, r3, #13
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	e007      	b.n	8003ac4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	051a      	lsls	r2, r3, #20
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b06:	025a      	lsls	r2, r3, #9
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	029a      	lsls	r2, r3, #10
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40012300 	.word	0x40012300
 8003b44:	0f000001 	.word	0x0f000001

08003b48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d13c      	bne.n	8003bdc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d12b      	bne.n	8003bd4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d127      	bne.n	8003bd4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d006      	beq.n	8003ba0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d119      	bne.n	8003bd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0220 	bic.w	r2, r2, #32
 8003bae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f043 0201 	orr.w	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7ff fd61 	bl	800369c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bda:	e00e      	b.n	8003bfa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff fd75 	bl	80036d8 <HAL_ADC_ErrorCallback>
}
 8003bee:	e004      	b.n	8003bfa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff fd4d 	bl	80036b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2240      	movs	r2, #64	; 0x40
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f043 0204 	orr.w	r2, r3, #4
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff fd4a 	bl	80036d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 0307 	and.w	r3, r3, #7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	db0b      	blt.n	8003cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4907      	ldr	r1, [pc, #28]	; (8003cfc <__NVIC_EnableIRQ+0x38>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e100 	.word	0xe000e100

08003d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db0a      	blt.n	8003d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	490c      	ldr	r1, [pc, #48]	; (8003d4c <__NVIC_SetPriority+0x4c>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	440b      	add	r3, r1
 8003d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d28:	e00a      	b.n	8003d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4908      	ldr	r1, [pc, #32]	; (8003d50 <__NVIC_SetPriority+0x50>)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3b04      	subs	r3, #4
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	761a      	strb	r2, [r3, #24]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f1c3 0307 	rsb	r3, r3, #7
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf28      	it	cs
 8003d72:	2304      	movcs	r3, #4
 8003d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d902      	bls.n	8003d84 <NVIC_EncodePriority+0x30>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3b03      	subs	r3, #3
 8003d82:	e000      	b.n	8003d86 <NVIC_EncodePriority+0x32>
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	401a      	ands	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	43d9      	mvns	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	4313      	orrs	r3, r2
         );
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	; 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dcc:	d301      	bcc.n	8003dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <SysTick_Config+0x40>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dda:	210f      	movs	r1, #15
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f7ff ff8e 	bl	8003d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <SysTick_Config+0x40>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <SysTick_Config+0x40>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000e010 	.word	0xe000e010

08003e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff29 	bl	8003c60 <__NVIC_SetPriorityGrouping>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e28:	f7ff ff3e 	bl	8003ca8 <__NVIC_GetPriorityGrouping>
 8003e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f7ff ff8e 	bl	8003d54 <NVIC_EncodePriority>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff5d 	bl	8003d00 <__NVIC_SetPriority>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff31 	bl	8003cc4 <__NVIC_EnableIRQ>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffa2 	bl	8003dbc <SysTick_Config>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff f9a0 	bl	80031d4 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e099      	b.n	8003fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec0:	e00f      	b.n	8003ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec2:	f7ff f987 	bl	80031d4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d908      	bls.n	8003ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2203      	movs	r2, #3
 8003eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e078      	b.n	8003fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e8      	bne.n	8003ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <HAL_DMA_Init+0x158>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d107      	bne.n	8003f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	4313      	orrs	r3, r2
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d117      	bne.n	8003fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fa91 	bl	80044b0 <DMA_CheckFifoParam>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e016      	b.n	8003fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa48 	bl	8004444 <DMA_CalcBaseAndBitshift>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	223f      	movs	r2, #63	; 0x3f
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	f010803f 	.word	0xf010803f

08003fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_DMA_Start_IT+0x26>
 8004002:	2302      	movs	r3, #2
 8004004:	e040      	b.n	8004088 <HAL_DMA_Start_IT+0xa8>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d12f      	bne.n	800407a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f9da 	bl	80043e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	223f      	movs	r2, #63	; 0x3f
 800403a:	409a      	lsls	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0216 	orr.w	r2, r2, #22
 800404e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0208 	orr.w	r2, r2, #8
 8004066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e005      	b.n	8004086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004082:	2302      	movs	r3, #2
 8004084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d004      	beq.n	80040ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e00c      	b.n	80040c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2205      	movs	r2, #5
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040e0:	4b92      	ldr	r3, [pc, #584]	; (800432c <HAL_DMA_IRQHandler+0x258>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a92      	ldr	r2, [pc, #584]	; (8004330 <HAL_DMA_IRQHandler+0x25c>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0a9b      	lsrs	r3, r3, #10
 80040ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	2208      	movs	r2, #8
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01a      	beq.n	8004140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0204 	bic.w	r2, r2, #4
 8004126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	2208      	movs	r2, #8
 800412e:	409a      	lsls	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d012      	beq.n	8004176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	2201      	movs	r2, #1
 8004164:	409a      	lsls	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f043 0202 	orr.w	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	2204      	movs	r2, #4
 800417c:	409a      	lsls	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d012      	beq.n	80041ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	2204      	movs	r2, #4
 800419a:	409a      	lsls	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	2210      	movs	r2, #16
 80041b2:	409a      	lsls	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d043      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d03c      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	2210      	movs	r2, #16
 80041d0:	409a      	lsls	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d018      	beq.n	8004216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d108      	bne.n	8004204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d024      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
 8004202:	e01f      	b.n	8004244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01b      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
 8004214:	e016      	b.n	8004244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0208 	bic.w	r2, r2, #8
 8004232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	2220      	movs	r2, #32
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 808e 	beq.w	8004372 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8086 	beq.w	8004372 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	2220      	movs	r2, #32
 800426c:	409a      	lsls	r2, r3
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b05      	cmp	r3, #5
 800427c:	d136      	bne.n	80042ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0216 	bic.w	r2, r2, #22
 800428c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_DMA_IRQHandler+0x1da>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0208 	bic.w	r2, r2, #8
 80042bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	223f      	movs	r2, #63	; 0x3f
 80042c4:	409a      	lsls	r2, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d07d      	beq.n	80043de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
        }
        return;
 80042ea:	e078      	b.n	80043de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01c      	beq.n	8004334 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d108      	bne.n	800431a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	2b00      	cmp	r3, #0
 800430e:	d030      	beq.n	8004372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
 8004318:	e02b      	b.n	8004372 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d027      	beq.n	8004372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
 800432a:	e022      	b.n	8004372 <HAL_DMA_IRQHandler+0x29e>
 800432c:	20000010 	.word	0x20000010
 8004330:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0210 	bic.w	r2, r2, #16
 8004350:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	2b00      	cmp	r3, #0
 8004378:	d032      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d022      	beq.n	80043cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2205      	movs	r2, #5
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3301      	adds	r3, #1
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d307      	bcc.n	80043ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f2      	bne.n	800439e <HAL_DMA_IRQHandler+0x2ca>
 80043b8:	e000      	b.n	80043bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80043ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e000      	b.n	80043e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043de:	bf00      	nop
    }
  }
}
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop

080043e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d108      	bne.n	8004428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004426:	e007      	b.n	8004438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	60da      	str	r2, [r3, #12]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	3b10      	subs	r3, #16
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <DMA_CalcBaseAndBitshift+0x68>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d909      	bls.n	8004486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	659a      	str	r2, [r3, #88]	; 0x58
 8004484:	e007      	b.n	8004496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	aaaaaaab 	.word	0xaaaaaaab
 80044ac:	080085e0 	.word	0x080085e0

080044b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11f      	bne.n	800450a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d855      	bhi.n	800457c <DMA_CheckFifoParam+0xcc>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <DMA_CheckFifoParam+0x28>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044fb 	.word	0x080044fb
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	0800457d 	.word	0x0800457d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d045      	beq.n	8004580 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e042      	b.n	8004580 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004502:	d13f      	bne.n	8004584 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004508:	e03c      	b.n	8004584 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d121      	bne.n	8004558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d836      	bhi.n	8004588 <DMA_CheckFifoParam+0xd8>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <DMA_CheckFifoParam+0x70>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004531 	.word	0x08004531
 8004524:	08004537 	.word	0x08004537
 8004528:	08004531 	.word	0x08004531
 800452c:	08004549 	.word	0x08004549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e02f      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d024      	beq.n	800458c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004546:	e021      	b.n	800458c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004550:	d11e      	bne.n	8004590 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004556:	e01b      	b.n	8004590 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d902      	bls.n	8004564 <DMA_CheckFifoParam+0xb4>
 800455e:	2b03      	cmp	r3, #3
 8004560:	d003      	beq.n	800456a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004562:	e018      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e015      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00e      	beq.n	8004594 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      break;
 800457a:	e00b      	b.n	8004594 <DMA_CheckFifoParam+0xe4>
      break;
 800457c:	bf00      	nop
 800457e:	e00a      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004580:	bf00      	nop
 8004582:	e008      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004584:	bf00      	nop
 8004586:	e006      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004588:	bf00      	nop
 800458a:	e004      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 800458c:	bf00      	nop
 800458e:	e002      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;   
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004594:	bf00      	nop
    }
  } 
  
  return status; 
 8004596:	7bfb      	ldrb	r3, [r7, #15]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e159      	b.n	8004874 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045c0:	2201      	movs	r2, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	429a      	cmp	r2, r3
 80045da:	f040 8148 	bne.w	800486e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d00b      	beq.n	80045fe <HAL_GPIO_Init+0x5a>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d007      	beq.n	80045fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045f2:	2b11      	cmp	r3, #17
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b12      	cmp	r3, #18
 80045fc:	d130      	bne.n	8004660 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	2203      	movs	r2, #3
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004634:	2201      	movs	r2, #1
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 0201 	and.w	r2, r3, #1
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	2203      	movs	r2, #3
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d003      	beq.n	80046a0 <HAL_GPIO_Init+0xfc>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b12      	cmp	r3, #18
 800469e:	d123      	bne.n	80046e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	08da      	lsrs	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3208      	adds	r2, #8
 80046a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	220f      	movs	r2, #15
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	08da      	lsrs	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3208      	adds	r2, #8
 80046e2:	69b9      	ldr	r1, [r7, #24]
 80046e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2203      	movs	r2, #3
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0203 	and.w	r2, r3, #3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80a2 	beq.w	800486e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	4b56      	ldr	r3, [pc, #344]	; (8004888 <HAL_GPIO_Init+0x2e4>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	4a55      	ldr	r2, [pc, #340]	; (8004888 <HAL_GPIO_Init+0x2e4>)
 8004734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004738:	6453      	str	r3, [r2, #68]	; 0x44
 800473a:	4b53      	ldr	r3, [pc, #332]	; (8004888 <HAL_GPIO_Init+0x2e4>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004746:	4a51      	ldr	r2, [pc, #324]	; (800488c <HAL_GPIO_Init+0x2e8>)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a48      	ldr	r2, [pc, #288]	; (8004890 <HAL_GPIO_Init+0x2ec>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d019      	beq.n	80047a6 <HAL_GPIO_Init+0x202>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a47      	ldr	r2, [pc, #284]	; (8004894 <HAL_GPIO_Init+0x2f0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0x1fe>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a46      	ldr	r2, [pc, #280]	; (8004898 <HAL_GPIO_Init+0x2f4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00d      	beq.n	800479e <HAL_GPIO_Init+0x1fa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a45      	ldr	r2, [pc, #276]	; (800489c <HAL_GPIO_Init+0x2f8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <HAL_GPIO_Init+0x1f6>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a44      	ldr	r2, [pc, #272]	; (80048a0 <HAL_GPIO_Init+0x2fc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_GPIO_Init+0x1f2>
 8004792:	2304      	movs	r3, #4
 8004794:	e008      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 8004796:	2307      	movs	r3, #7
 8004798:	e006      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 800479a:	2303      	movs	r3, #3
 800479c:	e004      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 800479e:	2302      	movs	r3, #2
 80047a0:	e002      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 80047a6:	2300      	movs	r3, #0
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	f002 0203 	and.w	r2, r2, #3
 80047ae:	0092      	lsls	r2, r2, #2
 80047b0:	4093      	lsls	r3, r2
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b8:	4934      	ldr	r1, [pc, #208]	; (800488c <HAL_GPIO_Init+0x2e8>)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	3302      	adds	r3, #2
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <HAL_GPIO_Init+0x300>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ea:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_GPIO_Init+0x300>)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_GPIO_Init+0x300>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004814:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <HAL_GPIO_Init+0x300>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_GPIO_Init+0x300>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800483e:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <HAL_GPIO_Init+0x300>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004844:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_GPIO_Init+0x300>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004868:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <HAL_GPIO_Init+0x300>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3301      	adds	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	f67f aea2 	bls.w	80045c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800487c:	bf00      	nop
 800487e:	3724      	adds	r7, #36	; 0x24
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40023800 	.word	0x40023800
 800488c:	40013800 	.word	0x40013800
 8004890:	40020000 	.word	0x40020000
 8004894:	40020400 	.word	0x40020400
 8004898:	40020800 	.word	0x40020800
 800489c:	40020c00 	.word	0x40020c00
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40013c00 	.word	0x40013c00

080048a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	887b      	ldrh	r3, [r7, #2]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	e001      	b.n	80048ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
 80048e4:	4613      	mov	r3, r2
 80048e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048e8:	787b      	ldrb	r3, [r7, #1]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f4:	e003      	b.n	80048fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048f6:	887b      	ldrh	r3, [r7, #2]
 80048f8:	041a      	lsls	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	619a      	str	r2, [r3, #24]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e25b      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d075      	beq.n	8004a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492a:	4ba3      	ldr	r3, [pc, #652]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b04      	cmp	r3, #4
 8004934:	d00c      	beq.n	8004950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004936:	4ba0      	ldr	r3, [pc, #640]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800493e:	2b08      	cmp	r3, #8
 8004940:	d112      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b9d      	ldr	r3, [pc, #628]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b99      	ldr	r3, [pc, #612]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x108>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e236      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x74>
 8004972:	4b91      	ldr	r3, [pc, #580]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a90      	ldr	r2, [pc, #576]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x98>
 800498a:	4b8b      	ldr	r3, [pc, #556]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a8a      	ldr	r2, [pc, #552]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a87      	ldr	r2, [pc, #540]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 80049a4:	4b84      	ldr	r3, [pc, #528]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a83      	ldr	r2, [pc, #524]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b81      	ldr	r3, [pc, #516]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe fc06 	bl	80031d4 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fe fc02 	bl	80031d4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e1fb      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b76      	ldr	r3, [pc, #472]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xc0>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fe fbf2 	bl	80031d4 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fe fbee 	bl	80031d4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1e7      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0xe8>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d063      	beq.n	8004aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a22:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2e:	4b62      	ldr	r3, [pc, #392]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d11c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b5f      	ldr	r3, [pc, #380]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	4b5c      	ldr	r3, [pc, #368]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_RCC_OscConfig+0x152>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e1bb      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b56      	ldr	r3, [pc, #344]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4952      	ldr	r1, [pc, #328]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a72:	e03a      	b.n	8004aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7c:	4b4f      	ldr	r3, [pc, #316]	; (8004bbc <HAL_RCC_OscConfig+0x2b0>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fe fba7 	bl	80031d4 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fe fba3 	bl	80031d4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e19c      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	4b46      	ldr	r3, [pc, #280]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4940      	ldr	r1, [pc, #256]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
 8004abc:	e015      	b.n	8004aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004abe:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <HAL_RCC_OscConfig+0x2b0>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fe fb86 	bl	80031d4 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004acc:	f7fe fb82 	bl	80031d4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e17b      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d030      	beq.n	8004b58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afe:	4b30      	ldr	r3, [pc, #192]	; (8004bc0 <HAL_RCC_OscConfig+0x2b4>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fe fb66 	bl	80031d4 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fe fb62 	bl	80031d4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e15b      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x200>
 8004b2a:	e015      	b.n	8004b58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <HAL_RCC_OscConfig+0x2b4>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b32:	f7fe fb4f 	bl	80031d4 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3a:	f7fe fb4b 	bl	80031d4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e144      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80a0 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a0e      	ldr	r2, [pc, #56]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCC_OscConfig+0x2b8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d121      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_RCC_OscConfig+0x2b8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <HAL_RCC_OscConfig+0x2b8>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bae:	f7fe fb11 	bl	80031d4 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb4:	e011      	b.n	8004bda <HAL_RCC_OscConfig+0x2ce>
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	42470000 	.word	0x42470000
 8004bc0:	42470e80 	.word	0x42470e80
 8004bc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc8:	f7fe fb04 	bl	80031d4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0fd      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bda:	4b81      	ldr	r3, [pc, #516]	; (8004de0 <HAL_RCC_OscConfig+0x4d4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d106      	bne.n	8004bfc <HAL_RCC_OscConfig+0x2f0>
 8004bee:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4a7c      	ldr	r2, [pc, #496]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfa:	e01c      	b.n	8004c36 <HAL_RCC_OscConfig+0x32a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCC_OscConfig+0x312>
 8004c04:	4b77      	ldr	r3, [pc, #476]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c08:	4a76      	ldr	r2, [pc, #472]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c10:	4b74      	ldr	r3, [pc, #464]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	e00b      	b.n	8004c36 <HAL_RCC_OscConfig+0x32a>
 8004c1e:	4b71      	ldr	r3, [pc, #452]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a70      	ldr	r2, [pc, #448]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	4b6e      	ldr	r3, [pc, #440]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a6d      	ldr	r2, [pc, #436]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d015      	beq.n	8004c6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fe fac9 	bl	80031d4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fe fac5 	bl	80031d4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0bc      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5c:	4b61      	ldr	r3, [pc, #388]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ee      	beq.n	8004c46 <HAL_RCC_OscConfig+0x33a>
 8004c68:	e014      	b.n	8004c94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fe fab3 	bl	80031d4 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fe faaf 	bl	80031d4 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0a6      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c88:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ee      	bne.n	8004c72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9a:	4b52      	ldr	r3, [pc, #328]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4a51      	ldr	r2, [pc, #324]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8092 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb0:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d05c      	beq.n	8004d76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d141      	bne.n	8004d48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	4b48      	ldr	r3, [pc, #288]	; (8004de8 <HAL_RCC_OscConfig+0x4dc>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7fe fa83 	bl	80031d4 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd2:	f7fe fa7f 	bl	80031d4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e078      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce4:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	019b      	lsls	r3, r3, #6
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	041b      	lsls	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	4933      	ldr	r1, [pc, #204]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1a:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_RCC_OscConfig+0x4dc>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fe fa58 	bl	80031d4 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fe fa54 	bl	80031d4 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e04d      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3a:	4b2a      	ldr	r3, [pc, #168]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x41c>
 8004d46:	e045      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <HAL_RCC_OscConfig+0x4dc>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7fe fa41 	bl	80031d4 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d56:	f7fe fa3d 	bl	80031d4 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e036      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <HAL_RCC_OscConfig+0x44a>
 8004d74:	e02e      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e029      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_RCC_OscConfig+0x4d8>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d11c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d115      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004daa:	4013      	ands	r3, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d106      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40007000 	.word	0x40007000
 8004de4:	40023800 	.word	0x40023800
 8004de8:	42470060 	.word	0x42470060

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0cc      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b68      	ldr	r3, [pc, #416]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d90c      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0b8      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e40:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a58      	ldr	r2, [pc, #352]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	494d      	ldr	r1, [pc, #308]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d044      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d119      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e067      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4934      	ldr	r1, [pc, #208]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fe f97a 	bl	80031d4 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fe f976 	bl	80031d4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e04f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d20c      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e032      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4916      	ldr	r1, [pc, #88]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	490e      	ldr	r1, [pc, #56]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f72:	f000 f821 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f76:	4601      	mov	r1, r0
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	5cd3      	ldrb	r3, [r2, r3]
 8004f86:	fa21 f303 	lsr.w	r3, r1, r3
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe f8da 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	080085c8 	.word	0x080085c8
 8004fb0:	20000010 	.word	0x20000010
 8004fb4:	20000014 	.word	0x20000014

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d007      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0x32>
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d008      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x38>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f040 80b4 	bne.w	800514c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe4:	4b5e      	ldr	r3, [pc, #376]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fe6:	60bb      	str	r3, [r7, #8]
       break;
 8004fe8:	e0b3      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fea:	4b5e      	ldr	r3, [pc, #376]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004fec:	60bb      	str	r3, [r7, #8]
      break;
 8004fee:	e0b0      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff0:	4b5a      	ldr	r3, [pc, #360]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ffa:	4b58      	ldr	r3, [pc, #352]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04a      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005006:	4b55      	ldr	r3, [pc, #340]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	099b      	lsrs	r3, r3, #6
 800500c:	f04f 0400 	mov.w	r4, #0
 8005010:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	ea03 0501 	and.w	r5, r3, r1
 800501c:	ea04 0602 	and.w	r6, r4, r2
 8005020:	4629      	mov	r1, r5
 8005022:	4632      	mov	r2, r6
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	f04f 0400 	mov.w	r4, #0
 800502c:	0154      	lsls	r4, r2, #5
 800502e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005032:	014b      	lsls	r3, r1, #5
 8005034:	4619      	mov	r1, r3
 8005036:	4622      	mov	r2, r4
 8005038:	1b49      	subs	r1, r1, r5
 800503a:	eb62 0206 	sbc.w	r2, r2, r6
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	0194      	lsls	r4, r2, #6
 8005048:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800504c:	018b      	lsls	r3, r1, #6
 800504e:	1a5b      	subs	r3, r3, r1
 8005050:	eb64 0402 	sbc.w	r4, r4, r2
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	00e2      	lsls	r2, r4, #3
 800505e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005062:	00d9      	lsls	r1, r3, #3
 8005064:	460b      	mov	r3, r1
 8005066:	4614      	mov	r4, r2
 8005068:	195b      	adds	r3, r3, r5
 800506a:	eb44 0406 	adc.w	r4, r4, r6
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	0262      	lsls	r2, r4, #9
 8005078:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800507c:	0259      	lsls	r1, r3, #9
 800507e:	460b      	mov	r3, r1
 8005080:	4614      	mov	r4, r2
 8005082:	4618      	mov	r0, r3
 8005084:	4621      	mov	r1, r4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f04f 0400 	mov.w	r4, #0
 800508c:	461a      	mov	r2, r3
 800508e:	4623      	mov	r3, r4
 8005090:	f7fb feda 	bl	8000e48 <__aeabi_uldivmod>
 8005094:	4603      	mov	r3, r0
 8005096:	460c      	mov	r4, r1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e049      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509c:	4b2f      	ldr	r3, [pc, #188]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	099b      	lsrs	r3, r3, #6
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	ea03 0501 	and.w	r5, r3, r1
 80050b2:	ea04 0602 	and.w	r6, r4, r2
 80050b6:	4629      	mov	r1, r5
 80050b8:	4632      	mov	r2, r6
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	f04f 0400 	mov.w	r4, #0
 80050c2:	0154      	lsls	r4, r2, #5
 80050c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050c8:	014b      	lsls	r3, r1, #5
 80050ca:	4619      	mov	r1, r3
 80050cc:	4622      	mov	r2, r4
 80050ce:	1b49      	subs	r1, r1, r5
 80050d0:	eb62 0206 	sbc.w	r2, r2, r6
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	f04f 0400 	mov.w	r4, #0
 80050dc:	0194      	lsls	r4, r2, #6
 80050de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050e2:	018b      	lsls	r3, r1, #6
 80050e4:	1a5b      	subs	r3, r3, r1
 80050e6:	eb64 0402 	sbc.w	r4, r4, r2
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	00e2      	lsls	r2, r4, #3
 80050f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050f8:	00d9      	lsls	r1, r3, #3
 80050fa:	460b      	mov	r3, r1
 80050fc:	4614      	mov	r4, r2
 80050fe:	195b      	adds	r3, r3, r5
 8005100:	eb44 0406 	adc.w	r4, r4, r6
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	02a2      	lsls	r2, r4, #10
 800510e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005112:	0299      	lsls	r1, r3, #10
 8005114:	460b      	mov	r3, r1
 8005116:	4614      	mov	r4, r2
 8005118:	4618      	mov	r0, r3
 800511a:	4621      	mov	r1, r4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f04f 0400 	mov.w	r4, #0
 8005122:	461a      	mov	r2, r3
 8005124:	4623      	mov	r3, r4
 8005126:	f7fb fe8f 	bl	8000e48 <__aeabi_uldivmod>
 800512a:	4603      	mov	r3, r0
 800512c:	460c      	mov	r4, r1
 800512e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	3301      	adds	r3, #1
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	60bb      	str	r3, [r7, #8]
      break;
 800514a:	e002      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800514e:	60bb      	str	r3, [r7, #8]
      break;
 8005150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005152:	68bb      	ldr	r3, [r7, #8]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	007a1200 	.word	0x007a1200

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000010 	.word	0x20000010

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4601      	mov	r1, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4a03      	ldr	r2, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	fa21 f303 	lsr.w	r3, r1, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	080085d8 	.word	0x080085d8

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4601      	mov	r1, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4a03      	ldr	r2, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5cd3      	ldrb	r3, [r2, r3]
 80051c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	080085d8 	.word	0x080085d8

080051d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e056      	b.n	8005290 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fd fdd3 	bl	8002da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005218:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	ea42 0103 	orr.w	r1, r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	f003 0104 	and.w	r1, r3, #4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800527e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_SPI_Transmit_IT+0x20>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e067      	b.n	8005388 <HAL_SPI_Transmit_IT+0xf0>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Transmit_IT+0x34>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052d0:	e055      	b.n	800537e <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d002      	beq.n	80052e4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052e2:	e04c      	b.n	800537e <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2203      	movs	r2, #3
 80052e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	88fa      	ldrh	r2, [r7, #6]
 8005302:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <HAL_SPI_Transmit_IT+0xfc>)
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
 800532a:	e002      	b.n	8005332 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <HAL_SPI_Transmit_IT+0x100>)
 8005330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800533a:	d107      	bne.n	800534c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800534a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800535a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d008      	beq.n	800537c <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e000      	b.n	800537e <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 800537c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	0800561f 	.word	0x0800561f
 8005398:	080055d9 	.word	0x080055d9

0800539c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	099b      	lsrs	r3, r3, #6
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10f      	bne.n	80053e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
    return;
 80053de:	e0d8      	b.n	8005592 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_SPI_IRQHandler+0x66>
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	09db      	lsrs	r3, r3, #7
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
    return;
 8005400:	e0c7      	b.n	8005592 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10c      	bne.n	8005428 <HAL_SPI_IRQHandler+0x8c>
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	0a1b      	lsrs	r3, r3, #8
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80b5 	beq.w	8005592 <HAL_SPI_IRQHandler+0x1f6>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80ae 	beq.w	8005592 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d023      	beq.n	800548a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b03      	cmp	r3, #3
 800544c:	d011      	beq.n	8005472 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f043 0204 	orr.w	r2, r3, #4
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	e00b      	b.n	800548a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693b      	ldr	r3, [r7, #16]
        return;
 8005488:	e083      	b.n	8005592 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00c      	beq.n	80054e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	f043 0208 	orr.w	r2, r3, #8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054d8:	2300      	movs	r3, #0
 80054da:	60bb      	str	r3, [r7, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d050      	beq.n	8005590 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <HAL_SPI_IRQHandler+0x17e>
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d034      	beq.n	8005584 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0203 	bic.w	r2, r2, #3
 8005528:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d011      	beq.n	8005556 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_SPI_IRQHandler+0x1fc>)
 8005538:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fda6 	bl	8004090 <HAL_DMA_Abort_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555a:	2b00      	cmp	r3, #0
 800555c:	d016      	beq.n	800558c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <HAL_SPI_IRQHandler+0x1fc>)
 8005564:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fd90 	bl	8004090 <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005582:	e003      	b.n	800558c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f809 	bl	800559c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800558a:	e000      	b.n	800558e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800558c:	bf00      	nop
    return;
 800558e:	bf00      	nop
 8005590:	bf00      	nop
  }
}
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	080055b1 	.word	0x080055b1

0800559c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff ffe6 	bl	800559c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8d3 	bl	80057bc <SPI_CloseTx_ISR>
  }
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f8b1 	bl	80057bc <SPI_CloseTx_ISR>
  }
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005672:	e04c      	b.n	800570e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d048      	beq.n	800570e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800567c:	f7fd fdaa 	bl	80031d4 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d902      	bls.n	8005692 <SPI_WaitFlagStateUntilTimeout+0x30>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d13d      	bne.n	800570e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056aa:	d111      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b4:	d004      	beq.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d107      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d8:	d10f      	bne.n	80056fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e00f      	b.n	800572e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	429a      	cmp	r2, r3
 800572a:	d1a3      	bne.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <SPI_EndRxTxTransaction+0x7c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <SPI_EndRxTxTransaction+0x80>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	0d5b      	lsrs	r3, r3, #21
 8005750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d112      	bne.n	800578a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff77 	bl	8005662 <SPI_WaitFlagStateUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d016      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e00f      	b.n	80057aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d0f2      	beq.n	800578a <SPI_EndRxTxTransaction+0x52>
 80057a4:	e000      	b.n	80057a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80057a6:	bf00      	nop
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000010 	.word	0x20000010
 80057b8:	165e9f81 	.word	0x165e9f81

080057bc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80057c4:	4b2c      	ldr	r3, [pc, #176]	; (8005878 <SPI_CloseTx_ISR+0xbc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	; (800587c <SPI_CloseTx_ISR+0xc0>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	0a5b      	lsrs	r3, r3, #9
 80057d0:	2264      	movs	r2, #100	; 0x64
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d8:	f7fd fcfc 	bl	80031d4 <HAL_GetTick>
 80057dc:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f0:	e009      	b.n	8005806 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0eb      	beq.n	80057de <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005814:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	2164      	movs	r1, #100	; 0x64
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ff8c 	bl	8005738 <SPI_EndRxTxTransaction>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	f043 0220 	orr.w	r2, r3, #32
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff fe9b 	bl	800559c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005866:	e002      	b.n	800586e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fd f99f 	bl	8002bac <HAL_SPI_TxCpltCallback>
}
 800586e:	bf00      	nop
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000010 	.word	0x20000010
 800587c:	057619f1 	.word	0x057619f1

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e01d      	b.n	80058ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fd face 	bl	8002e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fa38 	bl	8005d34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d007      	beq.n	8005908 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0201 	orr.w	r2, r2, #1
 8005934:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d007      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d122      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d11b      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0202 	mvn.w	r2, #2
 8005992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f9a5 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 80059ae:	e005      	b.n	80059bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f997 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f9a8 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d122      	bne.n	8005a16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d11b      	bne.n	8005a16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f06f 0204 	mvn.w	r2, #4
 80059e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f97b 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 8005a02:	e005      	b.n	8005a10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f96d 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f97e 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d122      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d11b      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f06f 0208 	mvn.w	r2, #8
 8005a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f951 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 8005a56:	e005      	b.n	8005a64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f943 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f954 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d122      	bne.n	8005abe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d11b      	bne.n	8005abe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f06f 0210 	mvn.w	r2, #16
 8005a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2208      	movs	r2, #8
 8005a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f927 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 8005aaa:	e005      	b.n	8005ab8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f919 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f92a 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f06f 0201 	mvn.w	r2, #1
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7fd f877 	bl	8002bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b80      	cmp	r3, #128	; 0x80
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 faa1 	bl	8006058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d10e      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d107      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8ef 	bl	8005d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d10e      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d107      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f06f 0220 	mvn.w	r2, #32
 8005b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fa6b 	bl	8006044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_ConfigClockSource+0x18>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e0a6      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x166>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d067      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x120>
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d80b      	bhi.n	8005be2 <HAL_TIM_ConfigClockSource+0x6c>
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d073      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d802      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x62>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d06f      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005bd6:	e078      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d06c      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
 8005bdc:	2b30      	cmp	r3, #48	; 0x30
 8005bde:	d06a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005be0:	e073      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005be2:	2b70      	cmp	r3, #112	; 0x70
 8005be4:	d00d      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x8c>
 8005be6:	2b70      	cmp	r3, #112	; 0x70
 8005be8:	d804      	bhi.n	8005bf4 <HAL_TIM_ConfigClockSource+0x7e>
 8005bea:	2b50      	cmp	r3, #80	; 0x50
 8005bec:	d033      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0xe0>
 8005bee:	2b60      	cmp	r3, #96	; 0x60
 8005bf0:	d041      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005bf2:	e06a      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf8:	d066      	beq.n	8005cc8 <HAL_TIM_ConfigClockSource+0x152>
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfe:	d017      	beq.n	8005c30 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c00:	e063      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6899      	ldr	r1, [r3, #8]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f000 f989 	bl	8005f28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	609a      	str	r2, [r3, #8]
      break;
 8005c2e:	e04c      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6899      	ldr	r1, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f000 f972 	bl	8005f28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c52:	609a      	str	r2, [r3, #8]
      break;
 8005c54:	e039      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 f8e6 	bl	8005e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2150      	movs	r1, #80	; 0x50
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f93f 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 8005c74:	e029      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 f905 	bl	8005e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2160      	movs	r1, #96	; 0x60
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f92f 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 8005c94:	e019      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f000 f8c6 	bl	8005e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f91f 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 8005cb4:	e009      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f000 f916 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 8005cc6:	e000      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005cc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a34      	ldr	r2, [pc, #208]	; (8005e18 <TIM_Base_SetConfig+0xe4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00f      	beq.n	8005d6c <TIM_Base_SetConfig+0x38>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d52:	d00b      	beq.n	8005d6c <TIM_Base_SetConfig+0x38>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a31      	ldr	r2, [pc, #196]	; (8005e1c <TIM_Base_SetConfig+0xe8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <TIM_Base_SetConfig+0x38>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a30      	ldr	r2, [pc, #192]	; (8005e20 <TIM_Base_SetConfig+0xec>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_Base_SetConfig+0x38>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a2f      	ldr	r2, [pc, #188]	; (8005e24 <TIM_Base_SetConfig+0xf0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d108      	bne.n	8005d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a25      	ldr	r2, [pc, #148]	; (8005e18 <TIM_Base_SetConfig+0xe4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d01b      	beq.n	8005dbe <TIM_Base_SetConfig+0x8a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d017      	beq.n	8005dbe <TIM_Base_SetConfig+0x8a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <TIM_Base_SetConfig+0xe8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <TIM_Base_SetConfig+0x8a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <TIM_Base_SetConfig+0xec>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00f      	beq.n	8005dbe <TIM_Base_SetConfig+0x8a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a20      	ldr	r2, [pc, #128]	; (8005e24 <TIM_Base_SetConfig+0xf0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00b      	beq.n	8005dbe <TIM_Base_SetConfig+0x8a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1f      	ldr	r2, [pc, #124]	; (8005e28 <TIM_Base_SetConfig+0xf4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <TIM_Base_SetConfig+0x8a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <TIM_Base_SetConfig+0xf8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_Base_SetConfig+0x8a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <TIM_Base_SetConfig+0xfc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d108      	bne.n	8005dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <TIM_Base_SetConfig+0xe4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d103      	bne.n	8005e04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	615a      	str	r2, [r3, #20]
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40010000 	.word	0x40010000
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800
 8005e24:	40000c00 	.word	0x40000c00
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40014400 	.word	0x40014400
 8005e30:	40014800 	.word	0x40014800

08005e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f023 030a 	bic.w	r3, r3, #10
 8005e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b087      	sub	sp, #28
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0210 	bic.w	r2, r3, #16
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f043 0307 	orr.w	r3, r3, #7
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	609a      	str	r2, [r3, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	021a      	lsls	r2, r3, #8
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e050      	b.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d018      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fcc:	d013      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a18      	ldr	r2, [pc, #96]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a16      	ldr	r2, [pc, #88]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a15      	ldr	r2, [pc, #84]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10c      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	4313      	orrs	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40014000 	.word	0x40014000

08006044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e03f      	b.n	80060fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc ff16 	bl	8002ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	; 0x24
 800609c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fb97 	bl	80067e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b088      	sub	sp, #32
 800610a:	af02      	add	r7, sp, #8
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b20      	cmp	r3, #32
 8006124:	f040 8083 	bne.w	800622e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_Transmit+0x2e>
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e07b      	b.n	8006230 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_UART_Transmit+0x40>
 8006142:	2302      	movs	r3, #2
 8006144:	e074      	b.n	8006230 <HAL_UART_Transmit+0x12a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2221      	movs	r2, #33	; 0x21
 8006158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800615c:	f7fd f83a 	bl	80031d4 <HAL_GetTick>
 8006160:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	88fa      	ldrh	r2, [r7, #6]
 800616c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006176:	e042      	b.n	80061fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618e:	d122      	bne.n	80061d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2200      	movs	r2, #0
 8006198:	2180      	movs	r1, #128	; 0x80
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f9b6 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e042      	b.n	8006230 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	3302      	adds	r3, #2
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	e017      	b.n	80061fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	e013      	b.n	80061fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f993 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e01f      	b.n	8006230 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	60ba      	str	r2, [r7, #8]
 80061f6:	781a      	ldrb	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1b7      	bne.n	8006178 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2200      	movs	r2, #0
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f97a 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e000      	b.n	8006230 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800622e:	2302      	movs	r3, #2
  }
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b20      	cmp	r3, #32
 8006250:	d140      	bne.n	80062d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_UART_Receive_IT+0x26>
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e039      	b.n	80062d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UART_Receive_IT+0x38>
 800626c:	2302      	movs	r3, #2
 800626e:	e032      	b.n	80062d6 <HAL_UART_Receive_IT+0x9e>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2222      	movs	r2, #34	; 0x22
 8006294:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0220 	orr.w	r2, r2, #32
 80062ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e000      	b.n	80062d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80062d4:	2302      	movs	r3, #2
  }
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006304:	2300      	movs	r3, #0
 8006306:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10d      	bne.n	8006336 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_UART_IRQHandler+0x52>
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f9d6 	bl	80066e0 <UART_Receive_IT>
      return;
 8006334:	e0d1      	b.n	80064da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80b0 	beq.w	800649e <HAL_UART_IRQHandler+0x1ba>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <HAL_UART_IRQHandler+0x70>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80a5 	beq.w	800649e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_UART_IRQHandler+0x90>
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	f043 0201 	orr.w	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_UART_IRQHandler+0xb0>
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638c:	f043 0202 	orr.w	r2, r3, #2
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_UART_IRQHandler+0xd0>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ac:	f043 0204 	orr.w	r2, r3, #4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00f      	beq.n	80063de <HAL_UART_IRQHandler+0xfa>
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <HAL_UART_IRQHandler+0xee>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	f043 0208 	orr.w	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d078      	beq.n	80064d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_UART_IRQHandler+0x11c>
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f970 	bl	80066e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <HAL_UART_IRQHandler+0x144>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d031      	beq.n	800648c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f8b9 	bl	80065a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b40      	cmp	r3, #64	; 0x40
 800643a:	d123      	bne.n	8006484 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <HAL_UART_IRQHandler+0x1fc>)
 800645a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	4618      	mov	r0, r3
 8006462:	f7fd fe15 	bl	8004090 <HAL_DMA_Abort_IT>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d016      	beq.n	800649a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006476:	4610      	mov	r0, r2
 8006478:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647a:	e00e      	b.n	800649a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f83b 	bl	80064f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006482:	e00a      	b.n	800649a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f837 	bl	80064f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648a:	e006      	b.n	800649a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f833 	bl	80064f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006498:	e01e      	b.n	80064d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649a:	bf00      	nop
    return;
 800649c:	e01c      	b.n	80064d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d008      	beq.n	80064ba <HAL_UART_IRQHandler+0x1d6>
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f8a6 	bl	8006604 <UART_Transmit_IT>
    return;
 80064b8:	e00f      	b.n	80064da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_UART_IRQHandler+0x1f6>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f8ee 	bl	80066b0 <UART_EndTransmit_IT>
    return;
 80064d4:	bf00      	nop
 80064d6:	e000      	b.n	80064da <HAL_UART_IRQHandler+0x1f6>
    return;
 80064d8:	bf00      	nop
  }
}
 80064da:	3720      	adds	r7, #32
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	080065dd 	.word	0x080065dd

080064e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651c:	e02c      	b.n	8006578 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d028      	beq.n	8006578 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <UART_WaitOnFlagUntilTimeout+0x30>
 800652c:	f7fc fe52 	bl	80031d4 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	429a      	cmp	r2, r3
 800653a:	d21d      	bcs.n	8006578 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800654a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0201 	bic.w	r2, r2, #1
 800655a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e00f      	b.n	8006598 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4013      	ands	r3, r2
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	429a      	cmp	r2, r3
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	429a      	cmp	r2, r3
 8006594:	d0c3      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff ff7e 	bl	80064f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b21      	cmp	r3, #33	; 0x21
 8006616:	d144      	bne.n	80066a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006620:	d11a      	bne.n	8006658 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006636:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d105      	bne.n	800664c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	621a      	str	r2, [r3, #32]
 800664a:	e00e      	b.n	800666a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]
 8006656:	e008      	b.n	800666a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	1c59      	adds	r1, r3, #1
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6211      	str	r1, [r2, #32]
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29b      	uxth	r3, r3
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4619      	mov	r1, r3
 8006678:	84d1      	strh	r1, [r2, #38]	; 0x26
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10f      	bne.n	800669e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800669c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	e000      	b.n	80066a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80066a2:	2302      	movs	r3, #2
  }
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ff07 	bl	80064e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b22      	cmp	r3, #34	; 0x22
 80066f2:	d171      	bne.n	80067d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fc:	d123      	bne.n	8006746 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10e      	bne.n	800672a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	1c9a      	adds	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
 8006728:	e029      	b.n	800677e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	b29b      	uxth	r3, r3
 8006732:	b2db      	uxtb	r3, r3
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	629a      	str	r2, [r3, #40]	; 0x28
 8006744:	e01b      	b.n	800677e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6858      	ldr	r0, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	1c59      	adds	r1, r3, #1
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6291      	str	r1, [r2, #40]	; 0x28
 800675e:	b2c2      	uxtb	r2, r0
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e00c      	b.n	800677e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	1c58      	adds	r0, r3, #1
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	6288      	str	r0, [r1, #40]	; 0x28
 8006776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4619      	mov	r1, r3
 800678c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800678e:	2b00      	cmp	r3, #0
 8006790:	d120      	bne.n	80067d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0220 	bic.w	r2, r2, #32
 80067a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0201 	bic.w	r2, r2, #1
 80067c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fc f9b0 	bl	8002b30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e002      	b.n	80067da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006826:	f023 030c 	bic.w	r3, r3, #12
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	430b      	orrs	r3, r1
 8006832:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006852:	f040 818b 	bne.w	8006b6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4ac1      	ldr	r2, [pc, #772]	; (8006b60 <UART_SetConfig+0x37c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d005      	beq.n	800686c <UART_SetConfig+0x88>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4abf      	ldr	r2, [pc, #764]	; (8006b64 <UART_SetConfig+0x380>)
 8006866:	4293      	cmp	r3, r2
 8006868:	f040 80bd 	bne.w	80069e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800686c:	f7fe fc9c 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 8006870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	461d      	mov	r5, r3
 8006876:	f04f 0600 	mov.w	r6, #0
 800687a:	46a8      	mov	r8, r5
 800687c:	46b1      	mov	r9, r6
 800687e:	eb18 0308 	adds.w	r3, r8, r8
 8006882:	eb49 0409 	adc.w	r4, r9, r9
 8006886:	4698      	mov	r8, r3
 8006888:	46a1      	mov	r9, r4
 800688a:	eb18 0805 	adds.w	r8, r8, r5
 800688e:	eb49 0906 	adc.w	r9, r9, r6
 8006892:	f04f 0100 	mov.w	r1, #0
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800689e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068a6:	4688      	mov	r8, r1
 80068a8:	4691      	mov	r9, r2
 80068aa:	eb18 0005 	adds.w	r0, r8, r5
 80068ae:	eb49 0106 	adc.w	r1, r9, r6
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	461d      	mov	r5, r3
 80068b8:	f04f 0600 	mov.w	r6, #0
 80068bc:	196b      	adds	r3, r5, r5
 80068be:	eb46 0406 	adc.w	r4, r6, r6
 80068c2:	461a      	mov	r2, r3
 80068c4:	4623      	mov	r3, r4
 80068c6:	f7fa fabf 	bl	8000e48 <__aeabi_uldivmod>
 80068ca:	4603      	mov	r3, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	461a      	mov	r2, r3
 80068d0:	4ba5      	ldr	r3, [pc, #660]	; (8006b68 <UART_SetConfig+0x384>)
 80068d2:	fba3 2302 	umull	r2, r3, r3, r2
 80068d6:	095b      	lsrs	r3, r3, #5
 80068d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	461d      	mov	r5, r3
 80068e0:	f04f 0600 	mov.w	r6, #0
 80068e4:	46a9      	mov	r9, r5
 80068e6:	46b2      	mov	sl, r6
 80068e8:	eb19 0309 	adds.w	r3, r9, r9
 80068ec:	eb4a 040a 	adc.w	r4, sl, sl
 80068f0:	4699      	mov	r9, r3
 80068f2:	46a2      	mov	sl, r4
 80068f4:	eb19 0905 	adds.w	r9, r9, r5
 80068f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80068fc:	f04f 0100 	mov.w	r1, #0
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006908:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800690c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006910:	4689      	mov	r9, r1
 8006912:	4692      	mov	sl, r2
 8006914:	eb19 0005 	adds.w	r0, r9, r5
 8006918:	eb4a 0106 	adc.w	r1, sl, r6
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	461d      	mov	r5, r3
 8006922:	f04f 0600 	mov.w	r6, #0
 8006926:	196b      	adds	r3, r5, r5
 8006928:	eb46 0406 	adc.w	r4, r6, r6
 800692c:	461a      	mov	r2, r3
 800692e:	4623      	mov	r3, r4
 8006930:	f7fa fa8a 	bl	8000e48 <__aeabi_uldivmod>
 8006934:	4603      	mov	r3, r0
 8006936:	460c      	mov	r4, r1
 8006938:	461a      	mov	r2, r3
 800693a:	4b8b      	ldr	r3, [pc, #556]	; (8006b68 <UART_SetConfig+0x384>)
 800693c:	fba3 1302 	umull	r1, r3, r3, r2
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	2164      	movs	r1, #100	; 0x64
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	3332      	adds	r3, #50	; 0x32
 800694e:	4a86      	ldr	r2, [pc, #536]	; (8006b68 <UART_SetConfig+0x384>)
 8006950:	fba2 2303 	umull	r2, r3, r2, r3
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800695c:	4498      	add	r8, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	461d      	mov	r5, r3
 8006962:	f04f 0600 	mov.w	r6, #0
 8006966:	46a9      	mov	r9, r5
 8006968:	46b2      	mov	sl, r6
 800696a:	eb19 0309 	adds.w	r3, r9, r9
 800696e:	eb4a 040a 	adc.w	r4, sl, sl
 8006972:	4699      	mov	r9, r3
 8006974:	46a2      	mov	sl, r4
 8006976:	eb19 0905 	adds.w	r9, r9, r5
 800697a:	eb4a 0a06 	adc.w	sl, sl, r6
 800697e:	f04f 0100 	mov.w	r1, #0
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800698a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800698e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006992:	4689      	mov	r9, r1
 8006994:	4692      	mov	sl, r2
 8006996:	eb19 0005 	adds.w	r0, r9, r5
 800699a:	eb4a 0106 	adc.w	r1, sl, r6
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	461d      	mov	r5, r3
 80069a4:	f04f 0600 	mov.w	r6, #0
 80069a8:	196b      	adds	r3, r5, r5
 80069aa:	eb46 0406 	adc.w	r4, r6, r6
 80069ae:	461a      	mov	r2, r3
 80069b0:	4623      	mov	r3, r4
 80069b2:	f7fa fa49 	bl	8000e48 <__aeabi_uldivmod>
 80069b6:	4603      	mov	r3, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	461a      	mov	r2, r3
 80069bc:	4b6a      	ldr	r3, [pc, #424]	; (8006b68 <UART_SetConfig+0x384>)
 80069be:	fba3 1302 	umull	r1, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	2164      	movs	r1, #100	; 0x64
 80069c6:	fb01 f303 	mul.w	r3, r1, r3
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	3332      	adds	r3, #50	; 0x32
 80069d0:	4a65      	ldr	r2, [pc, #404]	; (8006b68 <UART_SetConfig+0x384>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	f003 0207 	and.w	r2, r3, #7
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4442      	add	r2, r8
 80069e2:	609a      	str	r2, [r3, #8]
 80069e4:	e26f      	b.n	8006ec6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069e6:	f7fe fbcb 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 80069ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	461d      	mov	r5, r3
 80069f0:	f04f 0600 	mov.w	r6, #0
 80069f4:	46a8      	mov	r8, r5
 80069f6:	46b1      	mov	r9, r6
 80069f8:	eb18 0308 	adds.w	r3, r8, r8
 80069fc:	eb49 0409 	adc.w	r4, r9, r9
 8006a00:	4698      	mov	r8, r3
 8006a02:	46a1      	mov	r9, r4
 8006a04:	eb18 0805 	adds.w	r8, r8, r5
 8006a08:	eb49 0906 	adc.w	r9, r9, r6
 8006a0c:	f04f 0100 	mov.w	r1, #0
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a20:	4688      	mov	r8, r1
 8006a22:	4691      	mov	r9, r2
 8006a24:	eb18 0005 	adds.w	r0, r8, r5
 8006a28:	eb49 0106 	adc.w	r1, r9, r6
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	461d      	mov	r5, r3
 8006a32:	f04f 0600 	mov.w	r6, #0
 8006a36:	196b      	adds	r3, r5, r5
 8006a38:	eb46 0406 	adc.w	r4, r6, r6
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4623      	mov	r3, r4
 8006a40:	f7fa fa02 	bl	8000e48 <__aeabi_uldivmod>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b47      	ldr	r3, [pc, #284]	; (8006b68 <UART_SetConfig+0x384>)
 8006a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	461d      	mov	r5, r3
 8006a5a:	f04f 0600 	mov.w	r6, #0
 8006a5e:	46a9      	mov	r9, r5
 8006a60:	46b2      	mov	sl, r6
 8006a62:	eb19 0309 	adds.w	r3, r9, r9
 8006a66:	eb4a 040a 	adc.w	r4, sl, sl
 8006a6a:	4699      	mov	r9, r3
 8006a6c:	46a2      	mov	sl, r4
 8006a6e:	eb19 0905 	adds.w	r9, r9, r5
 8006a72:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a76:	f04f 0100 	mov.w	r1, #0
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a8a:	4689      	mov	r9, r1
 8006a8c:	4692      	mov	sl, r2
 8006a8e:	eb19 0005 	adds.w	r0, r9, r5
 8006a92:	eb4a 0106 	adc.w	r1, sl, r6
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	461d      	mov	r5, r3
 8006a9c:	f04f 0600 	mov.w	r6, #0
 8006aa0:	196b      	adds	r3, r5, r5
 8006aa2:	eb46 0406 	adc.w	r4, r6, r6
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	f7fa f9cd 	bl	8000e48 <__aeabi_uldivmod>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <UART_SetConfig+0x384>)
 8006ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	2164      	movs	r1, #100	; 0x64
 8006abe:	fb01 f303 	mul.w	r3, r1, r3
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	3332      	adds	r3, #50	; 0x32
 8006ac8:	4a27      	ldr	r2, [pc, #156]	; (8006b68 <UART_SetConfig+0x384>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ad6:	4498      	add	r8, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	461d      	mov	r5, r3
 8006adc:	f04f 0600 	mov.w	r6, #0
 8006ae0:	46a9      	mov	r9, r5
 8006ae2:	46b2      	mov	sl, r6
 8006ae4:	eb19 0309 	adds.w	r3, r9, r9
 8006ae8:	eb4a 040a 	adc.w	r4, sl, sl
 8006aec:	4699      	mov	r9, r3
 8006aee:	46a2      	mov	sl, r4
 8006af0:	eb19 0905 	adds.w	r9, r9, r5
 8006af4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006af8:	f04f 0100 	mov.w	r1, #0
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	4692      	mov	sl, r2
 8006b10:	eb19 0005 	adds.w	r0, r9, r5
 8006b14:	eb4a 0106 	adc.w	r1, sl, r6
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	f04f 0600 	mov.w	r6, #0
 8006b22:	196b      	adds	r3, r5, r5
 8006b24:	eb46 0406 	adc.w	r4, r6, r6
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	f7fa f98c 	bl	8000e48 <__aeabi_uldivmod>
 8006b30:	4603      	mov	r3, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <UART_SetConfig+0x384>)
 8006b38:	fba3 1302 	umull	r1, r3, r3, r2
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	2164      	movs	r1, #100	; 0x64
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	3332      	adds	r3, #50	; 0x32
 8006b4a:	4a07      	ldr	r2, [pc, #28]	; (8006b68 <UART_SetConfig+0x384>)
 8006b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	f003 0207 	and.w	r2, r3, #7
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4442      	add	r2, r8
 8006b5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b5e:	e1b2      	b.n	8006ec6 <UART_SetConfig+0x6e2>
 8006b60:	40011000 	.word	0x40011000
 8006b64:	40011400 	.word	0x40011400
 8006b68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4ad7      	ldr	r2, [pc, #860]	; (8006ed0 <UART_SetConfig+0x6ec>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d005      	beq.n	8006b82 <UART_SetConfig+0x39e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4ad6      	ldr	r2, [pc, #856]	; (8006ed4 <UART_SetConfig+0x6f0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	f040 80d1 	bne.w	8006d24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b82:	f7fe fb11 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 8006b86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	469a      	mov	sl, r3
 8006b8c:	f04f 0b00 	mov.w	fp, #0
 8006b90:	46d0      	mov	r8, sl
 8006b92:	46d9      	mov	r9, fp
 8006b94:	eb18 0308 	adds.w	r3, r8, r8
 8006b98:	eb49 0409 	adc.w	r4, r9, r9
 8006b9c:	4698      	mov	r8, r3
 8006b9e:	46a1      	mov	r9, r4
 8006ba0:	eb18 080a 	adds.w	r8, r8, sl
 8006ba4:	eb49 090b 	adc.w	r9, r9, fp
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bbc:	4688      	mov	r8, r1
 8006bbe:	4691      	mov	r9, r2
 8006bc0:	eb1a 0508 	adds.w	r5, sl, r8
 8006bc4:	eb4b 0609 	adc.w	r6, fp, r9
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	f04f 0400 	mov.w	r4, #0
 8006bda:	0094      	lsls	r4, r2, #2
 8006bdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006be0:	008b      	lsls	r3, r1, #2
 8006be2:	461a      	mov	r2, r3
 8006be4:	4623      	mov	r3, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	4631      	mov	r1, r6
 8006bea:	f7fa f92d 	bl	8000e48 <__aeabi_uldivmod>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4bb8      	ldr	r3, [pc, #736]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	469b      	mov	fp, r3
 8006c04:	f04f 0c00 	mov.w	ip, #0
 8006c08:	46d9      	mov	r9, fp
 8006c0a:	46e2      	mov	sl, ip
 8006c0c:	eb19 0309 	adds.w	r3, r9, r9
 8006c10:	eb4a 040a 	adc.w	r4, sl, sl
 8006c14:	4699      	mov	r9, r3
 8006c16:	46a2      	mov	sl, r4
 8006c18:	eb19 090b 	adds.w	r9, r9, fp
 8006c1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c20:	f04f 0100 	mov.w	r1, #0
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c34:	4689      	mov	r9, r1
 8006c36:	4692      	mov	sl, r2
 8006c38:	eb1b 0509 	adds.w	r5, fp, r9
 8006c3c:	eb4c 060a 	adc.w	r6, ip, sl
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4619      	mov	r1, r3
 8006c46:	f04f 0200 	mov.w	r2, #0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	f04f 0400 	mov.w	r4, #0
 8006c52:	0094      	lsls	r4, r2, #2
 8006c54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c58:	008b      	lsls	r3, r1, #2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	4631      	mov	r1, r6
 8006c62:	f7fa f8f1 	bl	8000e48 <__aeabi_uldivmod>
 8006c66:	4603      	mov	r3, r0
 8006c68:	460c      	mov	r4, r1
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4b9a      	ldr	r3, [pc, #616]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	2164      	movs	r1, #100	; 0x64
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	3332      	adds	r3, #50	; 0x32
 8006c80:	4a95      	ldr	r2, [pc, #596]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c8c:	4498      	add	r8, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	469b      	mov	fp, r3
 8006c92:	f04f 0c00 	mov.w	ip, #0
 8006c96:	46d9      	mov	r9, fp
 8006c98:	46e2      	mov	sl, ip
 8006c9a:	eb19 0309 	adds.w	r3, r9, r9
 8006c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8006ca2:	4699      	mov	r9, r3
 8006ca4:	46a2      	mov	sl, r4
 8006ca6:	eb19 090b 	adds.w	r9, r9, fp
 8006caa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cae:	f04f 0100 	mov.w	r1, #0
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cc2:	4689      	mov	r9, r1
 8006cc4:	4692      	mov	sl, r2
 8006cc6:	eb1b 0509 	adds.w	r5, fp, r9
 8006cca:	eb4c 060a 	adc.w	r6, ip, sl
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	f04f 0400 	mov.w	r4, #0
 8006ce0:	0094      	lsls	r4, r2, #2
 8006ce2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ce6:	008b      	lsls	r3, r1, #2
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4623      	mov	r3, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	4631      	mov	r1, r6
 8006cf0:	f7fa f8aa 	bl	8000e48 <__aeabi_uldivmod>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b77      	ldr	r3, [pc, #476]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8006d00:	095b      	lsrs	r3, r3, #5
 8006d02:	2164      	movs	r1, #100	; 0x64
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	3332      	adds	r3, #50	; 0x32
 8006d0e:	4a72      	ldr	r2, [pc, #456]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006d10:	fba2 2303 	umull	r2, r3, r2, r3
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	f003 020f 	and.w	r2, r3, #15
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4442      	add	r2, r8
 8006d20:	609a      	str	r2, [r3, #8]
 8006d22:	e0d0      	b.n	8006ec6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d24:	f7fe fa2c 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8006d28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	469a      	mov	sl, r3
 8006d2e:	f04f 0b00 	mov.w	fp, #0
 8006d32:	46d0      	mov	r8, sl
 8006d34:	46d9      	mov	r9, fp
 8006d36:	eb18 0308 	adds.w	r3, r8, r8
 8006d3a:	eb49 0409 	adc.w	r4, r9, r9
 8006d3e:	4698      	mov	r8, r3
 8006d40:	46a1      	mov	r9, r4
 8006d42:	eb18 080a 	adds.w	r8, r8, sl
 8006d46:	eb49 090b 	adc.w	r9, r9, fp
 8006d4a:	f04f 0100 	mov.w	r1, #0
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d5e:	4688      	mov	r8, r1
 8006d60:	4691      	mov	r9, r2
 8006d62:	eb1a 0508 	adds.w	r5, sl, r8
 8006d66:	eb4b 0609 	adc.w	r6, fp, r9
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	f04f 0400 	mov.w	r4, #0
 8006d7c:	0094      	lsls	r4, r2, #2
 8006d7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d82:	008b      	lsls	r3, r1, #2
 8006d84:	461a      	mov	r2, r3
 8006d86:	4623      	mov	r3, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	f7fa f85c 	bl	8000e48 <__aeabi_uldivmod>
 8006d90:	4603      	mov	r3, r0
 8006d92:	460c      	mov	r4, r1
 8006d94:	461a      	mov	r2, r3
 8006d96:	4b50      	ldr	r3, [pc, #320]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006d98:	fba3 2302 	umull	r2, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	469b      	mov	fp, r3
 8006da6:	f04f 0c00 	mov.w	ip, #0
 8006daa:	46d9      	mov	r9, fp
 8006dac:	46e2      	mov	sl, ip
 8006dae:	eb19 0309 	adds.w	r3, r9, r9
 8006db2:	eb4a 040a 	adc.w	r4, sl, sl
 8006db6:	4699      	mov	r9, r3
 8006db8:	46a2      	mov	sl, r4
 8006dba:	eb19 090b 	adds.w	r9, r9, fp
 8006dbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dc2:	f04f 0100 	mov.w	r1, #0
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dd6:	4689      	mov	r9, r1
 8006dd8:	4692      	mov	sl, r2
 8006dda:	eb1b 0509 	adds.w	r5, fp, r9
 8006dde:	eb4c 060a 	adc.w	r6, ip, sl
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	f04f 0400 	mov.w	r4, #0
 8006df4:	0094      	lsls	r4, r2, #2
 8006df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006dfa:	008b      	lsls	r3, r1, #2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4623      	mov	r3, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	4631      	mov	r1, r6
 8006e04:	f7fa f820 	bl	8000e48 <__aeabi_uldivmod>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4b32      	ldr	r3, [pc, #200]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006e10:	fba3 1302 	umull	r1, r3, r3, r2
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	2164      	movs	r1, #100	; 0x64
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	3332      	adds	r3, #50	; 0x32
 8006e22:	4a2d      	ldr	r2, [pc, #180]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e2e:	4498      	add	r8, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	469b      	mov	fp, r3
 8006e34:	f04f 0c00 	mov.w	ip, #0
 8006e38:	46d9      	mov	r9, fp
 8006e3a:	46e2      	mov	sl, ip
 8006e3c:	eb19 0309 	adds.w	r3, r9, r9
 8006e40:	eb4a 040a 	adc.w	r4, sl, sl
 8006e44:	4699      	mov	r9, r3
 8006e46:	46a2      	mov	sl, r4
 8006e48:	eb19 090b 	adds.w	r9, r9, fp
 8006e4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e50:	f04f 0100 	mov.w	r1, #0
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e64:	4689      	mov	r9, r1
 8006e66:	4692      	mov	sl, r2
 8006e68:	eb1b 0509 	adds.w	r5, fp, r9
 8006e6c:	eb4c 060a 	adc.w	r6, ip, sl
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	4619      	mov	r1, r3
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	f04f 0400 	mov.w	r4, #0
 8006e82:	0094      	lsls	r4, r2, #2
 8006e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e88:	008b      	lsls	r3, r1, #2
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	4631      	mov	r1, r6
 8006e92:	f7f9 ffd9 	bl	8000e48 <__aeabi_uldivmod>
 8006e96:	4603      	mov	r3, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	2164      	movs	r1, #100	; 0x64
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	3332      	adds	r3, #50	; 0x32
 8006eb0:	4a09      	ldr	r2, [pc, #36]	; (8006ed8 <UART_SetConfig+0x6f4>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4442      	add	r2, r8
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	e7ff      	b.n	8006ec6 <UART_SetConfig+0x6e2>
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	40011000 	.word	0x40011000
 8006ed4:	40011400 	.word	0x40011400
 8006ed8:	51eb851f 	.word	0x51eb851f

08006edc <__errno>:
 8006edc:	4b01      	ldr	r3, [pc, #4]	; (8006ee4 <__errno+0x8>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	2000001c 	.word	0x2000001c

08006ee8 <__libc_init_array>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0d      	ldr	r6, [pc, #52]	; (8006f20 <__libc_init_array+0x38>)
 8006eec:	4c0d      	ldr	r4, [pc, #52]	; (8006f24 <__libc_init_array+0x3c>)
 8006eee:	1ba4      	subs	r4, r4, r6
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	2500      	movs	r5, #0
 8006ef4:	42a5      	cmp	r5, r4
 8006ef6:	d109      	bne.n	8006f0c <__libc_init_array+0x24>
 8006ef8:	4e0b      	ldr	r6, [pc, #44]	; (8006f28 <__libc_init_array+0x40>)
 8006efa:	4c0c      	ldr	r4, [pc, #48]	; (8006f2c <__libc_init_array+0x44>)
 8006efc:	f001 f974 	bl	80081e8 <_init>
 8006f00:	1ba4      	subs	r4, r4, r6
 8006f02:	10a4      	asrs	r4, r4, #2
 8006f04:	2500      	movs	r5, #0
 8006f06:	42a5      	cmp	r5, r4
 8006f08:	d105      	bne.n	8006f16 <__libc_init_array+0x2e>
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f10:	4798      	blx	r3
 8006f12:	3501      	adds	r5, #1
 8006f14:	e7ee      	b.n	8006ef4 <__libc_init_array+0xc>
 8006f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f1a:	4798      	blx	r3
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	e7f2      	b.n	8006f06 <__libc_init_array+0x1e>
 8006f20:	080089f4 	.word	0x080089f4
 8006f24:	080089f4 	.word	0x080089f4
 8006f28:	080089f4 	.word	0x080089f4
 8006f2c:	080089f8 	.word	0x080089f8

08006f30 <memcpy>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	1e43      	subs	r3, r0, #1
 8006f34:	440a      	add	r2, r1
 8006f36:	4291      	cmp	r1, r2
 8006f38:	d100      	bne.n	8006f3c <memcpy+0xc>
 8006f3a:	bd10      	pop	{r4, pc}
 8006f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f44:	e7f7      	b.n	8006f36 <memcpy+0x6>

08006f46 <memset>:
 8006f46:	4402      	add	r2, r0
 8006f48:	4603      	mov	r3, r0
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d100      	bne.n	8006f50 <memset+0xa>
 8006f4e:	4770      	bx	lr
 8006f50:	f803 1b01 	strb.w	r1, [r3], #1
 8006f54:	e7f9      	b.n	8006f4a <memset+0x4>
	...

08006f58 <siprintf>:
 8006f58:	b40e      	push	{r1, r2, r3}
 8006f5a:	b500      	push	{lr}
 8006f5c:	b09c      	sub	sp, #112	; 0x70
 8006f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f60:	9002      	str	r0, [sp, #8]
 8006f62:	9006      	str	r0, [sp, #24]
 8006f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f68:	4809      	ldr	r0, [pc, #36]	; (8006f90 <siprintf+0x38>)
 8006f6a:	9107      	str	r1, [sp, #28]
 8006f6c:	9104      	str	r1, [sp, #16]
 8006f6e:	4909      	ldr	r1, [pc, #36]	; (8006f94 <siprintf+0x3c>)
 8006f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f74:	9105      	str	r1, [sp, #20]
 8006f76:	6800      	ldr	r0, [r0, #0]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	a902      	add	r1, sp, #8
 8006f7c:	f000 f866 	bl	800704c <_svfiprintf_r>
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	b01c      	add	sp, #112	; 0x70
 8006f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f8c:	b003      	add	sp, #12
 8006f8e:	4770      	bx	lr
 8006f90:	2000001c 	.word	0x2000001c
 8006f94:	ffff0208 	.word	0xffff0208

08006f98 <__ssputs_r>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	688e      	ldr	r6, [r1, #8]
 8006f9e:	429e      	cmp	r6, r3
 8006fa0:	4682      	mov	sl, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4690      	mov	r8, r2
 8006fa6:	4699      	mov	r9, r3
 8006fa8:	d837      	bhi.n	800701a <__ssputs_r+0x82>
 8006faa:	898a      	ldrh	r2, [r1, #12]
 8006fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fb0:	d031      	beq.n	8007016 <__ssputs_r+0x7e>
 8006fb2:	6825      	ldr	r5, [r4, #0]
 8006fb4:	6909      	ldr	r1, [r1, #16]
 8006fb6:	1a6f      	subs	r7, r5, r1
 8006fb8:	6965      	ldr	r5, [r4, #20]
 8006fba:	2302      	movs	r3, #2
 8006fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fc4:	f109 0301 	add.w	r3, r9, #1
 8006fc8:	443b      	add	r3, r7
 8006fca:	429d      	cmp	r5, r3
 8006fcc:	bf38      	it	cc
 8006fce:	461d      	movcc	r5, r3
 8006fd0:	0553      	lsls	r3, r2, #21
 8006fd2:	d530      	bpl.n	8007036 <__ssputs_r+0x9e>
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f000 fb21 	bl	800761c <_malloc_r>
 8006fda:	4606      	mov	r6, r0
 8006fdc:	b950      	cbnz	r0, 8006ff4 <__ssputs_r+0x5c>
 8006fde:	230c      	movs	r3, #12
 8006fe0:	f8ca 3000 	str.w	r3, [sl]
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff4:	463a      	mov	r2, r7
 8006ff6:	6921      	ldr	r1, [r4, #16]
 8006ff8:	f7ff ff9a 	bl	8006f30 <memcpy>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	6126      	str	r6, [r4, #16]
 800700a:	6165      	str	r5, [r4, #20]
 800700c:	443e      	add	r6, r7
 800700e:	1bed      	subs	r5, r5, r7
 8007010:	6026      	str	r6, [r4, #0]
 8007012:	60a5      	str	r5, [r4, #8]
 8007014:	464e      	mov	r6, r9
 8007016:	454e      	cmp	r6, r9
 8007018:	d900      	bls.n	800701c <__ssputs_r+0x84>
 800701a:	464e      	mov	r6, r9
 800701c:	4632      	mov	r2, r6
 800701e:	4641      	mov	r1, r8
 8007020:	6820      	ldr	r0, [r4, #0]
 8007022:	f000 fa93 	bl	800754c <memmove>
 8007026:	68a3      	ldr	r3, [r4, #8]
 8007028:	1b9b      	subs	r3, r3, r6
 800702a:	60a3      	str	r3, [r4, #8]
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	441e      	add	r6, r3
 8007030:	6026      	str	r6, [r4, #0]
 8007032:	2000      	movs	r0, #0
 8007034:	e7dc      	b.n	8006ff0 <__ssputs_r+0x58>
 8007036:	462a      	mov	r2, r5
 8007038:	f000 fb4a 	bl	80076d0 <_realloc_r>
 800703c:	4606      	mov	r6, r0
 800703e:	2800      	cmp	r0, #0
 8007040:	d1e2      	bne.n	8007008 <__ssputs_r+0x70>
 8007042:	6921      	ldr	r1, [r4, #16]
 8007044:	4650      	mov	r0, sl
 8007046:	f000 fa9b 	bl	8007580 <_free_r>
 800704a:	e7c8      	b.n	8006fde <__ssputs_r+0x46>

0800704c <_svfiprintf_r>:
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	461d      	mov	r5, r3
 8007052:	898b      	ldrh	r3, [r1, #12]
 8007054:	061f      	lsls	r7, r3, #24
 8007056:	b09d      	sub	sp, #116	; 0x74
 8007058:	4680      	mov	r8, r0
 800705a:	460c      	mov	r4, r1
 800705c:	4616      	mov	r6, r2
 800705e:	d50f      	bpl.n	8007080 <_svfiprintf_r+0x34>
 8007060:	690b      	ldr	r3, [r1, #16]
 8007062:	b96b      	cbnz	r3, 8007080 <_svfiprintf_r+0x34>
 8007064:	2140      	movs	r1, #64	; 0x40
 8007066:	f000 fad9 	bl	800761c <_malloc_r>
 800706a:	6020      	str	r0, [r4, #0]
 800706c:	6120      	str	r0, [r4, #16]
 800706e:	b928      	cbnz	r0, 800707c <_svfiprintf_r+0x30>
 8007070:	230c      	movs	r3, #12
 8007072:	f8c8 3000 	str.w	r3, [r8]
 8007076:	f04f 30ff 	mov.w	r0, #4294967295
 800707a:	e0c8      	b.n	800720e <_svfiprintf_r+0x1c2>
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	6163      	str	r3, [r4, #20]
 8007080:	2300      	movs	r3, #0
 8007082:	9309      	str	r3, [sp, #36]	; 0x24
 8007084:	2320      	movs	r3, #32
 8007086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800708a:	2330      	movs	r3, #48	; 0x30
 800708c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007090:	9503      	str	r5, [sp, #12]
 8007092:	f04f 0b01 	mov.w	fp, #1
 8007096:	4637      	mov	r7, r6
 8007098:	463d      	mov	r5, r7
 800709a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800709e:	b10b      	cbz	r3, 80070a4 <_svfiprintf_r+0x58>
 80070a0:	2b25      	cmp	r3, #37	; 0x25
 80070a2:	d13e      	bne.n	8007122 <_svfiprintf_r+0xd6>
 80070a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80070a8:	d00b      	beq.n	80070c2 <_svfiprintf_r+0x76>
 80070aa:	4653      	mov	r3, sl
 80070ac:	4632      	mov	r2, r6
 80070ae:	4621      	mov	r1, r4
 80070b0:	4640      	mov	r0, r8
 80070b2:	f7ff ff71 	bl	8006f98 <__ssputs_r>
 80070b6:	3001      	adds	r0, #1
 80070b8:	f000 80a4 	beq.w	8007204 <_svfiprintf_r+0x1b8>
 80070bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070be:	4453      	add	r3, sl
 80070c0:	9309      	str	r3, [sp, #36]	; 0x24
 80070c2:	783b      	ldrb	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 809d 	beq.w	8007204 <_svfiprintf_r+0x1b8>
 80070ca:	2300      	movs	r3, #0
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070dc:	931a      	str	r3, [sp, #104]	; 0x68
 80070de:	462f      	mov	r7, r5
 80070e0:	2205      	movs	r2, #5
 80070e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070e6:	4850      	ldr	r0, [pc, #320]	; (8007228 <_svfiprintf_r+0x1dc>)
 80070e8:	f7f9 f882 	bl	80001f0 <memchr>
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	b9d0      	cbnz	r0, 8007126 <_svfiprintf_r+0xda>
 80070f0:	06d9      	lsls	r1, r3, #27
 80070f2:	bf44      	itt	mi
 80070f4:	2220      	movmi	r2, #32
 80070f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070fa:	071a      	lsls	r2, r3, #28
 80070fc:	bf44      	itt	mi
 80070fe:	222b      	movmi	r2, #43	; 0x2b
 8007100:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007104:	782a      	ldrb	r2, [r5, #0]
 8007106:	2a2a      	cmp	r2, #42	; 0x2a
 8007108:	d015      	beq.n	8007136 <_svfiprintf_r+0xea>
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	462f      	mov	r7, r5
 800710e:	2000      	movs	r0, #0
 8007110:	250a      	movs	r5, #10
 8007112:	4639      	mov	r1, r7
 8007114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007118:	3b30      	subs	r3, #48	; 0x30
 800711a:	2b09      	cmp	r3, #9
 800711c:	d94d      	bls.n	80071ba <_svfiprintf_r+0x16e>
 800711e:	b1b8      	cbz	r0, 8007150 <_svfiprintf_r+0x104>
 8007120:	e00f      	b.n	8007142 <_svfiprintf_r+0xf6>
 8007122:	462f      	mov	r7, r5
 8007124:	e7b8      	b.n	8007098 <_svfiprintf_r+0x4c>
 8007126:	4a40      	ldr	r2, [pc, #256]	; (8007228 <_svfiprintf_r+0x1dc>)
 8007128:	1a80      	subs	r0, r0, r2
 800712a:	fa0b f000 	lsl.w	r0, fp, r0
 800712e:	4318      	orrs	r0, r3
 8007130:	9004      	str	r0, [sp, #16]
 8007132:	463d      	mov	r5, r7
 8007134:	e7d3      	b.n	80070de <_svfiprintf_r+0x92>
 8007136:	9a03      	ldr	r2, [sp, #12]
 8007138:	1d11      	adds	r1, r2, #4
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	9103      	str	r1, [sp, #12]
 800713e:	2a00      	cmp	r2, #0
 8007140:	db01      	blt.n	8007146 <_svfiprintf_r+0xfa>
 8007142:	9207      	str	r2, [sp, #28]
 8007144:	e004      	b.n	8007150 <_svfiprintf_r+0x104>
 8007146:	4252      	negs	r2, r2
 8007148:	f043 0302 	orr.w	r3, r3, #2
 800714c:	9207      	str	r2, [sp, #28]
 800714e:	9304      	str	r3, [sp, #16]
 8007150:	783b      	ldrb	r3, [r7, #0]
 8007152:	2b2e      	cmp	r3, #46	; 0x2e
 8007154:	d10c      	bne.n	8007170 <_svfiprintf_r+0x124>
 8007156:	787b      	ldrb	r3, [r7, #1]
 8007158:	2b2a      	cmp	r3, #42	; 0x2a
 800715a:	d133      	bne.n	80071c4 <_svfiprintf_r+0x178>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	9203      	str	r2, [sp, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfb8      	it	lt
 8007168:	f04f 33ff 	movlt.w	r3, #4294967295
 800716c:	3702      	adds	r7, #2
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	4d2e      	ldr	r5, [pc, #184]	; (800722c <_svfiprintf_r+0x1e0>)
 8007172:	7839      	ldrb	r1, [r7, #0]
 8007174:	2203      	movs	r2, #3
 8007176:	4628      	mov	r0, r5
 8007178:	f7f9 f83a 	bl	80001f0 <memchr>
 800717c:	b138      	cbz	r0, 800718e <_svfiprintf_r+0x142>
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	1b40      	subs	r0, r0, r5
 8007182:	fa03 f000 	lsl.w	r0, r3, r0
 8007186:	9b04      	ldr	r3, [sp, #16]
 8007188:	4303      	orrs	r3, r0
 800718a:	3701      	adds	r7, #1
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	7839      	ldrb	r1, [r7, #0]
 8007190:	4827      	ldr	r0, [pc, #156]	; (8007230 <_svfiprintf_r+0x1e4>)
 8007192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007196:	2206      	movs	r2, #6
 8007198:	1c7e      	adds	r6, r7, #1
 800719a:	f7f9 f829 	bl	80001f0 <memchr>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d038      	beq.n	8007214 <_svfiprintf_r+0x1c8>
 80071a2:	4b24      	ldr	r3, [pc, #144]	; (8007234 <_svfiprintf_r+0x1e8>)
 80071a4:	bb13      	cbnz	r3, 80071ec <_svfiprintf_r+0x1a0>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	3307      	adds	r3, #7
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	3308      	adds	r3, #8
 80071b0:	9303      	str	r3, [sp, #12]
 80071b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b4:	444b      	add	r3, r9
 80071b6:	9309      	str	r3, [sp, #36]	; 0x24
 80071b8:	e76d      	b.n	8007096 <_svfiprintf_r+0x4a>
 80071ba:	fb05 3202 	mla	r2, r5, r2, r3
 80071be:	2001      	movs	r0, #1
 80071c0:	460f      	mov	r7, r1
 80071c2:	e7a6      	b.n	8007112 <_svfiprintf_r+0xc6>
 80071c4:	2300      	movs	r3, #0
 80071c6:	3701      	adds	r7, #1
 80071c8:	9305      	str	r3, [sp, #20]
 80071ca:	4619      	mov	r1, r3
 80071cc:	250a      	movs	r5, #10
 80071ce:	4638      	mov	r0, r7
 80071d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d4:	3a30      	subs	r2, #48	; 0x30
 80071d6:	2a09      	cmp	r2, #9
 80071d8:	d903      	bls.n	80071e2 <_svfiprintf_r+0x196>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0c8      	beq.n	8007170 <_svfiprintf_r+0x124>
 80071de:	9105      	str	r1, [sp, #20]
 80071e0:	e7c6      	b.n	8007170 <_svfiprintf_r+0x124>
 80071e2:	fb05 2101 	mla	r1, r5, r1, r2
 80071e6:	2301      	movs	r3, #1
 80071e8:	4607      	mov	r7, r0
 80071ea:	e7f0      	b.n	80071ce <_svfiprintf_r+0x182>
 80071ec:	ab03      	add	r3, sp, #12
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	4622      	mov	r2, r4
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <_svfiprintf_r+0x1ec>)
 80071f4:	a904      	add	r1, sp, #16
 80071f6:	4640      	mov	r0, r8
 80071f8:	f3af 8000 	nop.w
 80071fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007200:	4681      	mov	r9, r0
 8007202:	d1d6      	bne.n	80071b2 <_svfiprintf_r+0x166>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	065b      	lsls	r3, r3, #25
 8007208:	f53f af35 	bmi.w	8007076 <_svfiprintf_r+0x2a>
 800720c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720e:	b01d      	add	sp, #116	; 0x74
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007214:	ab03      	add	r3, sp, #12
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4622      	mov	r2, r4
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <_svfiprintf_r+0x1ec>)
 800721c:	a904      	add	r1, sp, #16
 800721e:	4640      	mov	r0, r8
 8007220:	f000 f882 	bl	8007328 <_printf_i>
 8007224:	e7ea      	b.n	80071fc <_svfiprintf_r+0x1b0>
 8007226:	bf00      	nop
 8007228:	080085e8 	.word	0x080085e8
 800722c:	080085ee 	.word	0x080085ee
 8007230:	080085f2 	.word	0x080085f2
 8007234:	00000000 	.word	0x00000000
 8007238:	08006f99 	.word	0x08006f99

0800723c <_printf_common>:
 800723c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	4691      	mov	r9, r2
 8007242:	461f      	mov	r7, r3
 8007244:	688a      	ldr	r2, [r1, #8]
 8007246:	690b      	ldr	r3, [r1, #16]
 8007248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800724c:	4293      	cmp	r3, r2
 800724e:	bfb8      	it	lt
 8007250:	4613      	movlt	r3, r2
 8007252:	f8c9 3000 	str.w	r3, [r9]
 8007256:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800725a:	4606      	mov	r6, r0
 800725c:	460c      	mov	r4, r1
 800725e:	b112      	cbz	r2, 8007266 <_printf_common+0x2a>
 8007260:	3301      	adds	r3, #1
 8007262:	f8c9 3000 	str.w	r3, [r9]
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	0699      	lsls	r1, r3, #26
 800726a:	bf42      	ittt	mi
 800726c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007270:	3302      	addmi	r3, #2
 8007272:	f8c9 3000 	strmi.w	r3, [r9]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	f015 0506 	ands.w	r5, r5, #6
 800727c:	d107      	bne.n	800728e <_printf_common+0x52>
 800727e:	f104 0a19 	add.w	sl, r4, #25
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	f8d9 2000 	ldr.w	r2, [r9]
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	42ab      	cmp	r3, r5
 800728c:	dc28      	bgt.n	80072e0 <_printf_common+0xa4>
 800728e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	3300      	adds	r3, #0
 8007296:	bf18      	it	ne
 8007298:	2301      	movne	r3, #1
 800729a:	0692      	lsls	r2, r2, #26
 800729c:	d42d      	bmi.n	80072fa <_printf_common+0xbe>
 800729e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a2:	4639      	mov	r1, r7
 80072a4:	4630      	mov	r0, r6
 80072a6:	47c0      	blx	r8
 80072a8:	3001      	adds	r0, #1
 80072aa:	d020      	beq.n	80072ee <_printf_common+0xb2>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	68e5      	ldr	r5, [r4, #12]
 80072b0:	f8d9 2000 	ldr.w	r2, [r9]
 80072b4:	f003 0306 	and.w	r3, r3, #6
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	bf08      	it	eq
 80072bc:	1aad      	subeq	r5, r5, r2
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	bf0c      	ite	eq
 80072c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c8:	2500      	movne	r5, #0
 80072ca:	4293      	cmp	r3, r2
 80072cc:	bfc4      	itt	gt
 80072ce:	1a9b      	subgt	r3, r3, r2
 80072d0:	18ed      	addgt	r5, r5, r3
 80072d2:	f04f 0900 	mov.w	r9, #0
 80072d6:	341a      	adds	r4, #26
 80072d8:	454d      	cmp	r5, r9
 80072da:	d11a      	bne.n	8007312 <_printf_common+0xd6>
 80072dc:	2000      	movs	r0, #0
 80072de:	e008      	b.n	80072f2 <_printf_common+0xb6>
 80072e0:	2301      	movs	r3, #1
 80072e2:	4652      	mov	r2, sl
 80072e4:	4639      	mov	r1, r7
 80072e6:	4630      	mov	r0, r6
 80072e8:	47c0      	blx	r8
 80072ea:	3001      	adds	r0, #1
 80072ec:	d103      	bne.n	80072f6 <_printf_common+0xba>
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7c3      	b.n	8007282 <_printf_common+0x46>
 80072fa:	18e1      	adds	r1, r4, r3
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	2030      	movs	r0, #48	; 0x30
 8007300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007304:	4422      	add	r2, r4
 8007306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800730a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800730e:	3302      	adds	r3, #2
 8007310:	e7c5      	b.n	800729e <_printf_common+0x62>
 8007312:	2301      	movs	r3, #1
 8007314:	4622      	mov	r2, r4
 8007316:	4639      	mov	r1, r7
 8007318:	4630      	mov	r0, r6
 800731a:	47c0      	blx	r8
 800731c:	3001      	adds	r0, #1
 800731e:	d0e6      	beq.n	80072ee <_printf_common+0xb2>
 8007320:	f109 0901 	add.w	r9, r9, #1
 8007324:	e7d8      	b.n	80072d8 <_printf_common+0x9c>
	...

08007328 <_printf_i>:
 8007328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800732c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007330:	460c      	mov	r4, r1
 8007332:	7e09      	ldrb	r1, [r1, #24]
 8007334:	b085      	sub	sp, #20
 8007336:	296e      	cmp	r1, #110	; 0x6e
 8007338:	4617      	mov	r7, r2
 800733a:	4606      	mov	r6, r0
 800733c:	4698      	mov	r8, r3
 800733e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007340:	f000 80b3 	beq.w	80074aa <_printf_i+0x182>
 8007344:	d822      	bhi.n	800738c <_printf_i+0x64>
 8007346:	2963      	cmp	r1, #99	; 0x63
 8007348:	d036      	beq.n	80073b8 <_printf_i+0x90>
 800734a:	d80a      	bhi.n	8007362 <_printf_i+0x3a>
 800734c:	2900      	cmp	r1, #0
 800734e:	f000 80b9 	beq.w	80074c4 <_printf_i+0x19c>
 8007352:	2958      	cmp	r1, #88	; 0x58
 8007354:	f000 8083 	beq.w	800745e <_printf_i+0x136>
 8007358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007360:	e032      	b.n	80073c8 <_printf_i+0xa0>
 8007362:	2964      	cmp	r1, #100	; 0x64
 8007364:	d001      	beq.n	800736a <_printf_i+0x42>
 8007366:	2969      	cmp	r1, #105	; 0x69
 8007368:	d1f6      	bne.n	8007358 <_printf_i+0x30>
 800736a:	6820      	ldr	r0, [r4, #0]
 800736c:	6813      	ldr	r3, [r2, #0]
 800736e:	0605      	lsls	r5, r0, #24
 8007370:	f103 0104 	add.w	r1, r3, #4
 8007374:	d52a      	bpl.n	80073cc <_printf_i+0xa4>
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6011      	str	r1, [r2, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da03      	bge.n	8007386 <_printf_i+0x5e>
 800737e:	222d      	movs	r2, #45	; 0x2d
 8007380:	425b      	negs	r3, r3
 8007382:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007386:	486f      	ldr	r0, [pc, #444]	; (8007544 <_printf_i+0x21c>)
 8007388:	220a      	movs	r2, #10
 800738a:	e039      	b.n	8007400 <_printf_i+0xd8>
 800738c:	2973      	cmp	r1, #115	; 0x73
 800738e:	f000 809d 	beq.w	80074cc <_printf_i+0x1a4>
 8007392:	d808      	bhi.n	80073a6 <_printf_i+0x7e>
 8007394:	296f      	cmp	r1, #111	; 0x6f
 8007396:	d020      	beq.n	80073da <_printf_i+0xb2>
 8007398:	2970      	cmp	r1, #112	; 0x70
 800739a:	d1dd      	bne.n	8007358 <_printf_i+0x30>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	f043 0320 	orr.w	r3, r3, #32
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	e003      	b.n	80073ae <_printf_i+0x86>
 80073a6:	2975      	cmp	r1, #117	; 0x75
 80073a8:	d017      	beq.n	80073da <_printf_i+0xb2>
 80073aa:	2978      	cmp	r1, #120	; 0x78
 80073ac:	d1d4      	bne.n	8007358 <_printf_i+0x30>
 80073ae:	2378      	movs	r3, #120	; 0x78
 80073b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073b4:	4864      	ldr	r0, [pc, #400]	; (8007548 <_printf_i+0x220>)
 80073b6:	e055      	b.n	8007464 <_printf_i+0x13c>
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	1d19      	adds	r1, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6011      	str	r1, [r2, #0]
 80073c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c8:	2301      	movs	r3, #1
 80073ca:	e08c      	b.n	80074e6 <_printf_i+0x1be>
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6011      	str	r1, [r2, #0]
 80073d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073d4:	bf18      	it	ne
 80073d6:	b21b      	sxthne	r3, r3
 80073d8:	e7cf      	b.n	800737a <_printf_i+0x52>
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	6825      	ldr	r5, [r4, #0]
 80073de:	1d18      	adds	r0, r3, #4
 80073e0:	6010      	str	r0, [r2, #0]
 80073e2:	0628      	lsls	r0, r5, #24
 80073e4:	d501      	bpl.n	80073ea <_printf_i+0xc2>
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	e002      	b.n	80073f0 <_printf_i+0xc8>
 80073ea:	0668      	lsls	r0, r5, #25
 80073ec:	d5fb      	bpl.n	80073e6 <_printf_i+0xbe>
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	4854      	ldr	r0, [pc, #336]	; (8007544 <_printf_i+0x21c>)
 80073f2:	296f      	cmp	r1, #111	; 0x6f
 80073f4:	bf14      	ite	ne
 80073f6:	220a      	movne	r2, #10
 80073f8:	2208      	moveq	r2, #8
 80073fa:	2100      	movs	r1, #0
 80073fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007400:	6865      	ldr	r5, [r4, #4]
 8007402:	60a5      	str	r5, [r4, #8]
 8007404:	2d00      	cmp	r5, #0
 8007406:	f2c0 8095 	blt.w	8007534 <_printf_i+0x20c>
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	f021 0104 	bic.w	r1, r1, #4
 8007410:	6021      	str	r1, [r4, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d13d      	bne.n	8007492 <_printf_i+0x16a>
 8007416:	2d00      	cmp	r5, #0
 8007418:	f040 808e 	bne.w	8007538 <_printf_i+0x210>
 800741c:	4665      	mov	r5, ip
 800741e:	2a08      	cmp	r2, #8
 8007420:	d10b      	bne.n	800743a <_printf_i+0x112>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	07db      	lsls	r3, r3, #31
 8007426:	d508      	bpl.n	800743a <_printf_i+0x112>
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	6862      	ldr	r2, [r4, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	bfde      	ittt	le
 8007430:	2330      	movle	r3, #48	; 0x30
 8007432:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007436:	f105 35ff 	addle.w	r5, r5, #4294967295
 800743a:	ebac 0305 	sub.w	r3, ip, r5
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	f8cd 8000 	str.w	r8, [sp]
 8007444:	463b      	mov	r3, r7
 8007446:	aa03      	add	r2, sp, #12
 8007448:	4621      	mov	r1, r4
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff fef6 	bl	800723c <_printf_common>
 8007450:	3001      	adds	r0, #1
 8007452:	d14d      	bne.n	80074f0 <_printf_i+0x1c8>
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	b005      	add	sp, #20
 800745a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800745e:	4839      	ldr	r0, [pc, #228]	; (8007544 <_printf_i+0x21c>)
 8007460:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007464:	6813      	ldr	r3, [r2, #0]
 8007466:	6821      	ldr	r1, [r4, #0]
 8007468:	1d1d      	adds	r5, r3, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6015      	str	r5, [r2, #0]
 800746e:	060a      	lsls	r2, r1, #24
 8007470:	d50b      	bpl.n	800748a <_printf_i+0x162>
 8007472:	07ca      	lsls	r2, r1, #31
 8007474:	bf44      	itt	mi
 8007476:	f041 0120 	orrmi.w	r1, r1, #32
 800747a:	6021      	strmi	r1, [r4, #0]
 800747c:	b91b      	cbnz	r3, 8007486 <_printf_i+0x15e>
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	f022 0220 	bic.w	r2, r2, #32
 8007484:	6022      	str	r2, [r4, #0]
 8007486:	2210      	movs	r2, #16
 8007488:	e7b7      	b.n	80073fa <_printf_i+0xd2>
 800748a:	064d      	lsls	r5, r1, #25
 800748c:	bf48      	it	mi
 800748e:	b29b      	uxthmi	r3, r3
 8007490:	e7ef      	b.n	8007472 <_printf_i+0x14a>
 8007492:	4665      	mov	r5, ip
 8007494:	fbb3 f1f2 	udiv	r1, r3, r2
 8007498:	fb02 3311 	mls	r3, r2, r1, r3
 800749c:	5cc3      	ldrb	r3, [r0, r3]
 800749e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074a2:	460b      	mov	r3, r1
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d1f5      	bne.n	8007494 <_printf_i+0x16c>
 80074a8:	e7b9      	b.n	800741e <_printf_i+0xf6>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	6825      	ldr	r5, [r4, #0]
 80074ae:	6961      	ldr	r1, [r4, #20]
 80074b0:	1d18      	adds	r0, r3, #4
 80074b2:	6010      	str	r0, [r2, #0]
 80074b4:	0628      	lsls	r0, r5, #24
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	d501      	bpl.n	80074be <_printf_i+0x196>
 80074ba:	6019      	str	r1, [r3, #0]
 80074bc:	e002      	b.n	80074c4 <_printf_i+0x19c>
 80074be:	066a      	lsls	r2, r5, #25
 80074c0:	d5fb      	bpl.n	80074ba <_printf_i+0x192>
 80074c2:	8019      	strh	r1, [r3, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	4665      	mov	r5, ip
 80074ca:	e7b9      	b.n	8007440 <_printf_i+0x118>
 80074cc:	6813      	ldr	r3, [r2, #0]
 80074ce:	1d19      	adds	r1, r3, #4
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	681d      	ldr	r5, [r3, #0]
 80074d4:	6862      	ldr	r2, [r4, #4]
 80074d6:	2100      	movs	r1, #0
 80074d8:	4628      	mov	r0, r5
 80074da:	f7f8 fe89 	bl	80001f0 <memchr>
 80074de:	b108      	cbz	r0, 80074e4 <_printf_i+0x1bc>
 80074e0:	1b40      	subs	r0, r0, r5
 80074e2:	6060      	str	r0, [r4, #4]
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	6123      	str	r3, [r4, #16]
 80074e8:	2300      	movs	r3, #0
 80074ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ee:	e7a7      	b.n	8007440 <_printf_i+0x118>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	462a      	mov	r2, r5
 80074f4:	4639      	mov	r1, r7
 80074f6:	4630      	mov	r0, r6
 80074f8:	47c0      	blx	r8
 80074fa:	3001      	adds	r0, #1
 80074fc:	d0aa      	beq.n	8007454 <_printf_i+0x12c>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	079b      	lsls	r3, r3, #30
 8007502:	d413      	bmi.n	800752c <_printf_i+0x204>
 8007504:	68e0      	ldr	r0, [r4, #12]
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	4298      	cmp	r0, r3
 800750a:	bfb8      	it	lt
 800750c:	4618      	movlt	r0, r3
 800750e:	e7a3      	b.n	8007458 <_printf_i+0x130>
 8007510:	2301      	movs	r3, #1
 8007512:	464a      	mov	r2, r9
 8007514:	4639      	mov	r1, r7
 8007516:	4630      	mov	r0, r6
 8007518:	47c0      	blx	r8
 800751a:	3001      	adds	r0, #1
 800751c:	d09a      	beq.n	8007454 <_printf_i+0x12c>
 800751e:	3501      	adds	r5, #1
 8007520:	68e3      	ldr	r3, [r4, #12]
 8007522:	9a03      	ldr	r2, [sp, #12]
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	42ab      	cmp	r3, r5
 8007528:	dcf2      	bgt.n	8007510 <_printf_i+0x1e8>
 800752a:	e7eb      	b.n	8007504 <_printf_i+0x1dc>
 800752c:	2500      	movs	r5, #0
 800752e:	f104 0919 	add.w	r9, r4, #25
 8007532:	e7f5      	b.n	8007520 <_printf_i+0x1f8>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1ac      	bne.n	8007492 <_printf_i+0x16a>
 8007538:	7803      	ldrb	r3, [r0, #0]
 800753a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800753e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007542:	e76c      	b.n	800741e <_printf_i+0xf6>
 8007544:	080085f9 	.word	0x080085f9
 8007548:	0800860a 	.word	0x0800860a

0800754c <memmove>:
 800754c:	4288      	cmp	r0, r1
 800754e:	b510      	push	{r4, lr}
 8007550:	eb01 0302 	add.w	r3, r1, r2
 8007554:	d807      	bhi.n	8007566 <memmove+0x1a>
 8007556:	1e42      	subs	r2, r0, #1
 8007558:	4299      	cmp	r1, r3
 800755a:	d00a      	beq.n	8007572 <memmove+0x26>
 800755c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007560:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007564:	e7f8      	b.n	8007558 <memmove+0xc>
 8007566:	4283      	cmp	r3, r0
 8007568:	d9f5      	bls.n	8007556 <memmove+0xa>
 800756a:	1881      	adds	r1, r0, r2
 800756c:	1ad2      	subs	r2, r2, r3
 800756e:	42d3      	cmn	r3, r2
 8007570:	d100      	bne.n	8007574 <memmove+0x28>
 8007572:	bd10      	pop	{r4, pc}
 8007574:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007578:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800757c:	e7f7      	b.n	800756e <memmove+0x22>
	...

08007580 <_free_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4605      	mov	r5, r0
 8007584:	2900      	cmp	r1, #0
 8007586:	d045      	beq.n	8007614 <_free_r+0x94>
 8007588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800758c:	1f0c      	subs	r4, r1, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb8      	it	lt
 8007592:	18e4      	addlt	r4, r4, r3
 8007594:	f000 f8d2 	bl	800773c <__malloc_lock>
 8007598:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <_free_r+0x98>)
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	4610      	mov	r0, r2
 800759e:	b933      	cbnz	r3, 80075ae <_free_r+0x2e>
 80075a0:	6063      	str	r3, [r4, #4]
 80075a2:	6014      	str	r4, [r2, #0]
 80075a4:	4628      	mov	r0, r5
 80075a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075aa:	f000 b8c8 	b.w	800773e <__malloc_unlock>
 80075ae:	42a3      	cmp	r3, r4
 80075b0:	d90c      	bls.n	80075cc <_free_r+0x4c>
 80075b2:	6821      	ldr	r1, [r4, #0]
 80075b4:	1862      	adds	r2, r4, r1
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bf04      	itt	eq
 80075ba:	681a      	ldreq	r2, [r3, #0]
 80075bc:	685b      	ldreq	r3, [r3, #4]
 80075be:	6063      	str	r3, [r4, #4]
 80075c0:	bf04      	itt	eq
 80075c2:	1852      	addeq	r2, r2, r1
 80075c4:	6022      	streq	r2, [r4, #0]
 80075c6:	6004      	str	r4, [r0, #0]
 80075c8:	e7ec      	b.n	80075a4 <_free_r+0x24>
 80075ca:	4613      	mov	r3, r2
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	b10a      	cbz	r2, 80075d4 <_free_r+0x54>
 80075d0:	42a2      	cmp	r2, r4
 80075d2:	d9fa      	bls.n	80075ca <_free_r+0x4a>
 80075d4:	6819      	ldr	r1, [r3, #0]
 80075d6:	1858      	adds	r0, r3, r1
 80075d8:	42a0      	cmp	r0, r4
 80075da:	d10b      	bne.n	80075f4 <_free_r+0x74>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	4401      	add	r1, r0
 80075e0:	1858      	adds	r0, r3, r1
 80075e2:	4282      	cmp	r2, r0
 80075e4:	6019      	str	r1, [r3, #0]
 80075e6:	d1dd      	bne.n	80075a4 <_free_r+0x24>
 80075e8:	6810      	ldr	r0, [r2, #0]
 80075ea:	6852      	ldr	r2, [r2, #4]
 80075ec:	605a      	str	r2, [r3, #4]
 80075ee:	4401      	add	r1, r0
 80075f0:	6019      	str	r1, [r3, #0]
 80075f2:	e7d7      	b.n	80075a4 <_free_r+0x24>
 80075f4:	d902      	bls.n	80075fc <_free_r+0x7c>
 80075f6:	230c      	movs	r3, #12
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	e7d3      	b.n	80075a4 <_free_r+0x24>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	1821      	adds	r1, r4, r0
 8007600:	428a      	cmp	r2, r1
 8007602:	bf04      	itt	eq
 8007604:	6811      	ldreq	r1, [r2, #0]
 8007606:	6852      	ldreq	r2, [r2, #4]
 8007608:	6062      	str	r2, [r4, #4]
 800760a:	bf04      	itt	eq
 800760c:	1809      	addeq	r1, r1, r0
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	605c      	str	r4, [r3, #4]
 8007612:	e7c7      	b.n	80075a4 <_free_r+0x24>
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	200001d4 	.word	0x200001d4

0800761c <_malloc_r>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	1ccd      	adds	r5, r1, #3
 8007620:	f025 0503 	bic.w	r5, r5, #3
 8007624:	3508      	adds	r5, #8
 8007626:	2d0c      	cmp	r5, #12
 8007628:	bf38      	it	cc
 800762a:	250c      	movcc	r5, #12
 800762c:	2d00      	cmp	r5, #0
 800762e:	4606      	mov	r6, r0
 8007630:	db01      	blt.n	8007636 <_malloc_r+0x1a>
 8007632:	42a9      	cmp	r1, r5
 8007634:	d903      	bls.n	800763e <_malloc_r+0x22>
 8007636:	230c      	movs	r3, #12
 8007638:	6033      	str	r3, [r6, #0]
 800763a:	2000      	movs	r0, #0
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	f000 f87d 	bl	800773c <__malloc_lock>
 8007642:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <_malloc_r+0xac>)
 8007644:	6814      	ldr	r4, [r2, #0]
 8007646:	4621      	mov	r1, r4
 8007648:	b991      	cbnz	r1, 8007670 <_malloc_r+0x54>
 800764a:	4c20      	ldr	r4, [pc, #128]	; (80076cc <_malloc_r+0xb0>)
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	b91b      	cbnz	r3, 8007658 <_malloc_r+0x3c>
 8007650:	4630      	mov	r0, r6
 8007652:	f000 f863 	bl	800771c <_sbrk_r>
 8007656:	6020      	str	r0, [r4, #0]
 8007658:	4629      	mov	r1, r5
 800765a:	4630      	mov	r0, r6
 800765c:	f000 f85e 	bl	800771c <_sbrk_r>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d124      	bne.n	80076ae <_malloc_r+0x92>
 8007664:	230c      	movs	r3, #12
 8007666:	6033      	str	r3, [r6, #0]
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f868 	bl	800773e <__malloc_unlock>
 800766e:	e7e4      	b.n	800763a <_malloc_r+0x1e>
 8007670:	680b      	ldr	r3, [r1, #0]
 8007672:	1b5b      	subs	r3, r3, r5
 8007674:	d418      	bmi.n	80076a8 <_malloc_r+0x8c>
 8007676:	2b0b      	cmp	r3, #11
 8007678:	d90f      	bls.n	800769a <_malloc_r+0x7e>
 800767a:	600b      	str	r3, [r1, #0]
 800767c:	50cd      	str	r5, [r1, r3]
 800767e:	18cc      	adds	r4, r1, r3
 8007680:	4630      	mov	r0, r6
 8007682:	f000 f85c 	bl	800773e <__malloc_unlock>
 8007686:	f104 000b 	add.w	r0, r4, #11
 800768a:	1d23      	adds	r3, r4, #4
 800768c:	f020 0007 	bic.w	r0, r0, #7
 8007690:	1ac3      	subs	r3, r0, r3
 8007692:	d0d3      	beq.n	800763c <_malloc_r+0x20>
 8007694:	425a      	negs	r2, r3
 8007696:	50e2      	str	r2, [r4, r3]
 8007698:	e7d0      	b.n	800763c <_malloc_r+0x20>
 800769a:	428c      	cmp	r4, r1
 800769c:	684b      	ldr	r3, [r1, #4]
 800769e:	bf16      	itet	ne
 80076a0:	6063      	strne	r3, [r4, #4]
 80076a2:	6013      	streq	r3, [r2, #0]
 80076a4:	460c      	movne	r4, r1
 80076a6:	e7eb      	b.n	8007680 <_malloc_r+0x64>
 80076a8:	460c      	mov	r4, r1
 80076aa:	6849      	ldr	r1, [r1, #4]
 80076ac:	e7cc      	b.n	8007648 <_malloc_r+0x2c>
 80076ae:	1cc4      	adds	r4, r0, #3
 80076b0:	f024 0403 	bic.w	r4, r4, #3
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d005      	beq.n	80076c4 <_malloc_r+0xa8>
 80076b8:	1a21      	subs	r1, r4, r0
 80076ba:	4630      	mov	r0, r6
 80076bc:	f000 f82e 	bl	800771c <_sbrk_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d0cf      	beq.n	8007664 <_malloc_r+0x48>
 80076c4:	6025      	str	r5, [r4, #0]
 80076c6:	e7db      	b.n	8007680 <_malloc_r+0x64>
 80076c8:	200001d4 	.word	0x200001d4
 80076cc:	200001d8 	.word	0x200001d8

080076d0 <_realloc_r>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	4607      	mov	r7, r0
 80076d4:	4614      	mov	r4, r2
 80076d6:	460e      	mov	r6, r1
 80076d8:	b921      	cbnz	r1, 80076e4 <_realloc_r+0x14>
 80076da:	4611      	mov	r1, r2
 80076dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076e0:	f7ff bf9c 	b.w	800761c <_malloc_r>
 80076e4:	b922      	cbnz	r2, 80076f0 <_realloc_r+0x20>
 80076e6:	f7ff ff4b 	bl	8007580 <_free_r>
 80076ea:	4625      	mov	r5, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f0:	f000 f826 	bl	8007740 <_malloc_usable_size_r>
 80076f4:	42a0      	cmp	r0, r4
 80076f6:	d20f      	bcs.n	8007718 <_realloc_r+0x48>
 80076f8:	4621      	mov	r1, r4
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff ff8e 	bl	800761c <_malloc_r>
 8007700:	4605      	mov	r5, r0
 8007702:	2800      	cmp	r0, #0
 8007704:	d0f2      	beq.n	80076ec <_realloc_r+0x1c>
 8007706:	4631      	mov	r1, r6
 8007708:	4622      	mov	r2, r4
 800770a:	f7ff fc11 	bl	8006f30 <memcpy>
 800770e:	4631      	mov	r1, r6
 8007710:	4638      	mov	r0, r7
 8007712:	f7ff ff35 	bl	8007580 <_free_r>
 8007716:	e7e9      	b.n	80076ec <_realloc_r+0x1c>
 8007718:	4635      	mov	r5, r6
 800771a:	e7e7      	b.n	80076ec <_realloc_r+0x1c>

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4c06      	ldr	r4, [pc, #24]	; (8007738 <_sbrk_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4605      	mov	r5, r0
 8007724:	4608      	mov	r0, r1
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	f7fb fc78 	bl	800301c <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	200003a0 	.word	0x200003a0

0800773c <__malloc_lock>:
 800773c:	4770      	bx	lr

0800773e <__malloc_unlock>:
 800773e:	4770      	bx	lr

08007740 <_malloc_usable_size_r>:
 8007740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007744:	1f18      	subs	r0, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	bfbc      	itt	lt
 800774a:	580b      	ldrlt	r3, [r1, r0]
 800774c:	18c0      	addlt	r0, r0, r3
 800774e:	4770      	bx	lr

08007750 <sinf>:
 8007750:	ee10 3a10 	vmov	r3, s0
 8007754:	b507      	push	{r0, r1, r2, lr}
 8007756:	4a1d      	ldr	r2, [pc, #116]	; (80077cc <sinf+0x7c>)
 8007758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800775c:	4293      	cmp	r3, r2
 800775e:	dc05      	bgt.n	800776c <sinf+0x1c>
 8007760:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80077d0 <sinf+0x80>
 8007764:	2000      	movs	r0, #0
 8007766:	f000 fc41 	bl	8007fec <__kernel_sinf>
 800776a:	e004      	b.n	8007776 <sinf+0x26>
 800776c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007770:	db04      	blt.n	800777c <sinf+0x2c>
 8007772:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007776:	b003      	add	sp, #12
 8007778:	f85d fb04 	ldr.w	pc, [sp], #4
 800777c:	4668      	mov	r0, sp
 800777e:	f000 f829 	bl	80077d4 <__ieee754_rem_pio2f>
 8007782:	f000 0003 	and.w	r0, r0, #3
 8007786:	2801      	cmp	r0, #1
 8007788:	d008      	beq.n	800779c <sinf+0x4c>
 800778a:	2802      	cmp	r0, #2
 800778c:	d00d      	beq.n	80077aa <sinf+0x5a>
 800778e:	b9b0      	cbnz	r0, 80077be <sinf+0x6e>
 8007790:	2001      	movs	r0, #1
 8007792:	eddd 0a01 	vldr	s1, [sp, #4]
 8007796:	ed9d 0a00 	vldr	s0, [sp]
 800779a:	e7e4      	b.n	8007766 <sinf+0x16>
 800779c:	eddd 0a01 	vldr	s1, [sp, #4]
 80077a0:	ed9d 0a00 	vldr	s0, [sp]
 80077a4:	f000 f942 	bl	8007a2c <__kernel_cosf>
 80077a8:	e7e5      	b.n	8007776 <sinf+0x26>
 80077aa:	2001      	movs	r0, #1
 80077ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80077b0:	ed9d 0a00 	vldr	s0, [sp]
 80077b4:	f000 fc1a 	bl	8007fec <__kernel_sinf>
 80077b8:	eeb1 0a40 	vneg.f32	s0, s0
 80077bc:	e7db      	b.n	8007776 <sinf+0x26>
 80077be:	eddd 0a01 	vldr	s1, [sp, #4]
 80077c2:	ed9d 0a00 	vldr	s0, [sp]
 80077c6:	f000 f931 	bl	8007a2c <__kernel_cosf>
 80077ca:	e7f5      	b.n	80077b8 <sinf+0x68>
 80077cc:	3f490fd8 	.word	0x3f490fd8
 80077d0:	00000000 	.word	0x00000000

080077d4 <__ieee754_rem_pio2f>:
 80077d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077d6:	ee10 6a10 	vmov	r6, s0
 80077da:	4b86      	ldr	r3, [pc, #536]	; (80079f4 <__ieee754_rem_pio2f+0x220>)
 80077dc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80077e0:	429c      	cmp	r4, r3
 80077e2:	b087      	sub	sp, #28
 80077e4:	4605      	mov	r5, r0
 80077e6:	dc05      	bgt.n	80077f4 <__ieee754_rem_pio2f+0x20>
 80077e8:	2300      	movs	r3, #0
 80077ea:	ed85 0a00 	vstr	s0, [r5]
 80077ee:	6043      	str	r3, [r0, #4]
 80077f0:	2000      	movs	r0, #0
 80077f2:	e020      	b.n	8007836 <__ieee754_rem_pio2f+0x62>
 80077f4:	4b80      	ldr	r3, [pc, #512]	; (80079f8 <__ieee754_rem_pio2f+0x224>)
 80077f6:	429c      	cmp	r4, r3
 80077f8:	dc38      	bgt.n	800786c <__ieee754_rem_pio2f+0x98>
 80077fa:	2e00      	cmp	r6, #0
 80077fc:	f024 040f 	bic.w	r4, r4, #15
 8007800:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80079fc <__ieee754_rem_pio2f+0x228>
 8007804:	4b7e      	ldr	r3, [pc, #504]	; (8007a00 <__ieee754_rem_pio2f+0x22c>)
 8007806:	dd18      	ble.n	800783a <__ieee754_rem_pio2f+0x66>
 8007808:	429c      	cmp	r4, r3
 800780a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800780e:	bf09      	itett	eq
 8007810:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007a04 <__ieee754_rem_pio2f+0x230>
 8007814:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007a08 <__ieee754_rem_pio2f+0x234>
 8007818:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800781c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007a0c <__ieee754_rem_pio2f+0x238>
 8007820:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007824:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007828:	edc0 6a00 	vstr	s13, [r0]
 800782c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007830:	edc0 7a01 	vstr	s15, [r0, #4]
 8007834:	2001      	movs	r0, #1
 8007836:	b007      	add	sp, #28
 8007838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783a:	429c      	cmp	r4, r3
 800783c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007840:	bf09      	itett	eq
 8007842:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007a04 <__ieee754_rem_pio2f+0x230>
 8007846:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007a08 <__ieee754_rem_pio2f+0x234>
 800784a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800784e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007a0c <__ieee754_rem_pio2f+0x238>
 8007852:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007856:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800785a:	edc0 6a00 	vstr	s13, [r0]
 800785e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007862:	edc0 7a01 	vstr	s15, [r0, #4]
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	e7e4      	b.n	8007836 <__ieee754_rem_pio2f+0x62>
 800786c:	4b68      	ldr	r3, [pc, #416]	; (8007a10 <__ieee754_rem_pio2f+0x23c>)
 800786e:	429c      	cmp	r4, r3
 8007870:	dc71      	bgt.n	8007956 <__ieee754_rem_pio2f+0x182>
 8007872:	f000 fc03 	bl	800807c <fabsf>
 8007876:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007a14 <__ieee754_rem_pio2f+0x240>
 800787a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800787e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007886:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800788a:	ee17 0a90 	vmov	r0, s15
 800788e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80079fc <__ieee754_rem_pio2f+0x228>
 8007892:	eeb1 7a46 	vneg.f32	s14, s12
 8007896:	eea7 0a27 	vfma.f32	s0, s14, s15
 800789a:	281f      	cmp	r0, #31
 800789c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007a08 <__ieee754_rem_pio2f+0x234>
 80078a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80078a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80078a8:	ee16 3a90 	vmov	r3, s13
 80078ac:	dc1c      	bgt.n	80078e8 <__ieee754_rem_pio2f+0x114>
 80078ae:	1e47      	subs	r7, r0, #1
 80078b0:	4959      	ldr	r1, [pc, #356]	; (8007a18 <__ieee754_rem_pio2f+0x244>)
 80078b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80078b6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80078ba:	428a      	cmp	r2, r1
 80078bc:	d014      	beq.n	80078e8 <__ieee754_rem_pio2f+0x114>
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	ed95 7a00 	vldr	s14, [r5]
 80078c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078ce:	ed85 0a01 	vstr	s0, [r5, #4]
 80078d2:	dab0      	bge.n	8007836 <__ieee754_rem_pio2f+0x62>
 80078d4:	eeb1 7a47 	vneg.f32	s14, s14
 80078d8:	eeb1 0a40 	vneg.f32	s0, s0
 80078dc:	ed85 7a00 	vstr	s14, [r5]
 80078e0:	ed85 0a01 	vstr	s0, [r5, #4]
 80078e4:	4240      	negs	r0, r0
 80078e6:	e7a6      	b.n	8007836 <__ieee754_rem_pio2f+0x62>
 80078e8:	15e4      	asrs	r4, r4, #23
 80078ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80078ee:	1aa2      	subs	r2, r4, r2
 80078f0:	2a08      	cmp	r2, #8
 80078f2:	dde4      	ble.n	80078be <__ieee754_rem_pio2f+0xea>
 80078f4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007a04 <__ieee754_rem_pio2f+0x230>
 80078f8:	eef0 6a40 	vmov.f32	s13, s0
 80078fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007900:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007904:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007908:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007a0c <__ieee754_rem_pio2f+0x238>
 800790c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007910:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007914:	eef0 7a40 	vmov.f32	s15, s0
 8007918:	ee15 3a90 	vmov	r3, s11
 800791c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007920:	1aa4      	subs	r4, r4, r2
 8007922:	2c19      	cmp	r4, #25
 8007924:	dc04      	bgt.n	8007930 <__ieee754_rem_pio2f+0x15c>
 8007926:	edc5 5a00 	vstr	s11, [r5]
 800792a:	eeb0 0a66 	vmov.f32	s0, s13
 800792e:	e7c7      	b.n	80078c0 <__ieee754_rem_pio2f+0xec>
 8007930:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007a1c <__ieee754_rem_pio2f+0x248>
 8007934:	eeb0 0a66 	vmov.f32	s0, s13
 8007938:	eea7 0a25 	vfma.f32	s0, s14, s11
 800793c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007940:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007944:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007a20 <__ieee754_rem_pio2f+0x24c>
 8007948:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800794c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007950:	ed85 7a00 	vstr	s14, [r5]
 8007954:	e7b4      	b.n	80078c0 <__ieee754_rem_pio2f+0xec>
 8007956:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800795a:	db06      	blt.n	800796a <__ieee754_rem_pio2f+0x196>
 800795c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007960:	edc0 7a01 	vstr	s15, [r0, #4]
 8007964:	edc0 7a00 	vstr	s15, [r0]
 8007968:	e742      	b.n	80077f0 <__ieee754_rem_pio2f+0x1c>
 800796a:	15e2      	asrs	r2, r4, #23
 800796c:	3a86      	subs	r2, #134	; 0x86
 800796e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800797a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007a24 <__ieee754_rem_pio2f+0x250>
 800797e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007986:	ed8d 7a03 	vstr	s14, [sp, #12]
 800798a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800798e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007992:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800799a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800799e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80079a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80079a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079aa:	edcd 7a05 	vstr	s15, [sp, #20]
 80079ae:	d11e      	bne.n	80079ee <__ieee754_rem_pio2f+0x21a>
 80079b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80079b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b8:	bf0c      	ite	eq
 80079ba:	2301      	moveq	r3, #1
 80079bc:	2302      	movne	r3, #2
 80079be:	491a      	ldr	r1, [pc, #104]	; (8007a28 <__ieee754_rem_pio2f+0x254>)
 80079c0:	9101      	str	r1, [sp, #4]
 80079c2:	2102      	movs	r1, #2
 80079c4:	9100      	str	r1, [sp, #0]
 80079c6:	a803      	add	r0, sp, #12
 80079c8:	4629      	mov	r1, r5
 80079ca:	f000 f88d 	bl	8007ae8 <__kernel_rem_pio2f>
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	f6bf af31 	bge.w	8007836 <__ieee754_rem_pio2f+0x62>
 80079d4:	edd5 7a00 	vldr	s15, [r5]
 80079d8:	eef1 7a67 	vneg.f32	s15, s15
 80079dc:	edc5 7a00 	vstr	s15, [r5]
 80079e0:	edd5 7a01 	vldr	s15, [r5, #4]
 80079e4:	eef1 7a67 	vneg.f32	s15, s15
 80079e8:	edc5 7a01 	vstr	s15, [r5, #4]
 80079ec:	e77a      	b.n	80078e4 <__ieee754_rem_pio2f+0x110>
 80079ee:	2303      	movs	r3, #3
 80079f0:	e7e5      	b.n	80079be <__ieee754_rem_pio2f+0x1ea>
 80079f2:	bf00      	nop
 80079f4:	3f490fd8 	.word	0x3f490fd8
 80079f8:	4016cbe3 	.word	0x4016cbe3
 80079fc:	3fc90f80 	.word	0x3fc90f80
 8007a00:	3fc90fd0 	.word	0x3fc90fd0
 8007a04:	37354400 	.word	0x37354400
 8007a08:	37354443 	.word	0x37354443
 8007a0c:	2e85a308 	.word	0x2e85a308
 8007a10:	43490f80 	.word	0x43490f80
 8007a14:	3f22f984 	.word	0x3f22f984
 8007a18:	0800861c 	.word	0x0800861c
 8007a1c:	2e85a300 	.word	0x2e85a300
 8007a20:	248d3132 	.word	0x248d3132
 8007a24:	43800000 	.word	0x43800000
 8007a28:	0800869c 	.word	0x0800869c

08007a2c <__kernel_cosf>:
 8007a2c:	ee10 3a10 	vmov	r3, s0
 8007a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3c:	da05      	bge.n	8007a4a <__kernel_cosf+0x1e>
 8007a3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007a42:	ee17 2a90 	vmov	r2, s15
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	d03b      	beq.n	8007ac2 <__kernel_cosf+0x96>
 8007a4a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007a4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007ac8 <__kernel_cosf+0x9c>
 8007a56:	4a1d      	ldr	r2, [pc, #116]	; (8007acc <__kernel_cosf+0xa0>)
 8007a58:	ee66 7a07 	vmul.f32	s15, s12, s14
 8007a5c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007ad0 <__kernel_cosf+0xa4>
 8007a60:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007a64:	4293      	cmp	r3, r2
 8007a66:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007ad4 <__kernel_cosf+0xa8>
 8007a6a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007a6e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007ad8 <__kernel_cosf+0xac>
 8007a72:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007a76:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007adc <__kernel_cosf+0xb0>
 8007a7a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007a7e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007ae0 <__kernel_cosf+0xb4>
 8007a82:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007a86:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007a8a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007a8e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007a92:	dc04      	bgt.n	8007a9e <__kernel_cosf+0x72>
 8007a94:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007a98:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8007a9c:	4770      	bx	lr
 8007a9e:	4a11      	ldr	r2, [pc, #68]	; (8007ae4 <__kernel_cosf+0xb8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	bfda      	itte	le
 8007aa4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007aa8:	ee07 3a10 	vmovle	s14, r3
 8007aac:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ab4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007ab8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007abc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007ac0:	4770      	bx	lr
 8007ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8007ac6:	4770      	bx	lr
 8007ac8:	ad47d74e 	.word	0xad47d74e
 8007acc:	3e999999 	.word	0x3e999999
 8007ad0:	310f74f6 	.word	0x310f74f6
 8007ad4:	b493f27c 	.word	0xb493f27c
 8007ad8:	37d00d01 	.word	0x37d00d01
 8007adc:	bab60b61 	.word	0xbab60b61
 8007ae0:	3d2aaaab 	.word	0x3d2aaaab
 8007ae4:	3f480000 	.word	0x3f480000

08007ae8 <__kernel_rem_pio2f>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	ed2d 8b04 	vpush	{d8-d9}
 8007af0:	b0d7      	sub	sp, #348	; 0x15c
 8007af2:	469b      	mov	fp, r3
 8007af4:	460e      	mov	r6, r1
 8007af6:	4bbe      	ldr	r3, [pc, #760]	; (8007df0 <__kernel_rem_pio2f+0x308>)
 8007af8:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007afa:	9002      	str	r0, [sp, #8]
 8007afc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007b00:	9865      	ldr	r0, [sp, #404]	; 0x194
 8007b02:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007e00 <__kernel_rem_pio2f+0x318>
 8007b06:	1ed1      	subs	r1, r2, #3
 8007b08:	2308      	movs	r3, #8
 8007b0a:	fb91 f1f3 	sdiv	r1, r1, r3
 8007b0e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007b12:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007b16:	1c4c      	adds	r4, r1, #1
 8007b18:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007b1c:	eba1 050a 	sub.w	r5, r1, sl
 8007b20:	aa1a      	add	r2, sp, #104	; 0x68
 8007b22:	eb09 070a 	add.w	r7, r9, sl
 8007b26:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007b2a:	4696      	mov	lr, r2
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	42bb      	cmp	r3, r7
 8007b30:	dd0f      	ble.n	8007b52 <__kernel_rem_pio2f+0x6a>
 8007b32:	af42      	add	r7, sp, #264	; 0x108
 8007b34:	2200      	movs	r2, #0
 8007b36:	454a      	cmp	r2, r9
 8007b38:	dc27      	bgt.n	8007b8a <__kernel_rem_pio2f+0xa2>
 8007b3a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8007b3e:	eb0b 0302 	add.w	r3, fp, r2
 8007b42:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007b46:	9d02      	ldr	r5, [sp, #8]
 8007b48:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007e00 <__kernel_rem_pio2f+0x318>
 8007b4c:	f04f 0c00 	mov.w	ip, #0
 8007b50:	e015      	b.n	8007b7e <__kernel_rem_pio2f+0x96>
 8007b52:	42dd      	cmn	r5, r3
 8007b54:	bf5d      	ittte	pl
 8007b56:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8007b5a:	ee07 2a90 	vmovpl	s15, r2
 8007b5e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007b62:	eef0 7a47 	vmovmi.f32	s15, s14
 8007b66:	ecee 7a01 	vstmia	lr!, {s15}
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	e7df      	b.n	8007b2e <__kernel_rem_pio2f+0x46>
 8007b6e:	ecf5 6a01 	vldmia	r5!, {s13}
 8007b72:	ed33 7a01 	vldmdb	r3!, {s14}
 8007b76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b7a:	f10c 0c01 	add.w	ip, ip, #1
 8007b7e:	45d4      	cmp	ip, sl
 8007b80:	ddf5      	ble.n	8007b6e <__kernel_rem_pio2f+0x86>
 8007b82:	ece7 7a01 	vstmia	r7!, {s15}
 8007b86:	3201      	adds	r2, #1
 8007b88:	e7d5      	b.n	8007b36 <__kernel_rem_pio2f+0x4e>
 8007b8a:	ab06      	add	r3, sp, #24
 8007b8c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8007dfc <__kernel_rem_pio2f+0x314>
 8007b96:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007df8 <__kernel_rem_pio2f+0x310>
 8007b9a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007b9e:	9303      	str	r3, [sp, #12]
 8007ba0:	464d      	mov	r5, r9
 8007ba2:	ab56      	add	r3, sp, #344	; 0x158
 8007ba4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007ba8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007bac:	3f01      	subs	r7, #1
 8007bae:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007bb2:	00bf      	lsls	r7, r7, #2
 8007bb4:	ab56      	add	r3, sp, #344	; 0x158
 8007bb6:	19da      	adds	r2, r3, r7
 8007bb8:	3a4c      	subs	r2, #76	; 0x4c
 8007bba:	2300      	movs	r3, #0
 8007bbc:	1ae9      	subs	r1, r5, r3
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	dc4c      	bgt.n	8007c5c <__kernel_rem_pio2f+0x174>
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 faa4 	bl	8008110 <scalbnf>
 8007bc8:	eeb0 8a40 	vmov.f32	s16, s0
 8007bcc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007bd0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007bd4:	f000 fa5a 	bl	800808c <floorf>
 8007bd8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007bdc:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007be0:	2c00      	cmp	r4, #0
 8007be2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007be6:	edcd 7a01 	vstr	s15, [sp, #4]
 8007bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bee:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007bf2:	dd48      	ble.n	8007c86 <__kernel_rem_pio2f+0x19e>
 8007bf4:	1e69      	subs	r1, r5, #1
 8007bf6:	ab06      	add	r3, sp, #24
 8007bf8:	f1c4 0008 	rsb	r0, r4, #8
 8007bfc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007c00:	9a01      	ldr	r2, [sp, #4]
 8007c02:	fa4c f300 	asr.w	r3, ip, r0
 8007c06:	441a      	add	r2, r3
 8007c08:	4083      	lsls	r3, r0
 8007c0a:	9201      	str	r2, [sp, #4]
 8007c0c:	ebac 0203 	sub.w	r2, ip, r3
 8007c10:	ab06      	add	r3, sp, #24
 8007c12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007c16:	f1c4 0307 	rsb	r3, r4, #7
 8007c1a:	fa42 f803 	asr.w	r8, r2, r3
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	dd41      	ble.n	8007ca8 <__kernel_rem_pio2f+0x1c0>
 8007c24:	9b01      	ldr	r3, [sp, #4]
 8007c26:	2000      	movs	r0, #0
 8007c28:	3301      	adds	r3, #1
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	4601      	mov	r1, r0
 8007c2e:	4285      	cmp	r5, r0
 8007c30:	dc6d      	bgt.n	8007d0e <__kernel_rem_pio2f+0x226>
 8007c32:	2c00      	cmp	r4, #0
 8007c34:	dd04      	ble.n	8007c40 <__kernel_rem_pio2f+0x158>
 8007c36:	2c01      	cmp	r4, #1
 8007c38:	d07e      	beq.n	8007d38 <__kernel_rem_pio2f+0x250>
 8007c3a:	2c02      	cmp	r4, #2
 8007c3c:	f000 8086 	beq.w	8007d4c <__kernel_rem_pio2f+0x264>
 8007c40:	f1b8 0f02 	cmp.w	r8, #2
 8007c44:	d130      	bne.n	8007ca8 <__kernel_rem_pio2f+0x1c0>
 8007c46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c4a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007c4e:	b359      	cbz	r1, 8007ca8 <__kernel_rem_pio2f+0x1c0>
 8007c50:	4620      	mov	r0, r4
 8007c52:	f000 fa5d 	bl	8008110 <scalbnf>
 8007c56:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007c5a:	e025      	b.n	8007ca8 <__kernel_rem_pio2f+0x1c0>
 8007c5c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007c60:	a806      	add	r0, sp, #24
 8007c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c6a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007c6e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007c72:	ee10 1a10 	vmov	r1, s0
 8007c76:	ed32 0a01 	vldmdb	r2!, {s0}
 8007c7a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8007c7e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c82:	3301      	adds	r3, #1
 8007c84:	e79a      	b.n	8007bbc <__kernel_rem_pio2f+0xd4>
 8007c86:	d106      	bne.n	8007c96 <__kernel_rem_pio2f+0x1ae>
 8007c88:	1e6b      	subs	r3, r5, #1
 8007c8a:	aa06      	add	r2, sp, #24
 8007c8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c90:	ea4f 2822 	mov.w	r8, r2, asr #8
 8007c94:	e7c3      	b.n	8007c1e <__kernel_rem_pio2f+0x136>
 8007c96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c9a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca2:	da31      	bge.n	8007d08 <__kernel_rem_pio2f+0x220>
 8007ca4:	f04f 0800 	mov.w	r8, #0
 8007ca8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb0:	f040 80a8 	bne.w	8007e04 <__kernel_rem_pio2f+0x31c>
 8007cb4:	1e6b      	subs	r3, r5, #1
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4548      	cmp	r0, r9
 8007cbc:	da4d      	bge.n	8007d5a <__kernel_rem_pio2f+0x272>
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	f000 8087 	beq.w	8007dd2 <__kernel_rem_pio2f+0x2ea>
 8007cc4:	aa06      	add	r2, sp, #24
 8007cc6:	3c08      	subs	r4, #8
 8007cc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	f000 808d 	beq.w	8007dec <__kernel_rem_pio2f+0x304>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007cd8:	9302      	str	r3, [sp, #8]
 8007cda:	f000 fa19 	bl	8008110 <scalbnf>
 8007cde:	9b02      	ldr	r3, [sp, #8]
 8007ce0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007dfc <__kernel_rem_pio2f+0x314>
 8007ce4:	0099      	lsls	r1, r3, #2
 8007ce6:	aa42      	add	r2, sp, #264	; 0x108
 8007ce8:	1850      	adds	r0, r2, r1
 8007cea:	1d05      	adds	r5, r0, #4
 8007cec:	461c      	mov	r4, r3
 8007cee:	2c00      	cmp	r4, #0
 8007cf0:	f280 80b8 	bge.w	8007e64 <__kernel_rem_pio2f+0x37c>
 8007cf4:	2500      	movs	r5, #0
 8007cf6:	1b5c      	subs	r4, r3, r5
 8007cf8:	2c00      	cmp	r4, #0
 8007cfa:	f2c0 80d8 	blt.w	8007eae <__kernel_rem_pio2f+0x3c6>
 8007cfe:	4f3d      	ldr	r7, [pc, #244]	; (8007df4 <__kernel_rem_pio2f+0x30c>)
 8007d00:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007e00 <__kernel_rem_pio2f+0x318>
 8007d04:	2400      	movs	r4, #0
 8007d06:	e0c6      	b.n	8007e96 <__kernel_rem_pio2f+0x3ae>
 8007d08:	f04f 0802 	mov.w	r8, #2
 8007d0c:	e78a      	b.n	8007c24 <__kernel_rem_pio2f+0x13c>
 8007d0e:	ab06      	add	r3, sp, #24
 8007d10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d14:	b949      	cbnz	r1, 8007d2a <__kernel_rem_pio2f+0x242>
 8007d16:	b12b      	cbz	r3, 8007d24 <__kernel_rem_pio2f+0x23c>
 8007d18:	aa06      	add	r2, sp, #24
 8007d1a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007d1e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007d22:	2301      	movs	r3, #1
 8007d24:	3001      	adds	r0, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	e781      	b.n	8007c2e <__kernel_rem_pio2f+0x146>
 8007d2a:	aa06      	add	r2, sp, #24
 8007d2c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007d30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007d34:	460b      	mov	r3, r1
 8007d36:	e7f5      	b.n	8007d24 <__kernel_rem_pio2f+0x23c>
 8007d38:	1e68      	subs	r0, r5, #1
 8007d3a:	ab06      	add	r3, sp, #24
 8007d3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d44:	aa06      	add	r2, sp, #24
 8007d46:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007d4a:	e779      	b.n	8007c40 <__kernel_rem_pio2f+0x158>
 8007d4c:	1e68      	subs	r0, r5, #1
 8007d4e:	ab06      	add	r3, sp, #24
 8007d50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d58:	e7f4      	b.n	8007d44 <__kernel_rem_pio2f+0x25c>
 8007d5a:	a906      	add	r1, sp, #24
 8007d5c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007d60:	3801      	subs	r0, #1
 8007d62:	430a      	orrs	r2, r1
 8007d64:	e7a9      	b.n	8007cba <__kernel_rem_pio2f+0x1d2>
 8007d66:	f10c 0c01 	add.w	ip, ip, #1
 8007d6a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	d0f9      	beq.n	8007d66 <__kernel_rem_pio2f+0x27e>
 8007d72:	eb0b 0305 	add.w	r3, fp, r5
 8007d76:	aa1a      	add	r2, sp, #104	; 0x68
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	1898      	adds	r0, r3, r2
 8007d7c:	3004      	adds	r0, #4
 8007d7e:	1c69      	adds	r1, r5, #1
 8007d80:	3704      	adds	r7, #4
 8007d82:	2200      	movs	r2, #0
 8007d84:	4465      	add	r5, ip
 8007d86:	9005      	str	r0, [sp, #20]
 8007d88:	428d      	cmp	r5, r1
 8007d8a:	f6ff af0a 	blt.w	8007ba2 <__kernel_rem_pio2f+0xba>
 8007d8e:	a81a      	add	r0, sp, #104	; 0x68
 8007d90:	eb02 0c03 	add.w	ip, r2, r3
 8007d94:	4484      	add	ip, r0
 8007d96:	9803      	ldr	r0, [sp, #12]
 8007d98:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007d9c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007da0:	9001      	str	r0, [sp, #4]
 8007da2:	ee07 0a90 	vmov	s15, r0
 8007da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007daa:	9805      	ldr	r0, [sp, #20]
 8007dac:	edcc 7a00 	vstr	s15, [ip]
 8007db0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007e00 <__kernel_rem_pio2f+0x318>
 8007db4:	eb00 0802 	add.w	r8, r0, r2
 8007db8:	f04f 0c00 	mov.w	ip, #0
 8007dbc:	45d4      	cmp	ip, sl
 8007dbe:	dd0c      	ble.n	8007dda <__kernel_rem_pio2f+0x2f2>
 8007dc0:	eb02 0c07 	add.w	ip, r2, r7
 8007dc4:	a842      	add	r0, sp, #264	; 0x108
 8007dc6:	4484      	add	ip, r0
 8007dc8:	edcc 7a01 	vstr	s15, [ip, #4]
 8007dcc:	3101      	adds	r1, #1
 8007dce:	3204      	adds	r2, #4
 8007dd0:	e7da      	b.n	8007d88 <__kernel_rem_pio2f+0x2a0>
 8007dd2:	9b04      	ldr	r3, [sp, #16]
 8007dd4:	f04f 0c01 	mov.w	ip, #1
 8007dd8:	e7c7      	b.n	8007d6a <__kernel_rem_pio2f+0x282>
 8007dda:	ecfe 6a01 	vldmia	lr!, {s13}
 8007dde:	ed38 7a01 	vldmdb	r8!, {s14}
 8007de2:	f10c 0c01 	add.w	ip, ip, #1
 8007de6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007dea:	e7e7      	b.n	8007dbc <__kernel_rem_pio2f+0x2d4>
 8007dec:	3b01      	subs	r3, #1
 8007dee:	e769      	b.n	8007cc4 <__kernel_rem_pio2f+0x1dc>
 8007df0:	080089e0 	.word	0x080089e0
 8007df4:	080089b4 	.word	0x080089b4
 8007df8:	43800000 	.word	0x43800000
 8007dfc:	3b800000 	.word	0x3b800000
 8007e00:	00000000 	.word	0x00000000
 8007e04:	4260      	negs	r0, r4
 8007e06:	eeb0 0a48 	vmov.f32	s0, s16
 8007e0a:	f000 f981 	bl	8008110 <scalbnf>
 8007e0e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007df8 <__kernel_rem_pio2f+0x310>
 8007e12:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	db1a      	blt.n	8007e52 <__kernel_rem_pio2f+0x36a>
 8007e1c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007dfc <__kernel_rem_pio2f+0x314>
 8007e20:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007e24:	aa06      	add	r2, sp, #24
 8007e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e2a:	a906      	add	r1, sp, #24
 8007e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e30:	3408      	adds	r4, #8
 8007e32:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e3e:	ee10 3a10 	vmov	r3, s0
 8007e42:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007e46:	1c6b      	adds	r3, r5, #1
 8007e48:	ee17 2a90 	vmov	r2, s15
 8007e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e50:	e73f      	b.n	8007cd2 <__kernel_rem_pio2f+0x1ea>
 8007e52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e56:	aa06      	add	r2, sp, #24
 8007e58:	ee10 3a10 	vmov	r3, s0
 8007e5c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007e60:	462b      	mov	r3, r5
 8007e62:	e736      	b.n	8007cd2 <__kernel_rem_pio2f+0x1ea>
 8007e64:	aa06      	add	r2, sp, #24
 8007e66:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007e6a:	9202      	str	r2, [sp, #8]
 8007e6c:	ee07 2a90 	vmov	s15, r2
 8007e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e74:	3c01      	subs	r4, #1
 8007e76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007e7a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007e7e:	ed65 7a01 	vstmdb	r5!, {s15}
 8007e82:	e734      	b.n	8007cee <__kernel_rem_pio2f+0x206>
 8007e84:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007e88:	ecf7 6a01 	vldmia	r7!, {s13}
 8007e8c:	ed9c 7a00 	vldr	s14, [ip]
 8007e90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e94:	3401      	adds	r4, #1
 8007e96:	454c      	cmp	r4, r9
 8007e98:	dc01      	bgt.n	8007e9e <__kernel_rem_pio2f+0x3b6>
 8007e9a:	42a5      	cmp	r5, r4
 8007e9c:	daf2      	bge.n	8007e84 <__kernel_rem_pio2f+0x39c>
 8007e9e:	aa56      	add	r2, sp, #344	; 0x158
 8007ea0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007ea4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007ea8:	3501      	adds	r5, #1
 8007eaa:	3804      	subs	r0, #4
 8007eac:	e723      	b.n	8007cf6 <__kernel_rem_pio2f+0x20e>
 8007eae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007eb0:	2a03      	cmp	r2, #3
 8007eb2:	d84d      	bhi.n	8007f50 <__kernel_rem_pio2f+0x468>
 8007eb4:	e8df f002 	tbb	[pc, r2]
 8007eb8:	021f1f3e 	.word	0x021f1f3e
 8007ebc:	aa56      	add	r2, sp, #344	; 0x158
 8007ebe:	4411      	add	r1, r2
 8007ec0:	399c      	subs	r1, #156	; 0x9c
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	461c      	mov	r4, r3
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	dc5f      	bgt.n	8007f8a <__kernel_rem_pio2f+0x4a2>
 8007eca:	4608      	mov	r0, r1
 8007ecc:	461c      	mov	r4, r3
 8007ece:	2c01      	cmp	r4, #1
 8007ed0:	dc6b      	bgt.n	8007faa <__kernel_rem_pio2f+0x4c2>
 8007ed2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007e00 <__kernel_rem_pio2f+0x318>
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	dc77      	bgt.n	8007fca <__kernel_rem_pio2f+0x4e2>
 8007eda:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007ede:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007ee2:	f1b8 0f00 	cmp.w	r8, #0
 8007ee6:	d176      	bne.n	8007fd6 <__kernel_rem_pio2f+0x4ee>
 8007ee8:	edc6 6a00 	vstr	s13, [r6]
 8007eec:	ed86 7a01 	vstr	s14, [r6, #4]
 8007ef0:	edc6 7a02 	vstr	s15, [r6, #8]
 8007ef4:	e02c      	b.n	8007f50 <__kernel_rem_pio2f+0x468>
 8007ef6:	aa56      	add	r2, sp, #344	; 0x158
 8007ef8:	4411      	add	r1, r2
 8007efa:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007e00 <__kernel_rem_pio2f+0x318>
 8007efe:	399c      	subs	r1, #156	; 0x9c
 8007f00:	4618      	mov	r0, r3
 8007f02:	2800      	cmp	r0, #0
 8007f04:	da32      	bge.n	8007f6c <__kernel_rem_pio2f+0x484>
 8007f06:	f1b8 0f00 	cmp.w	r8, #0
 8007f0a:	d035      	beq.n	8007f78 <__kernel_rem_pio2f+0x490>
 8007f0c:	eef1 7a47 	vneg.f32	s15, s14
 8007f10:	edc6 7a00 	vstr	s15, [r6]
 8007f14:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f1c:	a82f      	add	r0, sp, #188	; 0xbc
 8007f1e:	2101      	movs	r1, #1
 8007f20:	428b      	cmp	r3, r1
 8007f22:	da2c      	bge.n	8007f7e <__kernel_rem_pio2f+0x496>
 8007f24:	f1b8 0f00 	cmp.w	r8, #0
 8007f28:	d001      	beq.n	8007f2e <__kernel_rem_pio2f+0x446>
 8007f2a:	eef1 7a67 	vneg.f32	s15, s15
 8007f2e:	edc6 7a01 	vstr	s15, [r6, #4]
 8007f32:	e00d      	b.n	8007f50 <__kernel_rem_pio2f+0x468>
 8007f34:	aa56      	add	r2, sp, #344	; 0x158
 8007f36:	4411      	add	r1, r2
 8007f38:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007e00 <__kernel_rem_pio2f+0x318>
 8007f3c:	399c      	subs	r1, #156	; 0x9c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da0e      	bge.n	8007f60 <__kernel_rem_pio2f+0x478>
 8007f42:	f1b8 0f00 	cmp.w	r8, #0
 8007f46:	d001      	beq.n	8007f4c <__kernel_rem_pio2f+0x464>
 8007f48:	eef1 7a67 	vneg.f32	s15, s15
 8007f4c:	edc6 7a00 	vstr	s15, [r6]
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	f003 0007 	and.w	r0, r3, #7
 8007f56:	b057      	add	sp, #348	; 0x15c
 8007f58:	ecbd 8b04 	vpop	{d8-d9}
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	ed31 7a01 	vldmdb	r1!, {s14}
 8007f64:	3b01      	subs	r3, #1
 8007f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f6a:	e7e8      	b.n	8007f3e <__kernel_rem_pio2f+0x456>
 8007f6c:	ed71 7a01 	vldmdb	r1!, {s15}
 8007f70:	3801      	subs	r0, #1
 8007f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f76:	e7c4      	b.n	8007f02 <__kernel_rem_pio2f+0x41a>
 8007f78:	eef0 7a47 	vmov.f32	s15, s14
 8007f7c:	e7c8      	b.n	8007f10 <__kernel_rem_pio2f+0x428>
 8007f7e:	ecb0 7a01 	vldmia	r0!, {s14}
 8007f82:	3101      	adds	r1, #1
 8007f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f88:	e7ca      	b.n	8007f20 <__kernel_rem_pio2f+0x438>
 8007f8a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007f8e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007f92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f96:	3c01      	subs	r4, #1
 8007f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f9c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa4:	edc0 7a00 	vstr	s15, [r0]
 8007fa8:	e78d      	b.n	8007ec6 <__kernel_rem_pio2f+0x3de>
 8007faa:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007fae:	ed70 6a01 	vldmdb	r0!, {s13}
 8007fb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007fb6:	3c01      	subs	r4, #1
 8007fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fbc:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc4:	edc0 7a00 	vstr	s15, [r0]
 8007fc8:	e781      	b.n	8007ece <__kernel_rem_pio2f+0x3e6>
 8007fca:	ed31 7a01 	vldmdb	r1!, {s14}
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fd4:	e77f      	b.n	8007ed6 <__kernel_rem_pio2f+0x3ee>
 8007fd6:	eef1 6a66 	vneg.f32	s13, s13
 8007fda:	eeb1 7a47 	vneg.f32	s14, s14
 8007fde:	edc6 6a00 	vstr	s13, [r6]
 8007fe2:	ed86 7a01 	vstr	s14, [r6, #4]
 8007fe6:	eef1 7a67 	vneg.f32	s15, s15
 8007fea:	e781      	b.n	8007ef0 <__kernel_rem_pio2f+0x408>

08007fec <__kernel_sinf>:
 8007fec:	ee10 3a10 	vmov	r3, s0
 8007ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007ff8:	da04      	bge.n	8008004 <__kernel_sinf+0x18>
 8007ffa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ffe:	ee17 3a90 	vmov	r3, s15
 8008002:	b35b      	cbz	r3, 800805c <__kernel_sinf+0x70>
 8008004:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008008:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008060 <__kernel_sinf+0x74>
 800800c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008064 <__kernel_sinf+0x78>
 8008010:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008014:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008068 <__kernel_sinf+0x7c>
 8008018:	eee6 7a07 	vfma.f32	s15, s12, s14
 800801c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800806c <__kernel_sinf+0x80>
 8008020:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008024:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008070 <__kernel_sinf+0x84>
 8008028:	ee60 6a07 	vmul.f32	s13, s0, s14
 800802c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008030:	b930      	cbnz	r0, 8008040 <__kernel_sinf+0x54>
 8008032:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008074 <__kernel_sinf+0x88>
 8008036:	eea7 6a27 	vfma.f32	s12, s14, s15
 800803a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800803e:	4770      	bx	lr
 8008040:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008044:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008048:	eee0 7a86 	vfma.f32	s15, s1, s12
 800804c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008050:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008078 <__kernel_sinf+0x8c>
 8008054:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008058:	ee30 0a60 	vsub.f32	s0, s0, s1
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	2f2ec9d3 	.word	0x2f2ec9d3
 8008064:	b2d72f34 	.word	0xb2d72f34
 8008068:	3638ef1b 	.word	0x3638ef1b
 800806c:	b9500d01 	.word	0xb9500d01
 8008070:	3c088889 	.word	0x3c088889
 8008074:	be2aaaab 	.word	0xbe2aaaab
 8008078:	3e2aaaab 	.word	0x3e2aaaab

0800807c <fabsf>:
 800807c:	ee10 3a10 	vmov	r3, s0
 8008080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008084:	ee00 3a10 	vmov	s0, r3
 8008088:	4770      	bx	lr
	...

0800808c <floorf>:
 800808c:	ee10 3a10 	vmov	r3, s0
 8008090:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008094:	0dca      	lsrs	r2, r1, #23
 8008096:	3a7f      	subs	r2, #127	; 0x7f
 8008098:	2a16      	cmp	r2, #22
 800809a:	dc2a      	bgt.n	80080f2 <floorf+0x66>
 800809c:	2a00      	cmp	r2, #0
 800809e:	da11      	bge.n	80080c4 <floorf+0x38>
 80080a0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008104 <floorf+0x78>
 80080a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80080a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80080ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b0:	dd05      	ble.n	80080be <floorf+0x32>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	da23      	bge.n	80080fe <floorf+0x72>
 80080b6:	4a14      	ldr	r2, [pc, #80]	; (8008108 <floorf+0x7c>)
 80080b8:	2900      	cmp	r1, #0
 80080ba:	bf18      	it	ne
 80080bc:	4613      	movne	r3, r2
 80080be:	ee00 3a10 	vmov	s0, r3
 80080c2:	4770      	bx	lr
 80080c4:	4911      	ldr	r1, [pc, #68]	; (800810c <floorf+0x80>)
 80080c6:	4111      	asrs	r1, r2
 80080c8:	420b      	tst	r3, r1
 80080ca:	d0fa      	beq.n	80080c2 <floorf+0x36>
 80080cc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008104 <floorf+0x78>
 80080d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80080d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80080d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080dc:	ddef      	ble.n	80080be <floorf+0x32>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bfbe      	ittt	lt
 80080e2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80080e6:	fa40 f202 	asrlt.w	r2, r0, r2
 80080ea:	189b      	addlt	r3, r3, r2
 80080ec:	ea23 0301 	bic.w	r3, r3, r1
 80080f0:	e7e5      	b.n	80080be <floorf+0x32>
 80080f2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80080f6:	d3e4      	bcc.n	80080c2 <floorf+0x36>
 80080f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80080fc:	4770      	bx	lr
 80080fe:	2300      	movs	r3, #0
 8008100:	e7dd      	b.n	80080be <floorf+0x32>
 8008102:	bf00      	nop
 8008104:	7149f2ca 	.word	0x7149f2ca
 8008108:	bf800000 	.word	0xbf800000
 800810c:	007fffff 	.word	0x007fffff

08008110 <scalbnf>:
 8008110:	b508      	push	{r3, lr}
 8008112:	ee10 2a10 	vmov	r2, s0
 8008116:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800811a:	ed2d 8b02 	vpush	{d8}
 800811e:	eef0 0a40 	vmov.f32	s1, s0
 8008122:	d004      	beq.n	800812e <scalbnf+0x1e>
 8008124:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008128:	d306      	bcc.n	8008138 <scalbnf+0x28>
 800812a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800812e:	ecbd 8b02 	vpop	{d8}
 8008132:	eeb0 0a60 	vmov.f32	s0, s1
 8008136:	bd08      	pop	{r3, pc}
 8008138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800813c:	d21c      	bcs.n	8008178 <scalbnf+0x68>
 800813e:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <scalbnf+0xac>)
 8008140:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80081c0 <scalbnf+0xb0>
 8008144:	4298      	cmp	r0, r3
 8008146:	ee60 0a27 	vmul.f32	s1, s0, s15
 800814a:	db10      	blt.n	800816e <scalbnf+0x5e>
 800814c:	ee10 2a90 	vmov	r2, s1
 8008150:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008154:	3b19      	subs	r3, #25
 8008156:	4403      	add	r3, r0
 8008158:	2bfe      	cmp	r3, #254	; 0xfe
 800815a:	dd0f      	ble.n	800817c <scalbnf+0x6c>
 800815c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80081c4 <scalbnf+0xb4>
 8008160:	eeb0 0a48 	vmov.f32	s0, s16
 8008164:	f000 f834 	bl	80081d0 <copysignf>
 8008168:	ee60 0a08 	vmul.f32	s1, s0, s16
 800816c:	e7df      	b.n	800812e <scalbnf+0x1e>
 800816e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80081c8 <scalbnf+0xb8>
 8008172:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008176:	e7da      	b.n	800812e <scalbnf+0x1e>
 8008178:	0ddb      	lsrs	r3, r3, #23
 800817a:	e7ec      	b.n	8008156 <scalbnf+0x46>
 800817c:	2b00      	cmp	r3, #0
 800817e:	dd06      	ble.n	800818e <scalbnf+0x7e>
 8008180:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008184:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008188:	ee00 3a90 	vmov	s1, r3
 800818c:	e7cf      	b.n	800812e <scalbnf+0x1e>
 800818e:	f113 0f16 	cmn.w	r3, #22
 8008192:	da06      	bge.n	80081a2 <scalbnf+0x92>
 8008194:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008198:	4298      	cmp	r0, r3
 800819a:	dcdf      	bgt.n	800815c <scalbnf+0x4c>
 800819c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80081c8 <scalbnf+0xb8>
 80081a0:	e7de      	b.n	8008160 <scalbnf+0x50>
 80081a2:	3319      	adds	r3, #25
 80081a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80081a8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80081ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 80081cc <scalbnf+0xbc>
 80081b0:	ee07 3a10 	vmov	s14, r3
 80081b4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80081b8:	e7b9      	b.n	800812e <scalbnf+0x1e>
 80081ba:	bf00      	nop
 80081bc:	ffff3cb0 	.word	0xffff3cb0
 80081c0:	4c000000 	.word	0x4c000000
 80081c4:	7149f2ca 	.word	0x7149f2ca
 80081c8:	0da24260 	.word	0x0da24260
 80081cc:	33000000 	.word	0x33000000

080081d0 <copysignf>:
 80081d0:	ee10 3a10 	vmov	r3, s0
 80081d4:	ee10 2a90 	vmov	r2, s1
 80081d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80081e0:	4313      	orrs	r3, r2
 80081e2:	ee00 3a10 	vmov	s0, r3
 80081e6:	4770      	bx	lr

080081e8 <_init>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr

080081f4 <_fini>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	bf00      	nop
 80081f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fa:	bc08      	pop	{r3}
 80081fc:	469e      	mov	lr, r3
 80081fe:	4770      	bx	lr
